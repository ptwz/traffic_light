-- ------------------------------------------------------
-- Title: control for DOG-M (ST7036 based) LCD's
--
-- Author: Richard Zengerink,  Copyright (c) 2008, all rights reserved
-- Adapted-by:
--
-- Compiler: =2.4
-- Revision: $Revision: 1.1 $
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
--
--
-- Description:
--    Simple interface for DOG-M (st7036) alphanumeric LCD screens.
--    Screens can range from 1x8  (1 lines, 8 chars), 2x16 and 3x16.
--    Uses 4 bit wide datapath + 2 handshake lines (total 6 PIC pins).
--    Expects: - 2 pins for handshake: 'lcd_rs' and 'lcd_en'
--             - 1 port nibble for data: 'lcd_dataport'
--    *
--    Directions for use of this library in application programs
--    (in this sequence):
--    1. Declare the following constants:
--          const byte LCD_ROWS     = 2              -- 1, 2 or 3 lines
--          const byte LCD_CHARS    = 16             -- 8, 16 chars per line
--       and variables (aliases):
--          var   byte lcd_dataport  is  portA_low   -- 4 data pins
--          var   bit  lcd_en        is  pin_A4      -- trigger
--          var   bit  lcd_rs        is  pin_A5      -- cmd/data select
--    2. Include this library.
--    and somewhere before actually using the lcd:
--    3. Set the chosen LCD dataport and handshake pins to output:
--          portA_low_direction = all_output
--          pin_A4_direction    = output
--          pin_A5_direction    = output
--    4. Call lcd_init() to initialize the lcd controller.
--    Above is an example for a 2x16 LCD:
--      Bits 0..3 of portA are used for data, pins 4 and 5 of portA are
--      used for handshake. Any other available nibble and handshake pins
--      could be used (provided these are configurable for output).
--
--    Available functions for application programs:
--
--      __lcd_write(<byte>)                     sends byte from value to
--                                             register of the lcd and
--                                             shift cursor position 1 right
--
--      _lcd_write_data(<byte>)                write data to lcd using
--                                             __lcd_write(<byte>) lcd_rs high
--
--      _lcd_write_data(<byte>)                write command to lcd using
--                                             __lcd_write(<byte>) lcd_rs low
--
--      lcd_init()                             initialize the LCD controller
--
--
-- Dependencies: delay.jal
--
-- -----------------------------------------------------------------------------

--
-- Notes:
--
-- this type can be attached to your microcontroller serial with only 3 or
-- 4 lines in total
-- example type name: EA DOG-M   http://www.lcd-module.com/products/dog.html
--

include delay                    --  include standard delay lib
--
--
--
-- -----------------------------------------------------------------------------
-- delay's necessary for initialisation and some commands
-- -----------------------------------------------------------------------------
const lcd_normal_delay    = 3   -- delay in 10 usec units     = 30uS
const lcd_long_delay      = 120 -- delay in 10 usec units     = 1,2mS
-- -----------------------------------------------------------------------------
--
--
--

-- ----------------------------------------------------------
-- Send byte to the LCD as 2 nibbles (most significant nibble first)
-- and automatically set the cursor one position right.
-- ----------------------------------------------------------
procedure  __lcd_write(byte in value) is
--   pragma inline
    lcd_dataport = (value >> 4)

    lcd_en = high                                -- trigger on
    asm nop                                      -- delay (> 400 ns)
    lcd_en = low                                 -- trigger off

    lcd_dataport = value                         -- replace low nibble
    lcd_en = high                                -- trigger on
    asm nop                                      -- delay (> 400 ns)
    lcd_en = low                                 -- trigger off

    delay_10us(lcd_normal_delay)      		          -- required normal delay

end procedure



-- ----------------------------------------------------------------------------
-- sends data byte in value to LCD
--
-- ----------------------------------------------------------------------------
procedure _lcd_write_data(byte in value) is
--   pragma inline
    lcd_rs = high 							-- select data
    __lcd_write( value )     				-- output byte
end procedure 
--------------------------------------------------------------------------- 


-- ---------------------------------------------------------------------------- 
-- sends command byte in value to LCD 
--
-- ---------------------------------------------------------------------------- 
procedure _lcd_write_command(byte in value) is ;
--   pragma inline
   lcd_rs = low                             -- select instruction
   __lcd_write( value )                      -- output byte

   if value < 4 then                			-- "clear display' and 'return home'
      delay_10us( lcd_long_delay ) 			-- require extra delay
   end if

end procedure 
-- ----------------------------------------------------------------------------  



-- now we defined the interface, add the API 
include lcd_hd44780_common 


-- ----------------------------------------------------------------------------
-- Initialize display in 1 and 2 or 3 line, display on, no cursor shown an cursor
-- moves to the right.
-- ----------------------------------------------------------------------------
procedure lcd_init() is
--   pragma inline
    delay_1ms( 45 )                    	-- powerup delay for 45mS
    if LCD_ROWS == 1 then
       _lcd_write_command( 0b_0010_0000 ) 		-- function 4bit N=0,5x7dots
       _lcd_write_command( 0b_0010_0001 ) 		-- function 4bit N=0,5x7dots IS1=1
       _lcd_write_command( 0b_0001_0100 ) 		-- BIAS  1 and 2 line setting
    end if
    if LCD_ROWS == 2 then
       _lcd_write_command( 0b_0010_1000 ) 		-- function 4bit N=1,5x7dots
       _lcd_write_command( 0b_0010_1001 ) 		-- function 4bit N=1,5x7dots IS1=1
       _lcd_write_command( 0b_0001_0100 ) 		-- BIAS  1 and 2 line setting
    end if
    if LCD_ROWS == 3 then
       _lcd_write_command( 0b_0010_1000 ) 		-- function 4bit N=1,5x7dots
       _lcd_write_command( 0b_0010_1001 ) 		-- function 4bit N=1,5x7dots IS1=1
       _lcd_write_command( 0b_0001_0101 ) 		-- BIAS  3 line setting
    end if
       _lcd_write_command( 0b_0111_0000 ) -- contrast set
       delay_10us( 3)                    -- extra delay
       _lcd_write_command( 0b_0101_1110 ) -- power/ICON/contrast control
       delay_10us( 3 )
       _lcd_write_command( 0b_0110_1010 ) -- follower control
       delay_1ms( 210 )                   -- extra delay to let display settle
       _lcd_write_command( 0b_0011_1000 ) -- function set lcd port
       delay_10us ( 3 )                      -- extra delay
       _lcd_write_command( 0b_0000_1100 )-- display on/off control
  	   delay_10us( 3 )
       _lcd_write_command( 0b_0000_0001 )-- clear display
  	   delay_10us( 40 )
       _lcd_write_command( 0b_0000_0110 )-- entry mode set, cursor moves to right
  	   delay_10us( 40 )
end procedure



