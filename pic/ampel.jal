-- ------------------------------------------------------
-- Title: Ampelsteuerung mit Drahtbrucherkennung
--
-- Author: Peter Turczak, NC
--
-- Adapted-by:
--
-- Compiler: jalv2 >=2.4h
--
-- ------------------------------------------------------
--             P I N O U T   A N D    U S A G E
--
-- PRI   PIN#  Signal   Signal PIN#  PRI      SEC
--             +------   ------+
--           1 I VDD  \_/  VSS I 20  GND
-- QUARTZ    2 I RA5       RA0 I 19           ICSP_DAT
-- QUARTZ    3 I RA4       RA1 I 18  VREF     ICSP_CLK
-- RMTE VPP  4 I RA3       RA2 I 17
-- YELLOW_EN 5 I RC5       RC0 I 16 RED_SENSE
-- GREEN_EN  6 I RC4       RC1 I 15 YELLOW_SENSE
-- RED_EN    7 I RC3       RC2 I 14 GREEN_SENSE
--           8 I RC6       RB4 I 13 I2C_SDA
-- BAT_SENSE 9 I RC7       RB5 I 12 RXD
-- TXD      10 I RB7       RB6 I 11 I2C_SCL
--             +---------------+
--
-- ------------------------------------------------------
--
include 16f690		-- target PICmicro
include pic_data_eeprom
include print

-- Number of pulses/second
const second = 48

const min_on_current_default = 50
const max_on_current_default = 2048
const max_off_current_default = 20

--
pragma target OSC hs -- External quartz
pragma target clock 10_000_000     -- oscillator frequency
pragma target IESO DISABLED
pragma target FCMEN DISABLED
pragma target PWRTE ENABLED
const serial_hw_baudrate = 19200;
var bit serial_ctsinv;
var bit serial_overflow_discard=false;
include serial_hw_int_cts
serial_hw_init()
-- include adc_hardware
--
pragma target WDT  disabled
-- pragma target MCLR internal
--
enable_digital_io()                -- disable analog I/O (if any)
--

var bit yellow_en           is pin_C5
pin_C5_direction = output
var bit red_en              is pin_C3
pin_C3_direction = output
var bit green_en            is pin_C4
pin_C4_direction = output

-- Mirror bits for outputs
var bit red;
var bit yellow;
var bit green;

-- Analog inputs
pin_C7_direction = input
const batt_sense = 9
pin_C0_direction = input
const red_sense = 4
pin_C1_direction = input
const yellow_sense = 5
pin_C2_direction = input
const green_sense = 6

-- Setup A/D
-- AN4..AN6 Lamp sense, AN9=Batt Sense
-- 16 Tosc
ANSEL  = 0b0111_0000;
ANSELH = 0b0000_0010;
ADCON0_ADFM = 1;
ADCON0_VCFG = 1; External ref. Voltage
ADCON0_ADON = 1;
-- TMR0: A/D wait timer
-- Clk = 10MHz/4 = 2.5MHz
OPTION_REG_PSA = 0
OPTION_REG_T0CS = 0

-- TMR1: "Pulse" timer
T2CON_T2CKPS = 2;
T2CON_TOUTPS = 0b1111;
-- PR=(65535-3907) -> ~4Hz
-- PR2 = 255-16;word(65535-3907)
T2CON_TMR2ON = 1
TMR2 = 0
PIR1_TMR2IF = 0
PIE1_TMR2IE = 1


var byte pulse;
pulse = 0;

var byte analog_chan;
analog_chan = 0;
var byte analog_cycles;
analog_cycles = 0;
var word analog_values[10];
analog_chan = 4;
var bit wait_adsettle;
wait_adsettle = 0;

var dword batt_voltage; Battery voltage in 1/100th Volt
batt_voltage = 1<<31;

var byte tmp;
for 10 using tmp loop
    ; Mark channels unread
    analog_values[tmp]=65534;
end loop

ADCON0_GO = 1;

-- INTCON_PEIE = 1;

procedure isr is
pragma interrupt
    if PIR1_TMR2IF then
        if pulse < 255 then
            pulse = pulse + 1
        end if
        PIR1_TMR2IF = 0
    end if
end procedure

var word min_on_current;
var word max_on_current;
var word max_off_current;

procedure load_eeprom() is
    var word eeprom_tmp;

    data_eeprom_read_word(0, eeprom_tmp);
    if eeprom_tmp < 65534 then
        min_on_current = eeprom_tmp
    else
        min_on_current = min_on_current_default
    end if

    data_eeprom_read_word(2, eeprom_tmp);
    if eeprom_tmp < 65534 then
        max_on_current = eeprom_tmp
    else
        max_on_current = max_on_current_default
    end if

    data_eeprom_read_word(4, eeprom_tmp);
    if eeprom_tmp < 65534 then
        max_off_current = eeprom_tmp
    else
        max_off_current = max_off_current_default
    end if

    print_crlf(serial_hw_data);
    serial_hw_data = "H";
    print_word_dec(serial_hw_data, min_on_current)
    serial_hw_data = " ";
    print_word_dec(serial_hw_data, max_on_current)
    serial_hw_data = " ";
    print_word_dec(serial_hw_data, max_off_current)
    print_crlf(serial_hw_data);
end procedure

procedure analog_statemachine is
 if (INTCON_T0IF == 1) & (wait_adsettle) then
    INTCON_T0IF = 0;
    wait_adsettle = 0;
    ADCON0_GO = 1;
 end if;
 ; Got A/D Value
 if PIR1_ADIF then
         PIR1_ADIF = 0;
         analog_values[analog_chan] = (word(ADRESH) << 8) | ADRESL;
         case analog_chan of
          4: analog_chan=5;
          5: analog_chan=6;
          6: analog_chan=9;
          otherwise block
            analog_chan=4;
            end block;
         end case
         ADCON0_CHS = analog_chan;
         ; Start wait timer ~102.4us
         ; TMX_EN
         TMR0 = 0;
         INTCON_T0IF = 0;
         wait_adsettle = 1;
         if analog_cycles < 255 then
            analog_cycles = analog_cycles + 1
         end if
 end if
end procedure

var byte traffic_state;
const TRAFFIC_TEST_RED = 0;
const TRAFFIC_TEST_RED_YELLOW = 1;
const TRAFFIC_TEST_RED_YELLOW_GREEN = 2;
const TRAFFIC_GREEN = 3;
const TRAFFIC_YELLOW = 4;
const TRAFFIC_RED = 5;
const TRAFFIC_RED_YELLOW = 6;
const TRAFFIC_TEMP_ERROR_DARK = 7;
const TRAFFIC_TEMP_ERROR = 8;
const TRAFFIC_FAIL = 9;

traffic_state = TRAFFIC_TEST_RED;

var word error_state;
error_state = 0;
var bit red_current_when_off at error_state:0
var bit red_undercurrent at error_state:1
var bit red_overcurrent at error_state:2
var bit yellow_current_when_off at error_state:3
var bit yellow_undercurrent at error_state:4
var bit yellow_overcurrent at error_state:5
var bit green_current_when_off at error_state:6
var bit green_undercurrent at error_state:7
var bit green_overcurrent at error_state:8

var bit request_green;
request_green = 0;
var bit request_temp_error;
request_temp_error = 0;


procedure check_plausible(byte in channel, bit in state, byte out error_flags) is
 error_flags = 0;
 if analog_values[channel] == 65534 then
    return
 end if

 if !state & (analog_values[channel] > max_off_current ) then
    error_flags = error_flags | 0b001;
 end if

 if state & ( analog_values[channel] < min_on_current) then
    error_flags = error_flags | 0b010
 end if

 if state & ( analog_values[channel] > max_on_current) then
    error_flags = error_flags | 0b100
 end if

end procedure

procedure traffic_statemachine() is
   var byte oldstate;
   oldstate = traffic_state;

   case traffic_state of
    TRAFFIC_TEST_RED: block
        red = 1;
        yellow = 0;
        green = 0;
        if (pulse > 1*second) then
                pulse = 0;
                traffic_state = TRAFFIC_TEST_RED_YELLOW
        end if
        end block
    TRAFFIC_TEST_RED_YELLOW: block
        red = 1;
        yellow = 1;
        green = 0;
            if (pulse > 1*second) then
                pulse = 0;
                traffic_state = TRAFFIC_TEST_RED_YELLOW_GREEN
            end if
        end block
    TRAFFIC_TEST_RED_YELLOW_GREEN: block
        red = 1;
        yellow = 1;
        green = 1;
            if (pulse > 1*second) then
                pulse = 0;
                traffic_state = TRAFFIC_RED
            end if
        end block
    TRAFFIC_GREEN: block
        red = 0;
        yellow = 0;
        green = 1;
        if request_green == 0 then
            pulse = 0;
            traffic_state = TRAFFIC_YELLOW
        end if
        if request_temp_error then
            traffic_state = TRAFFIC_TEMP_ERROR
        end if
        end block
    TRAFFIC_YELLOW: block
        red = 0;
        yellow = 1;
        green = 0;
            if (pulse > 4*second) then
                traffic_state = TRAFFIC_RED
            end if
        end block
    TRAFFIC_RED: block
        red = 1;
        yellow = 0;
        green = 0;
        if request_green then
            traffic_state = TRAFFIC_RED_YELLOW;
        end if
        if request_temp_error then
            traffic_state = TRAFFIC_TEMP_ERROR
        end if
        end block
    TRAFFIC_RED_YELLOW: block
        red = 1;
        yellow = 1;
        green = 0;
        if pulse > 4*second then
            traffic_state = TRAFFIC_GREEN
        end if
        if request_green == 0 then
            traffic_state = TRAFFIC_RED
        end if
        end block;
    TRAFFIC_TEMP_ERROR: block
        red = 0;
        green = 0;
        yellow = 1;
        if (pulse > 1*second) then
            pulse = 0;
            traffic_state = TRAFFIC_TEMP_ERROR_DARK;
        end if
        if !request_temp_error then
            traffic_state = TRAFFIC_GREEN
        end if
        end block;
    TRAFFIC_TEMP_ERROR_DARK: block
        red = 0;
        green = 0;
        yellow = 0;
        if (pulse > 1*second) then
            pulse = 0;
            traffic_state = TRAFFIC_TEMP_ERROR;
        end if
        end block;
    TRAFFIC_FAIL: block
        red = 0;
        green = 0;
        if (pulse > 2*second) then
            yellow = ! yellow;
            pulse = 0;
        end if
        end block;
   end case

   red_en = !red; ON HW ~RED !!
   green_en = green;
   yellow_en = yellow;

   if oldstate != traffic_state then
    analog_cycles = 0;
    pulse = 0;
   end if

   ;; Automatic sanity check of outputs
   if analog_cycles > 10 then
        var word tmp_w;
        check_plausible(red_sense, red, tmp_w);
        error_state = error_state | tmp_w
        check_plausible(yellow_sense, yellow, tmp_w);
        error_state = error_state | (tmp_w << 3);
        check_plausible(green_sense, green, tmp_w);
        error_state = error_state | (tmp_w << 6);
        if error_state != 0 then
            traffic_state = TRAFFIC_FAIL;
        end if
   end if
end procedure

var byte serial_state;
var word serial_word;
var byte serial_addr;
const SERIAL_IDLE = 0;
const SERIAL_READ_ADDRESS = 1;
const SERIAL_READ_DATA = 2;
serial_state = SERIAL_IDLE;

procedure serial_statemachine() is
    if ! serial_hw_read(tmp) then
        return
    end if
    if serial_state == SERIAL_IDLE then
        if tmp=="G" then
            request_green = 1
        end if
        if tmp=="g" then
            request_green = 0
        end if
        if tmp=="e" then
            request_temp_error = 0
        end if
        if tmp=="E" then
            request_temp_error = 1
        end if
        if tmp=="s" then
            serial_state = SERIAL_READ_ADDRESS
            serial_word = 0
        end if
        return
    end if
    if (serial_state == SERIAL_READ_ADDRESS) | (serial_state == SERIAL_READ_DATA) then
        if (tmp>="0") & (tmp<="9") then
            serial_word = (serial_word * 10) + ( tmp - "0" );
        end if
        if (tmp=="=") & (serial_state == SERIAL_READ_ADDRESS) then
            serial_state = SERIAL_READ_DATA;
            serial_addr = byte(serial_word)
            serial_word = 0
        end if
        if ((tmp==0x0a) | (tmp==0x0d)) & (serial_state == SERIAL_READ_DATA) then
            serial_state = SERIAL_IDLE;
            data_eeprom_write_word(serial_addr*2, serial_word);
            serial_word = 0
        end if
        if tmp==27 then
            serial_state = SERIAL_IDLE;
        end if
        return
    end if
end procedure

load_eeprom()

forever loop
    -- Scale factor:
    -- Usense=1/11*Ubatt
    -- Uref = 2.5V eq. 1024
    -- factor: 11*2.5/1024 * 10 ( <- 1/100 volt/count)
    batt_voltage = ((dword(analog_values[batt_sense])) * 2750)/1024

    analog_statemachine();
    traffic_statemachine();
    serial_statemachine();
    print_byte_dec(serial_hw_data, traffic_state);
    serial_hw_data = " ";
    print_dword_dec(serial_hw_data, batt_voltage);
    serial_hw_data = " ";
    print_word_hex(serial_hw_data, error_state);
    serial_hw_data = " ";
    print_word_dec(serial_hw_data, analog_values[red_sense]);
    serial_hw_data = " ";
    print_word_dec(serial_hw_data, analog_values[yellow_sense]);
    serial_hw_data = " ";
    print_word_dec(serial_hw_data, analog_values[green_sense]);
    serial_hw_data = " ";
    print_crlf(serial_hw_data);
end loop
