-- Title: ADC hardware, built-in PIC ADC module
-- Author: Stef Mientki, Copyright (c) 2002..2008, all rights reserved.
-- Adapted-by: Sebastien Lelong.
-- Compiler: >=2.4g
-- Revision: $Revision: 1.1 $
-- 
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Sources: I (Stef) mixed the following libraries with my own ideas
--  * f877_modules.jal from Javier Martinez
--  * janalog.jal from Vasile Surducan
--
-- Description: library to use the PIC's AD converter
-- See 16F87x datasheet (DS30292C, p112)
-- Number of channels, behind "--" yields only for 16F874 and 16F877
-- No external Vref: Nchan = 1,3,5 -- 6,8
-- Only external +Vref: Nchan = 2,4 -- 5,7
-- Both external +Vref and - Vref: Nchan = 1,2,3 -- 4,6
-- --
-- Analog channels can still be used as digital outputs, by setting
--     pin = output
-- --
-- relevant IO pins
--  * RA0 = AN0
--  * RA1 = AN1
--  * RA2 = AN2  or  -Vref
--  * RA3 = AN3  or  +Vref
--  * RA4 = no analog IO
--  * RA5 = AN4
--  * next pins only for 16F874 and 16F877
--  * RE0 = AN5
--  * RE1 = AN6
--  * RE2 = AN7
-- --
-- --
-- Example PIC-AD
-- -- (if you use JALcc, you can copy the complete example below and "uncomment" it)
-- -- define the AD converter settings
-- const ADC_hardware_Nchan      = 2         ;number of selected channels
-- const ADC_hardware_NVref      = 0         ;number of external references
-- const ADC_hardware_Rsource    = 10_000    ;maximum source resistance
-- const ADC_hardware_high_resolution = true ;true = high resolution = 10 bits
--                                           ;false = low resolution = 8 bits
-- -- get the library, after defining the constants
-- include adc_hardware
-- --
-- -- initialize the AD converter according to the above parameters
-- ADC_init
-- --
-- -- now take a sample 
-- -- read high resolution, channel 0
-- var_word=adc_read(0)
-- -- read low resolution, channel 0
-- var_byte=adc_read_low_res(0)  
--
-- -- -----------------------------------------------------------------------------

_warn "adc_hardware is being deprecated, you should consider using new adc.jal library"

include delay

-- sanity check
if adc_hardware_high_resolution & ! defined(ADRESH) then
   _error " This pic does not seem to handle 10-bits ADC"
end if

-- local variables

var volatile byte _adcon0_shadow = 0
var volatile byte _adc_acquisition_time


-- Does an AD conversion with low resolution (8 bit) on the selected channel
procedure _adc_read_low_res(byte in adc_chan, byte out adc_byte) is

   if target_chip == PIC_12F675 then
      ADCON0 = _adcon0_shadow | ((adc_chan & 0x03) << 2) -- setup multiplexer
   else 
      ADCON0 = _adcon0_shadow | ((adc_chan & 0x07) << 3) -- setup multiplexer
   end if
   delay_10us(_adc_acquisition_time)  -- wait acquisition time
   ADCON0_GO = true                          -- start conversion
   while ADCON0_GO loop end loop             -- wait till conversion finished
   -- 2 cases:
   --   - PIC has 10-bits ADC: since low resoltion if left
   --     justified, need to read ADRESH
   --   - PIC has only a 8-bits ADC: don't bother consider
   --     justification, there's only one ADC register
   if defined(ADRESH) == true then
	  adc_byte = ADRESH                  -- read high byte 
		                                 --   (low resolution is left justified !!
   else
	  adc_byte = ADRES
   end if
   if target_clock <= (5_000_000 / 16)  then                            
      delay_10us(1)                    -- to satisfy 2*Tad for next conversion
   end if
end procedure


-- Does an AD conversion on the selected channel
-- returns the result as a 10-bits word
-- It doesn't matter if ADC is set to low or high resolution
function adc_read(byte in adc_chan) return word is
   var word ad_value
   var byte ax[2] at ad_value
   
   if adc_hardware_high_resolution then
      _adc_read_low_res (adc_chan,ax[1])   -- do conversion and get high byte  
      ax[0] = ADRESL                       -- get low byte
   else
      _adc_read_low_res (adc_chan,ax[0])   -- do conversion and get low byte  
      ax[1] = 0                            -- clear high byte
      -- shift 2 highest order bits form low byte to high byte,
      -- to get a 10-bit result
      ad_value = ad_value <<  2
   end if
   
   return ad_value
end function


-- Does an AD conversion on the selected channel
-- returns the 10-bit result as 2 byte parameters
-- It doesn't matter if ADC is set to low or high resolution
procedure adc_read_bytes(byte in adc_chan, byte out adc_hbyte, byte out adc_lbyte) is
   var word ad_value
   var byte ax[2] at ad_value
   ad_value = adc_read (adc_chan)
   adc_hbyte = ax[1]
   adc_lbyte = ax[0]
end procedure


-- Returns Low Resolution ADC-value as the RESULT
-- It doesn't matter if ADC is set to low or high resolution
function adc_read_low_res(byte in adc_chan) return byte is
   var byte adc_value
   var byte adc_hbyte
   if ! adc_hardware_high_resolution then
      _adc_read_low_res(adc_chan,adc_value)
   else
      _adc_read_low_res(adc_chan,adc_hbyte)
      adc_value = ADRESL
      -- shift the 2 highest order bits form high byte to low byte
      asm  rrf   adc_hbyte,f
      asm  rrf   adc_value,f
      asm  rrf   adc_hbyte,f
      asm  rrf   adc_value,f
   end if
   return adc_value
end function


-- Internal routine, that
-- calculates aquisition time
-- and determines if right or left justification is optimal
procedure _ad_init_general() is
   -- if high resolution, right justified, read H + L
   -- if low  resolution, left  justified, only read H
   if target_chip == PIC_12F675 then
      if adc_hardware_high_resolution then
         _adcon0_shadow = _adcon0_shadow | 0x80
      end if
   else
      if adc_hardware_high_resolution then 
         ADCON1 = ADCON1 | 0x80
      end if
   end if
   
   -- select the highest possible clock rate
   -- that satisfies Tad > 1.6 usec
   -- AD converter is always turned ON
   if target_chip == PIC_12F675 then
      ADCON1 = ADCON1 & 0b_0000_1111
      if target_clock > 40_000_000 then
         ADCON1 = ADCON1 | 0b_0111_0000
      elsif target_clock > 20_000_000 then
         ADCON1 = ADCON1 | 0b_0110_0000
      elsif target_clock > 10_000_000 then
         ADCON1 = ADCON1 | 0b_0010_0000
      elsif target_clock >  5_000_000 then
         ADCON1 = ADCON1 | 0b_0101_0000
      elsif target_clock > (5_000_000 / 2) then
         ADCON1 = ADCON1 | 0b_0001_0000
      elsif target_clock > (5_000_000 / 4) then
         ADCON1 = ADCON1 | 0b_0100_0000
      elsif target_clock > (5_000_000 / 8) then
         ADCON1 = ADCON1 | 0b_0000_0000
      else
         ADCON1 = ADCON1 | 0b_0111_0000
      end if
   else
      if target_clock >  5_000_000 then
         _adcon0_shadow = 0b_1000_0001   
      elsif target_clock > (5_000_000 / 4) then
         _adcon0_shadow = 0b_0100_0001   
      elsif target_clock > (5_000_000 / 16) then
         _adcon0_shadow = 0b_0000_0001  
      else
         _adcon0_shadow = 0b_1100_0001
      end if
   end if
   
   -- calculate AD-conversion time in 10 usec units
   -- an extra 10 usec is added to ensure the minimum acquistion time
   const adc_conversion_delay = (10 + 15 + (adc_hardware_rsource / 1_000  )) / 10
   _adc_acquisition_time = adc_conversion_delay
end procedure


-- Initializes the PIC AD-converter, when no external Vref is present
-- Settings are done according to the special ADC constants
-- Sets all the analog pins to input
-- Calculates aquisition time and determines if right or 
-- left justification is optimal
procedure _adc_init_no_vref() is
   if target_chip != PIC_12F675 then
      -- start with left justified
      if adc_hardware_nchan == 1 then  -- chan = 0
         ADCON1 = 0b_0000_1110  
         pin_A0_direction = input             
      elsif adc_hardware_nchan == 3 then   -- chan = 0,1,3  (special case!!)
         ADCON1 = 0b_0000_0100
         pin_A0_direction = input             
         pin_A1_direction = input             
         pin_A3_direction = input             
      elsif adc_hardware_nchan == 5 then   -- chan = 0,1,2,3,4
         ADCON1 = 0b_0000_0010
         pin_A0_direction = input             
         pin_A1_direction = input             
         pin_A2_direction = input             
         pin_A3_direction = input             
         pin_A5_direction = input             
      elsif (adc_hardware_nchan == 6) & ((target_chip == PIC_16F877) | (target_chip == PIC_16F877A)) then -- chan = 0..5
         ADCON1 = 0b_0000_1001
         pin_A0_direction = input             
         pin_A1_direction = input             
         pin_A2_direction = input             
         pin_A3_direction = input             
         pin_A5_direction = input             
         pin_E0_direction = input             
      elsif (adc_hardware_nchan == 8) & ((target_chip == PIC_16F877) | (target_chip == PIC_16F877A)) then -- chan = 0..7
         ADCON1 = 0b_0000_0000
         pin_A0_direction = input             
         pin_A1_direction = input             
         pin_A2_direction = input             
         pin_A3_direction = input             
         pin_A5_direction = input             
         pin_E0_direction = input             
         pin_E1_direction = input             
         pin_E2_direction = input             
      else
         if adc_hardware_nvref == 0 then
            _error "this number of channels is not available"
         end if
      end if
      
      -- calculate aquisition delay and optimize justify
      _ad_init_general()
   end if
end procedure


-- Initializes the PIC AD-converter, when only +Vref is present
-- Settings are done according to the special ADC constants
-- Sets all the analog pins to input
-- Calculates aquisition time and determines if right or 
-- left justification is optimal
procedure _adc_init_1_vref() is
   if target_chip != PIC_12F675 then
      -- start with left justified
      if adc_hardware_nchan == 2 then  -- chan = 0,1
         ADCON1 = 0b_0000_0101
         pin_A0_direction = input             
         pin_A1_direction = input             
         pin_A3_direction = input                -- +Vref
      elsif adc_hardware_nchan == 4 then   -- chan = 0,1,2
         ADCON1 = 0b_0000_0011
         pin_A0_direction = input             
         pin_A1_direction = input             
         pin_A2_direction = input             
         pin_A3_direction = input             
      elsif (adc_hardware_nchan == 5) & ((target_chip == PIC_16F877) | (target_chip == PIC_16F877A)) then -- chan = 0,1,2,4,5
         ADCON1 = 0b_0000_1001
         pin_A0_direction = input             
         pin_A1_direction = input             
         pin_A2_direction = input             
         pin_A3_direction = input             
         pin_A5_direction = input             
         pin_E0_direction = input             
      elsif (adc_hardware_nchan == 7) & ((target_chip == PIC_16F877) | (target_chip == PIC_16F877A))  then -- chan = 0,1,2,4,5,6,7
         ADCON1 = 0b_0000_0000
         pin_A0_direction = input             
         pin_A1_direction = input             
         pin_A2_direction = input             
         pin_A3_direction = input             
         pin_A5_direction = input             
         pin_E0_direction = input             
         pin_E1_direction = input             
         pin_E2_direction = input             
      else
         if adc_hardware_nvref == 1 then
            _error "this number of channels is not available"
         end if
      end if
   
      -- calculate aquisition delay and optimize justify
      _ad_init_general()
   end if
end procedure


-- Initializes the PIC AD-converter, when both +Vref and -Vref are present
-- Settings are done according to the special ADC constants
-- Sets all the analog pins to input
-- Calculates aquisition time and determines if right or 
-- left justification is optimal
procedure _adc_init_2_vref() is
   if target_chip != PIC_12F675 then
      -- start with left justified
      if    adc_hardware_nchan == 1 then  -- chan = 0
         ADCON1 = 0b_0000_1111
         pin_A0_direction = input             
         pin_A2_direction = input                  -- -Vref
         pin_A3_direction = input                -- +Vref             
      elsif adc_hardware_nchan == 2 then  -- chan = 0,1
         ADCON1 = 0b_0000_1101
         pin_A0_direction = input             
         pin_A1_direction = input             
         pin_A2_direction = input                  -- -Vref
         pin_A3_direction = input                -- +Vref             
      elsif adc_hardware_nchan == 3 then   -- chan = 0,1,4
         ADCON1 = 0b_0000_1100
         pin_A0_direction = input             
         pin_A1_direction = input             
         pin_A2_direction = input                  -- -Vref
         pin_A3_direction = input                -- +Vref             
         pin_A4_direction = input             
      elsif (adc_hardware_nchan == 4) & ((target_chip == PIC_16F877) | (target_chip == PIC_16F877A)) then -- chan = 0,1,4,5
         ADCON1 = 0b_0000_1011
         pin_A0_direction = input             
         pin_A1_direction = input             
         pin_A2_direction = input                  -- -Vref
         pin_A3_direction = input                -- +Vref             
         pin_A5_direction = input             
         pin_E0_direction = input             
      elsif (adc_hardware_nchan == 6) & ((target_chip == PIC_16F877) | (target_chip == PIC_16F877A)) then -- chan = 0,1,4,5,6,7
         ADCON1 = 0b_0000_1000
         pin_A0_direction = input             
         pin_A1_direction = input             
         pin_A2_direction = input                  -- -Vref
         pin_A3_direction = input                -- +Vref             
         pin_A5_direction = input             
         pin_E0_direction = input             
         pin_E1_direction = input             
         pin_E2_direction = input             
      else
         if adc_hardware_nvref == 2 then
            _error "this number of channels is not available"
         end if
      end if
      
      -- calculate aquisition delay and optimize justify
      _ad_init_general()
   end if
end procedure


-- Initializes the PIC AD-converter,
-- by calling the correct routine according to the number of external references
-- Settings are done according to the special ADC constants
-- Sets all the analog pins to input
-- Calculates aquisition time and determines if right or 
-- left justification is optimal
procedure adc_init() is
   if target_chip == PIC_12F675 then
      if    adc_hardware_nvref == 0 then
         _adcon0_shadow = 1
      else
         _adcon0_shadow = 0x41
      end if
      
      ADCON1 = adc_hardware_nchan
      
      -- calculate aquisition delay and optimize justify
      _ad_init_general()
   else
      if adc_hardware_nvref == 0 then
         _adc_init_no_vref()
      elsif adc_hardware_nvref == 1 then
         _adc_init_1_vref()
      else
         _adc_init_2_vref()
      end if
   end if
end procedure


-- Turns all ADC channels back on
procedure adc_on() is
   -- jallib: this is *not* the original meaning
   -- It just turns adc on, while it previously
   -- adc_init()
   ADCON0_ADON = true
end procedure


