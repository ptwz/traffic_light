-- Title: Debug via print library
-- Author: Matthew Schinkel - borntechi.com, copyright (c) 2009, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4n
-- Revision: $Revision: 1.1 $
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: The debug library has all the same functions as the print library,
--              but the user defines constants to turn on and off this
--              library and users debug levels.
--
-- Sources:
-- The jallib print library
--

include print

-- debug enable/disable bits
var word debug_bits = 0
var bit debug_lvl_0 at debug_bits : 0
var bit debug_lvl_1 at debug_bits : 1
var bit debug_lvl_2 at debug_bits : 2
var bit debug_lvl_3 at debug_bits : 3
var bit debug_lvl_4 at debug_bits : 4
var bit debug_lvl_5 at debug_bits : 5
var bit debug_lvl_6 at debug_bits : 6
var bit debug_lvl_7 at debug_bits : 7
var bit debug_lvl_8 at debug_bits : 8
var bit debug_lvl_9 at debug_bits : 9
var bit debug_lvl_10 at debug_bits : 10
var bit debug_lvl_11 at debug_bits : 11
var bit debug_lvl_12 at debug_bits : 12
var bit debug_lvl_13 at debug_bits : 13
var bit debug_lvl_14 at debug_bits : 14
var bit debug_lvl_15 at debug_bits : 15

-- you can use these instead of numbers as input level.
-- makes it easy for you to change levels in code with your editor's "replace all"
const DEBUG_0 = 0
const DEBUG_1 = 1
const DEBUG_2 = 2
const DEBUG_3 = 3
const DEBUG_4 = 4
const DEBUG_5 = 5
const DEBUG_6 = 6
const DEBUG_7 = 7
const DEBUG_8 = 8
const DEBUG_9 = 9
const DEBUG_10 = 10
const DEBUG_11 = 11
const DEBUG_12 = 12
const DEBUG_13 = 13
const DEBUG_14 = 14
const DEBUG_15 = 15

if !defined (DEBUG_MASTER_ENABLE) then
   const DEBUG_MASTER_ENABLE == FALSE
end if

procedure debug_crlf(word in debug_level) is
   pragma inline
   if DEBUG_MASTER_ENABLE == TRUE  then
      var word check_enabled = (1 << debug_level)
      if (check_enabled & debug_bits) != 0 then
         print_crlf(debug_data)
      end if
   end if
end procedure

procedure debug_string(word in debug_level,byte in str_in[]) is
   ;pragma inline (bug here)
   if DEBUG_MASTER_ENABLE == TRUE  then
      var word check_enabled = (1 << debug_level)
      if (check_enabled & debug_bits) != 0 then
         print_string(debug_data, str_in)
      end if
   end if
end procedure

procedure debug_bit_truefalse(word in debug_level,bit in data) is
   pragma inline
   if DEBUG_MASTER_ENABLE == TRUE  then
      var word check_enabled = (1 << debug_level)
      if (check_enabled & debug_bits) != 0 then
         print_bit_truefalse(debug_data,data)
      end if
   end if
end procedure

procedure debug_bit_highlow(word in debug_level,bit in data) is
   pragma inline
   if DEBUG_MASTER_ENABLE == TRUE  then
      var word check_enabled = (1 << debug_level)
      if (check_enabled & debug_bits) != 0 then
         print_bit_highlow(debug_data,data)
      end if
   end if
end procedure

procedure debug_bit_10(word in debug_level,bit in data) is
   pragma inline
   if DEBUG_MASTER_ENABLE == TRUE  then
      var word check_enabled = (1 << debug_level)
      if (check_enabled & debug_bits) != 0 then
         print_bit_10(debug_data,data)
      end if
   end if
end procedure

procedure debug_dword_binary(word in debug_level,dword in data) is
   pragma inline
   if DEBUG_MASTER_ENABLE == TRUE  then
      var word check_enabled = (1 << debug_level)
      if (check_enabled & debug_bits) != 0 then
         print_dword_binary(debug_data,data)
      end if
   end if
end procedure

procedure debug_word_binary(word in debug_level,word in data) is
   pragma inline
   if DEBUG_MASTER_ENABLE == TRUE  then
      var word check_enabled = (1 << debug_level)
      if (check_enabled & debug_bits) != 0 then
         print_word_binary(debug_data,data)
      end if
   end if
end procedure

procedure debug_byte_binary(word in debug_level,byte in data) is
   pragma inline
   if DEBUG_MASTER_ENABLE == TRUE  then
      var word check_enabled = (1 << debug_level)
      if (check_enabled & debug_bits) != 0 then
         print_byte_binary(debug_data,data)
      end if
   end if
end procedure

procedure debug_nibble_binary(word in debug_level,byte in data) is
   pragma inline
   if DEBUG_MASTER_ENABLE == TRUE  then
      var word check_enabled = (1 << debug_level)
      if (check_enabled & debug_bits) != 0 then
         print_nibble_binary(debug_data,data)
      end if
   end if
end procedure

procedure debug_dword_hex(word in debug_level,dword in data) is
   pragma inline
   if DEBUG_MASTER_ENABLE == TRUE  then
      var word check_enabled = (1 << debug_level)
      if (check_enabled & debug_bits) != 0 then
         print_dword_hex(debug_data,data)
      end if
   end if
end procedure

procedure debug_sdword_hex(word in debug_level,sdword in data) is
   pragma inline
   if DEBUG_MASTER_ENABLE == TRUE  then
      var word check_enabled = (1 << debug_level)
      if (check_enabled & debug_bits) != 0 then
         print_sdword_hex(debug_data,data)
      end if
   end if
end procedure

procedure debug_word_hex(word in debug_level,word in data) is
   pragma inline
   if DEBUG_MASTER_ENABLE == TRUE  then
      var word check_enabled = (1 << debug_level)
      if (check_enabled & debug_bits) != 0 then
         print_word_hex(debug_data,data)
      end if
   end if
end procedure

procedure debug_byte_hex(word in debug_level,byte in data) is
   pragma inline
   if DEBUG_MASTER_ENABLE == TRUE  then
      var word check_enabled = (1 << debug_level)
      if (check_enabled & debug_bits) != 0 then
         print_byte_hex(debug_data,data)
      end if
   end if
end procedure

procedure debug_sdword_dec(word in debug_level,sdword in data) is
   pragma inline
   if DEBUG_MASTER_ENABLE == TRUE  then
      var word check_enabled = (1 << debug_level)
      if (check_enabled & debug_bits) != 0 then
         print_sdword_dec(debug_data,data)
      end if
   end if
end procedure

procedure debug_sword_dec(word in debug_level,sword in data) is
   pragma inline
   if DEBUG_MASTER_ENABLE == TRUE  then
      var word check_enabled = (1 << debug_level)
      if (check_enabled & debug_bits) != 0 then
         print_sword_dec(debug_data,data)
      end if
   end if
end procedure

procedure debug_sbyte_dec(word in debug_level,sbyte in data) is
   pragma inline
   if DEBUG_MASTER_ENABLE == TRUE  then
      var word check_enabled = (1 << debug_level)
      if (check_enabled & debug_bits) != 0 then
         print_sbyte_dec(debug_data,data)
      end if
   end if
end procedure

procedure debug_dword_dec(word in debug_level,dword in data) is
   pragma inline
   if DEBUG_MASTER_ENABLE == TRUE  then
      var word check_enabled = (1 << debug_level)
      if (check_enabled & debug_bits) != 0 then
         print_dword_dec(debug_data,data)
      end if
   end if
end procedure

procedure debug_word_dec(word in debug_level,word in data) is
   pragma inline
   if DEBUG_MASTER_ENABLE == TRUE  then
      var word check_enabled = (1 << debug_level)
      if (check_enabled & debug_bits) != 0 then
         print_word_dec(debug_data,data)
      end if
   end if
end procedure

procedure debug_byte_dec(word in debug_level,byte in data) is
   pragma inline
   if DEBUG_MASTER_ENABLE == TRUE  then
      var word check_enabled = (1 << debug_level)
      if (check_enabled & debug_bits) != 0 then
         print_byte_dec(debug_data,data)
      end if
   end if
end procedure

procedure debug_char(word in debug_level,byte in character) is
   pragma inline
   if DEBUG_MASTER_ENABLE == TRUE  then
      var word check_enabled = (1 << debug_level)
      if (check_enabled & debug_bits) != 0 then
         debug_data = character
      end if
   end if
end procedure

