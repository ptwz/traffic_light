-- Title: temp_TC77
-- Author: Eur van Andel, eur@fiwihex.nl Copyright (c) 2010
-- Compiler: =2.4h
-- Revision: $Revision: 1.1 $
-- 
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: this library reads the TC77 temperature sensor from Microchip.
-- The TC77 has a 12-bit plus sign temperature resolution of 0.0625°C 
-- per Least Significant Bit (LSb). It works via the SPI protocol
-- Specs:
-- 1C (max.) accuracy from +25°C to +65C, 
-- 2C (max.) accuracy from -40°C to +85C 
-- 3C (max.) accuracy from -55°C to +125C 
-- 2.7V to 5.5V Operating Range, Low Power: 250uA (typ.) Continuous Conversion
-- Mode, 0.1uA (typ.) Shutdown Mode 
-- ----------   
-- I have several years of experience with hundreds of these sensors.
-- They work very well: fast, good accuracy, good repeatability. 
-- If they have an offset, it can easily be calibrated in software. 
-- The hard part of using this sensor is gettting it watertigtht. 
-- It is SMD, so it needs a PCB, and a cable. Dipping in resin or shrinking in
-- glue-covered shrinktube works. 
-- The SPI protocol is bit-banged here and can be used with any pins.
-- Clock data in on rising edge of clock, program must pull CS low. This allows
-- for multiple TC77s on the same 2-wire databus. Put a 100nF decoupling 
-- capacitor close the the TC77. If you don't, you WILL get weird data. 
-- Writing the status_word is not supported here.
--
-- Notes: This library expects two pins defined as SIO and SCK:
-- var bit SCK is pin_xx = high  -- TC77 common clock
-- pin_xx_direction = output
-- var bit SIO is pin_yy         -- TC77 common data
-- pin_yy_direction = input      
-- include temperature_tc77      -- this library 
-- A third pin is needed for /CS:
-- var bit cs is pin_zz = high  -- chipselect TC77 sensor
-- pin_zz_direction = output
-- Usage is:
--   CS = low
--   tc77_read_celsius_sword(T1)
--   CS = high
-- Multiple TC77s can share the same bus, but each needs its own /CS pin. 
-- 

include delay

-- get raw temperature of TC77
-- output in word, right justified
procedure tc77_read_raw(word out raw) is
   raw = 0
   var bit a at raw : 0 = low

   for 13 loop 
      raw = raw << 1
      SCK  = low         -- clock low
      delay_1us()
      a = SIO
      SCK  = high        -- clock high
      delay_1us()
   end loop

end procedure


-- read celsius temperature of TC77
-- output in one sbyte with zero digits, so T = +/- xxx C
-- last bit is 1C, range is -40C ... +125C
-- no rounding, celsius fraction is chopped
procedure tc77_read_celsius_sbyte(sbyte out temperature) is
   var sword raw = 0
   var bit a         at raw : 0 = low
   var bit raw_sign  at raw: 12     -- zero if above 0C, 1 if below 0C
   var sword tmp

   for 13 loop             -- 13 shifts, 12 bits
      raw = raw << 1
      SCK  = low           -- clock low
      delay_1us()
      a = SIO
      SCK  = high          -- clock high
      delay_1us()
   end loop

   if raw_sign then                 -- below zero C
      asm bcf raw_sign              -- clear bit 13
      tmp = 0b111_0000_0000_0000 + raw -- both above zero for compiler
      temperature = sbyte(tmp >> 4) -- now celsius, divided by 16
   else
      temperature = sbyte(raw >> 4) -- TC77 is limited to +125C    
   end if
end procedure


-- read celsius temperature of TC77
-- output in one sword with 2 digits, so T = xxx.xx C
-- last bit is 0.01C , range is -40C ... +125C
-- best procedure if you want to display C in 0.1 accurate
-- take care of rounding during printing
procedure tc77_read_celsius_sword(sword out temperature) is
   var sword raw = 0
   var bit a at raw : 0 = low
   var bit raw_sign  at raw: 12  -- zero if above 0C, 1 if below 0C
   var sdword tmp

   for 13 loop             -- 13 shifts, 12 bits
      raw = raw << 1
      SCK  = low         -- clock low
      delay_1us()
      a = SIO
      SCK  = high        -- clock high
      delay_1us()
   end loop

   if raw_sign then                    -- below zero C
      asm bcf raw_sign                 -- clear bit 13
      tmp = 0xFF_FF_F0_00              -- all ones, execpt for last 12
      tmp = tmp + raw                  -- 16ths degC below zero, can't overflow
      tmp = tmp * 625                  -- celsius * 10.000
      temperature = sword(tmp / 100)   -- celsius*100
--      temp_sign = true
   else
      tmp = raw                        -- 16ths degrees C
      tmp = tmp * 625                  -- celsius * 10.000
      temperature = sword(tmp / 100)   -- celsius*100
--      temp_sign = false
   end if
end procedure


-- read celsius temperature of TC77
-- output in one sdword with 4 digits, so T = xxx.xxxx C
-- last bit is 0.0001C , range is -40C ... +125C
procedure tc77_read_celsius_sdword(sdword out temperature) is
   var sword raw = 0
   var bit a at raw : 0 = low
   var bit raw_sign  at raw: 12  -- zero if above 0C, 1 if below 0C

   for 13 loop             -- 13 shifts, 12 bits
      raw = raw << 1
      SCK  = low         -- clock low
      delay_1us()
      a = SIO
      SCK  = high        -- clock high
      delay_1us()
   end loop

   if raw_sign then                    -- below zero C
      asm bcf raw_sign                 -- clear bit 13
      temperature = 0xFF_FF_F0_00      -- all ones, execpt for last 12
      temperature = temperature + raw  -- 16ths degC below zero, can't overflow
      temperature = temperature * 625  -- celsius * 10.000
   else
      temperature = raw                -- 16th degrees C
      temperature = temperature * 625  -- celsius * 10.000
   end if
end procedure
