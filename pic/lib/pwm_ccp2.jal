-- -------------------------------------------------------------------------------------
-- Title: hardware PWM control, dedicated to module CCP2
-- Author: Stef Mientki, Copyright (C) 2002-2006, all rights reserved.
-- Adapted-by: Sebastien Lelong, Rob Hamerling.
-- Compiler: 2.4l
-- Revision: $Revision: 1.1 $
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description:
-- Performs PWM operations on the CCP2 module.
-- This file is automatically included by pwm_hardware.jal
-- when the target PIC has a CCP2 module.
--
-- Notes: 1. This is a heavy refactoring of the original pwm_hardware.jal
--           (Stef's lib)
--        2. Partly rewritten for JalV2 version 2.4l and Jallib revision 1171.
--           Reduced memory occupation. Added procedure for lowres PWM.
--
-- -------------------------------------------------------------------------------------

var byte  _ccpr2l_shadow  = 0                            -- 8 MSbits of duty cycle
var byte  _ccp2con_shadow = 0b0000_0000                  -- shadow
var bit*2 _ccp2con_shadow_dc2b  at _ccp2con_shadow : 4    -- 2 LSbits of duty cycle
var bit*4 _ccp2con_shadow_ccp2m at _ccp2con_shadow : 0    -- mode pattern


-- PWM mode on
-- Restore duty cycle from shadow registers
-- Note: pin_CCP2_direction should be set to output!
procedure pwm2_on() is

   _ccp2con_shadow_ccp2m = 0b1100                    -- set PWM mode
   CCPR2L                = _ccpr2l_shadow            -- restore duty cycle
   CCP2CON               = _ccp2con_shadow           -- activate CCP module

end procedure


-- PWM mode off
-- retain duty cycle setting in shadow registers
procedure pwm2_off() is

   _ccp2con_shadow_ccp2m = 0b0000                    -- set CCP/PWM off
   CCP2CON               = _ccp2con_shadow

end procedure


-- Set dutycycle with 10-bits resolution, allowing 1024 PWM steps.
-- The 'duty' argument is a (max) 10-bits absolute value for the duty cycle:
--  * duty<1:0> are the 2 LSbits
--  * duty<9:2> are the 8 MSbits
-- Allowed range: 0..1023
-- Note: pin_CCP2_direction should be set to output!
procedure pwm2_set_dutycycle_highres(word in duty) is

   if (duty > 1023) then                            -- upper limit
      duty = 1023
   end if
   _ccpr2l_shadow = byte(duty >> 2)
   _ccp2con_shadow_dc2b = byte(duty) & 0b11

   pwm2_on()                                        -- activate PWM

end procedure


-- Set dutycycle with 8-bits resolution allowing 255 PWM steps.
-- The 'duty' argument is the 8-bits absolute value for the duty cycle:
--  * duty<1:0> are the 2 LSbits
--  * duty<7:2> are the 6 MSbits
-- Allowed range: 0..255
-- Beware that steps 256..1023 are not available. In other words
-- the available PWM range is 25% of the highres procedure.
-- This procedure is particularly suitable with higher frequencies
-- whereby the PWM resolution is limited to 256 steps or less!
procedure pwm2_set_dutycycle_lowres(byte in duty) is

   _ccpr2l_shadow = duty >> 2
   _ccp2con_shadow_dc2b = duty & 0b11

   pwm2_on()                                        -- activate PWM

end procedure


-- Set dutycycle for 10-bits resolution but allowing only 255 PWM steps.
-- This procedure is equivalent to pwm2_set_dutycycle_highres(), but
-- the low order 2 bits of the 10-bits duty cycle are set to 0.
-- This means that only every 4th of the available 1023 steps can be selected
-- and consequently max 255 PWM steps are available.
-- This procedure is for user convenience, allowing to specify an 8 bits
-- value for the duty cycle is for many applications satisfactory.
-- Calling this procedure will also activate PWM.
-- Note: pin_CCP2_direction should be set to output!
procedure pwm2_set_dutycycle(byte in duty) is

   pwm2_set_dutycycle_highres(word(duty) << 2)

end procedure


-- Set a percentage duty cycle, allowing max 100 PWM steps.
-- Allowed range: 0..100
-- The duty cycle will be set to the specified percentage of the maximum
-- for the current PWM frequency.
-- Note: The number of available PWM steps can be lower than 100 with
-- (very) high PWM frequencies.
-- Note: pin_CCP2_direction should be set to output!
procedure pwm2_set_percent_dutycycle(byte in percent) is

   var word duty
   if (percent == 0) then
     duty = 0
   elsif (percent >= 100) then
     duty = _pr2_shadow_plus1 - 1
   else
     duty = word(percent) * (_pr2_shadow_plus1 / 4) / 25      -- (factor PR2/100)
   end if
   pwm2_set_dutycycle_highres(duty << 2)

end procedure
