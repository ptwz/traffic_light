-- Title: glcd_common - generic routines for graphic lcd
-- Author: Stef Mientki, Serkan Ayyýldýz Copyright (c) 2006..2009, all rights reserved.
-- Adapted-by: Joep Suijs, Matthew Schinkel, Rob Hamerling
-- Compiler: 2.40
-- Revision: $Revision: 1.1 $
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Sources:
--
-- Description: Generic routines for graphic lcds
-- glcd_line
-- glcd_box
-- glcd_box_fill
-- glcd_ellipse
-- glcd_circle
-- glcd_draw_image
-- .
-- Defines a common API, a common interface, where several parameters and
-- procedures remain device specific and should be implemented in device library.
-- Once interface is implemented, many features come for "free".
-- This common API is defined in glcd_common.jal and glcd_font.jal
-- .
-- In order to honor this common interface, and benefit its features,
-- the following must be implemented in the device specific library.
--   * GLCD_X_PIXELS: (const) specifies display's width in pixels
--   * GLCD_Y_PIXELS: (const) specifies display's height in pixels
--   * GLCD_COLOR_BITS: (const) specifies the number of bits required
--     for colors (1 for black & white), (16 for 16 bit color)
--   * glcd_pen_color: (var|const) specifies color of the pen
--   * glcd_background_color: (var|const) specifies the background color
--   * glcd_write_char(x,y,char): (proc) draw "char" at position (x,y). If no
--     glcd_write_char is defined in the device specific library, pixel by
--     pixel method will be used by default for glcd_font.jal.
--   * glcd_write_pixel(x,y): (proc) assuming pen and background color
--     previously set, draw a pixel at position (x,y) using defined colors.
--     This is the main procedure used by pixel-related features, like drawing
--     a line, circle, etc... In some cases, where glcd_write_char() can't be
--     used glcd_write_pixel() can also be used to draw chars. If not
--     implemented pixel-related features won't be available.
-- .
-- The device library or user program may also specify:
--   * GLCD_CLIPPING: (const) specifies if clipping is desired.
--                    TRUE means that pixels of an ellipse beyond display
--                    boundaries will not be sent to the display
--                    (thus not shown on the wrong places).
--                    When not declared, or set FALSE, no clipping is
--                    performed and pixels may be written at unexpected
--                    places.
--
-- Notes:
--   Changes by Rob Hamerling (Nov/Dec 2011):
--   - fixed typo in comments above (GLCD_Y_SIZE -> GLCD_Y_PIXELS)
--   - corrected irrelevant comments (artifacts of older versions)
--   - changed sword to sbyte*3 of local variables in glcd_ellipse procedure
--     to prevent overflow of intermediate results.
--   - added [optional] clipping of pixels (of ellipse) when attempting
--     to draw beyond display boundaries
--   - fixed glcd_box_fill() for situation y1 < y0
--   - minor code optimizations (incl some add/remove pragma inline)
--   - comments: extended, corrected, aligned
--

-- --------------------------------------------------------------
-- Defining default constants when not defined by user
-- and defining constants derived from these.
-- Note: For documentation generation the constants must be
--       declared without indention and the description must
--       appear immediately ahead of it.
-- --------------------------------------------------------------
-- set width of pixel x,y variables
if !defined(GLCD_X_PIXELS) then
-- Width of the variables for x-coordinates
const GLCD_X_SIZE = 1                              -- # bytes for x-coordinate variables
else
   if GLCD_X_PIXELS < 256 then
      const GLCD_X_SIZE = 1
   else
      const GLCD_X_SIZE = 2
   end if
end if

if !defined(GLCD_Y_PIXELS) then
-- Width of the variables for y-coordinates (byte for max 256 pixels vertically)
const GLCD_Y_SIZE = 1                              -- # bytes for y-coordinate variables
else
   if GLCD_Y_PIXELS < 256 then
      const GLCD_Y_SIZE = 1
   else
      const GLCD_Y_SIZE = 2
   end if
end if

if !defined(GLCD_USE_BLOCK_WRITE) then
-- Block writing capability of the glcd device specific library
const GLCD_USE_BLOCK_WRITE = FALSE                 -- flag for block writing
end if

-- set width of color variables
if !defined(GLCD_COLOR_BITS) then
-- Number of colors of the specific glcd device
const GLCD_COLOR_SIZE = 1                          -- # bytes for color variables
else
   if GLCD_COLOR_BITS == 1 then                    -- 1 bit (monochrome)
      const GLCD_COLOR_SIZE = 1
   elsif GLCD_COLOR_BITS == 16 then                -- 16 bit
      const GLCD_COLOR_SIZE = 2
   else
      pragma error "GLCD_COLOR_BITS VALUE NOT SUPPORTED"
   end if
end if

-- define foreground and background colors, if not defined already
if !defined(GLCD_BACKGROUND_COLOR) then
-- Background color setting
const byte GLCD_BACKGROUND_COLOR = 0               -- background color
end if

if !defined(GLCD_PEN_COLOR) then
-- Foreground (pen) color setting
const GLCD_PEN_COLOR = 1                           -- pen color
end if

if !defined(GLCD_CLIPPING) then
-- Clipping requested (TRUE) or not (FALSE)
const GLCD_CLIPPING = FALSE                        -- clipping flag
end if


-- ----------------------------------------------------------------------------
-- Global variables for text processing
-- ----------------------------------------------------------------------------
var byte*GLCD_X_SIZE glcd_char_x_pos = 0;
var byte*GLCD_Y_SIZE glcd_char_y_pos = 0;


include glcd_font                                  -- common font library

-- -----------------------------------------------------------------------------
-- Purpose:   Draw one character pixel by pixel - slowest method.
-- Arguments: - x- and y-coordinates of character (upper left corner, in pixels)
--            - character to be displayed
-- Notes:     Requires this procedure to be defined within your glcd library
--              glcd_write_pixel() - draw one pixel to glcd
-- -----------------------------------------------------------------------------
procedure glcd_write_char_pbp(byte*GLCD_X_SIZE in x, byte*GLCD_Y_SIZE in y, byte in value) is

   var byte*GLCD_COLOR_SIZE color = glcd_pen_color -- save current pen color

   if _glcd_font_current_bit_direction == FONT_TOP_LEFT_HORIZONTAL then
      -- generic font printing (bit by bit)
      -- this will work for any glcd that has a lcd_write_pixel procedure
      -- currently only tested for with width of 8 or less, any height
      var word i,j,k
      var word step = 0

      for _glcd_font_current_height using k loop
         -- get each byte from character
         var byte char_byte = glcd_font_lookup((word(value-32) * _glcd_font_current_byte_per_char) + k)
         var byte bit_y_address = 128 -- y bit mask

         -- get each bit from each character byte and print it to glcd
         for _glcd_font_current_width using j loop
            if( ( char_byte & bit_y_address) > 0 ) then
               glcd_pen_color = color
            else
               glcd_pen_color = glcd_background_color
            end if
            glcd_write_pixel(byte*GLCD_X_SIZE(x+j),byte*GLCD_Y_SIZE(y+k))
            bit_y_address = bit_y_address >> 1
         end loop
      end loop

   elsif _glcd_font_current_bit_direction == FONT_BOTTOM_LEFT_VERTICAL then
      -- generic font printing (bit by bit)
      -- this will work for any glcd that has a glcd_write_pixel procedure
      -- currently only works for with width of 8 or less, any height
      -- currently only tested for fonts 8x8 or smaller.
      var word i,j,k
      var word step = 0

      for _glcd_font_current_width using k loop
         -- get each byte from character
         var byte char_byte = glcd_font_lookup( (word(value - 32) * _glcd_font_current_byte_per_char) + k )

         -- get each bit from each character byte and print it to glcd
         var byte bit_y_address = 1 -- y bit mask
         for _glcd_font_current_height using j loop
            if( ( char_byte & bit_y_address) > 0 ) then
               glcd_pen_color = color
            else
               glcd_pen_color = glcd_background_color
            end if
            glcd_write_pixel(byte*GLCD_X_SIZE(x+k),byte*GLCD_Y_SIZE(y+j))
            bit_y_address = bit_y_address << 1
         end loop
      end loop
   else
      -- not supported yet!
   end if

   glcd_pen_color = color                          -- restore pen color

end procedure


if GLCD_USE_BLOCK_WRITE == TRUE then               -- only when supported by glcd device library

-- -----------------------------------------------------------------------------
-- Purpose:   Draw one character with block write - efficient font printing.
-- Arguments: - x- and y-coordinates of the character (upper left corner, in pixels)
--            - character to display
-- Notes:     Only FONT_TOP_LEFT_HORIZONTAL is supported so far.
--            Here's a list of procedures reqired in your glcd device library:
--               glcd_block_address() - set start x,y and end x,y address
--               glcd_block_write_color() - write data to each pixel in order
--            Also must define this constant in your glcd device library and
--            set your most efficient font type.
--               const GLCD_BLOCK_WRITE_TYPE = FONT_TOP_LEFT_HORIZONTAL
-- -----------------------------------------------------------------------------
procedure glcd_write_char_block(byte*GLCD_X_SIZE in x, byte*GLCD_Y_SIZE in y, byte in value) is

   if GLCD_BLOCK_WRITE_TYPE == FONT_TOP_LEFT_HORIZONTAL then
      -- this is the most efficient bit direction for this GLCD
      -- currently only works for fonts with width of 8 or less, any height
      var word i,j
      var word step = 0

      glcd_block_set_address(x,y,x+(_glcd_font_current_width-1),y+(_glcd_font_current_height - 1))

      step = step + word(value-32)*_glcd_font_current_height;

      for _glcd_font_current_height using j loop
         for _glcd_font_current_width using i loop
            if( ( glcd_font_lookup(step) & (1<<((_glcd_font_current_width-1)-i)) ) != 0 ) then
               glcd_block_write_color(glcd_pen_color)
            else
               glcd_block_write_color(glcd_background_color)
            end if
         end loop
         step = step + 1
      end loop
   else
      _error "GLCD_BLOCK_WRITE_TYPE NOT SUPPORTED"
   end if
end procedure

end if                  -- (when block writing supported)


-- -----------------------------------------------------------------------------
-- Pseudo variable 'glcd' for writing characters.
-- -----------------------------------------------------------------------------
procedure glcd'put(byte in char) is
   if defined(FONT_AUTO_WRAP) then
      if FONT_AUTO_WRAP == TRUE then
         if glcd_char_x_pos > (GLCD_X_PIXELS - _glcd_font_current_width) then
            glcd_char_y_pos = glcd_char_y_pos + _glcd_font_current_height
            glcd_char_x_pos = 0
         end if
      end if
   end if

   -- custom font procedure defined in glcd device library
   if defined(glcd_write_char) then
      glcd_write_char(glcd_char_x_pos, glcd_char_y_pos, char)
   else
      -- a common efficient way to draw fonts.
      -- here's a list of procedures reqired in your glcd device library.
      --    glcd_block_address - set start x,y and end x,y address
      --    glcd_block_write_color - write data to each pixel in order
      if GLCD_USE_BLOCK_WRITE == TRUE then
         glcd_write_char_block(glcd_char_x_pos, glcd_char_y_pos, char)

      -- a common, but slow way to draw fonts.
      -- here's a list of procedures reqired in your glcd device library.
      --    glcd_write_pixel - draw one pixel to glcd
      else
         glcd_write_char_pbp(glcd_char_x_pos, glcd_char_y_pos, char)
      end if
   end if
   -- move the cursor
   glcd_char_x_pos = glcd_char_x_pos + _glcd_font_current_width
end procedure


if !defined(glcd_clear_screen) then                -- when not in glcd device library

-- -----------------------------------------------------------------------------
-- Purpose:   Clear screen and character position to the upper left corner (0,0)
-- Arguments: none
-- Notes:     When block writes are not supported by your glcd, it is highly
--            recommended that you define a custom glcd_clear_screen()
--            procedure within your glcd's library otherwise this procedure will
--            clear the screen pixel by pixel which is very slow.
-- .
--            Here's a list of procedures required in your glcd device library:
--               glcd_block_address()      set start x,y and end x,y address
--               glcd_block_write_color()  write data to each pixel in order
--            Also must define this constant in your glcd device library and
--            set your most efficient font type.
--               const GLCD_BLOCK_WRITE_TYPE = FONT_TOP_LEFT_HORIZONTAL
-- -----------------------------------------------------------------------------
procedure glcd_clear_screen() is
   -- fill using glcd's block write procedures
   if GLCD_USE_BLOCK_WRITE == TRUE then
      if GLCD_BLOCK_WRITE_TYPE == FONT_TOP_LEFT_HORIZONTAL then
         glcd_block_set_address(0, 0, GLCD_X_PIXELS - 1, GLCD_Y_PIXELS - 1)
         for GLCD_Y_PIXELS loop
            for GLCD_X_PIXELS loop
                glcd_block_write_color(glcd_background_color)
            end loop
         end loop
      else
         _error "GLCD_BLOCK_WRITE_TYPE NOT SUPPORTED"
      end if
   else
      var byte*GLCD_COLOR_SIZE color = glcd_pen_color
      var byte*GLCD_X_SIZE x
      var byte*GLCD_Y_SIZE y
      for GLCD_Y_PIXELS using y loop
         for GLCD_X_PIXELS using x loop
             glcd_pen_color = glcd_background_color
             glcd_write_pixel(x,y)
         end loop
      end loop
      glcd_pen_color = color
   end if

   glcd_char_x_pos = 0;
   glcd_char_y_pos = 0;
end procedure

end if            -- (glcd_clear_screen not in glcd device library)


-- -----------------------------------------------------------------------------
-- Purpose:   Set location of next character to write
-- Arguments: x- and y-coordinates in pixels of next character to read or write
-- -----------------------------------------------------------------------------
procedure glcd_char_goto(byte in x, byte in y) is
   pragma inline
   glcd_char_x_pos = x
   glcd_char_y_pos = y
end procedure


-- -----------------------------------------------------------------------------
-- Purpose:   Write 4 pixels of ellipse
-- Arguments: - co-ordinates of centre of the ellipse (cx,cy in pixels)
--            - x- and y-offsets (dx,dy in pixels) of one pixel relative
--              to center of the ellipse/
--              Coordinates of the other 3 pixels are derived from these.
-- Notes:     - When clipping requested a pixel is written only when
--              its coordinates are within physical glcd boundaries.
--              Otherwise pixels are written unconditionally.
-- -----------------------------------------------------------------------------
procedure _glcd_write_4_ellipse_pixels( byte*GLCD_X_SIZE       in cx,
                                       sbyte*(GLCD_X_SIZE + 1) in dx,
                                        byte*GLCD_Y_SIZE       in cy,
                                       sbyte*(GLCD_Y_SIZE + 1) in dy) is
   var sbyte*(GLCD_X_SIZE + 1) cx14 = cx + dx,     -- x-coord quadrant 1 and 4
                               cx23 = cx - dx      --    "       "     2 and 3
   var sbyte*(GLCD_Y_SIZE + 1) cy12 = cy + dy,     -- y-coord    "     1 and 2
                               cy34 = cy - dy      --    "       "     3 and 4
   if GLCD_CLIPPING == TRUE then
      if cx14 >= 0 & cx14 < GLCD_X_PIXELS then
         if cy12 >= 0 & cy12 < GLCD_Y_PIXELS  then
            glcd_write_pixel(byte*GLCD_X_SIZE(cx14), byte*GLCD_Y_SIZE(cy12))
         end if
         if cy34 >= 0 & cy34 < GLCD_Y_PIXELS  then
            glcd_write_pixel(byte*GLCD_X_SIZE(cx14), byte*GLCD_Y_SIZE(cy34))
         end if
      end if
      if cx23 >= 0 & cx23 < GLCD_X_PIXELS  then
         if cy12 >= 0 & cy12 < GLCD_Y_PIXELS  then
            glcd_write_pixel(byte*GLCD_X_SIZE(cx23), byte*GLCD_Y_SIZE(cy12))
         end if
         if cy34 >= 0 & cy34 < GLCD_Y_PIXELS  then
            glcd_write_pixel(byte*GLCD_X_SIZE(cx23), byte*GLCD_Y_SIZE(cy34))
         end if
      end if
   else
      glcd_write_pixel(byte*GLCD_X_SIZE(cx14), byte*GLCD_Y_SIZE(cy12))
      glcd_write_pixel(byte*GLCD_X_SIZE(cx14), byte*GLCD_Y_SIZE(cy34))
      glcd_write_pixel(byte*GLCD_X_SIZE(cx23), byte*GLCD_Y_SIZE(cy12))
      glcd_write_pixel(byte*GLCD_X_SIZE(cx23), byte*GLCD_Y_SIZE(cy34))
   end if
end procedure


-- -----------------------------------------------------------------------------
-- Purpose:      Draw an ellipse (Bresenham plot)
-- Arguments:    cx, cy ->  center of the ellipse in pixels
--               xradius, yradius -> x & y radii of the ellipse in pixels
-- Notes:        Using actual pixel color <glcd_pen_color>
--               Would be nice to draw filled ellipses too :-)
-- Author        Paul D'haene
-- -----------------------------------------------------------------------------
procedure glcd_ellipse(byte*GLCD_X_SIZE in cx,      byte*GLCD_Y_SIZE in cy,
                       byte*GLCD_X_SIZE in xradius, byte*GLCD_Y_SIZE in yradius) is

   var sbyte*3 xr = sbyte*3(xradius)
   var sbyte*3 yr = sbyte*3(yradius)
   var sbyte*3 x = xr
   var sbyte*3 y = 0
   var sbyte*3 two_a_square = 2 * xr * xr
   var sbyte*3 two_b_square = 2 * yr * yr
   var sbyte*3 x_change = yr * yr * (1 - 2 * xr)
   var sbyte*3 y_change = xr * xr
   var sbyte*3 ellipse_error = 0
   var sbyte*3 stopping_x = two_b_square * xr
   var sbyte*3 stopping_y = 0

   while stopping_x >= stopping_y loop             -- 1st set of points, Y' > -1
      _glcd_write_4_ellipse_pixels(cx, sbyte*(GLCD_X_SIZE+1)(x),
                                   cy, sbyte*(GLCD_Y_SIZE+1)(y))
      y = y + 1
      stopping_y = stopping_y + two_a_square
      ellipse_error = ellipse_error + y_change
      y_change = y_change + two_a_square
      if (ellipse_error + ellipse_error + x_change) > 0 then
         x = x - 1
         stopping_x = stopping_x - two_b_square
         ellipse_error = ellipse_error + x_change
         x_change = x_change + two_b_square
      end if
   end loop

   x = 0
   y = yr
   x_change = yr * yr
   y_change = xr * xr * (1 - 2 * yr)
   ellipse_error = 0
   stopping_x = 0
   stopping_y = two_a_square * yr

   while stopping_x <= stopping_y loop             -- 2nd set of points, Y' < -1
      _glcd_write_4_ellipse_pixels(cx, sbyte*(GLCD_X_SIZE+1)(x),
                                   cy, sbyte*(GLCD_Y_SIZE+1)(y))
      x = x + 1
      stopping_x = stopping_x + two_b_square
      ellipse_error = ellipse_error + x_change
      x_change = x_change + two_b_square

      if (ellipse_error + ellipse_error + y_change) > 0 then
         y = y - 1
         stopping_y = stopping_y - two_a_square
         ellipse_error = ellipse_error + y_change
         y_change = y_change + two_a_square
      end if
   end loop

end procedure


-- -----------------------------------------------------------------------------
-- Purpose:    Draw a circle
-- arguments:  - x- and -y-coordinates of the center of the circle
--             - radius radius of the circle
-- Notes:      Using current pixel color <glcd_pen_color>
--             The circle code may not give a round circle on the glcd.
-- Author:     Paul D'haene
-- -----------------------------------------------------------------------------
procedure glcd_circle(byte*GLCD_X_SIZE in cx, byte*GLCD_Y_SIZE in cy, byte in radius) is
   pragma  inline
   glcd_ellipse(cx, cy, radius, radius)            -- approx scaled y radius
end procedure


-- -----------------------------------------------------------------------------
-- Purpose:    Draw a line
-- arguments:  - x- and y-coordinates in pixels of start of line
--             - x- and y-coordinates in pixels of end of line
-- Notes       : using current pixel color <glcd_pen_color>
-- Author      : Paul D'haene
-- -----------------------------------------------------------------------------
procedure  glcd_line(byte*GLCD_X_SIZE in x0, byte*GLCD_Y_SIZE in y0,
                     byte*GLCD_X_SIZE in x1, byte*GLCD_Y_SIZE in y1) is

   var sword dx = sword(x1) - sword(x0)
   var sword dy = sword(y1) - sword(y0)
   var sword two_ds = dx + dx
   var sword two_dy = dy + dy
   var sword currentx = sword(x0), currenty = sword(y0)
   var sword xinc = 1, yinc = 1
   var sword two_ds_accumulated_error, two_dy_accumulated_error

   if dx < 0 then
      xinc = -1
      dx = -dx
      two_ds = -two_ds
   end if
   if dy < 0 then
      yinc = -1
      dy = -dy
      two_dy = -two_dy
   end if
   glcd_write_pixel(x0,y0)                         -- first point is special case

   if (dx != 0) | (dy != 0) then                   -- are there other points on the line?
      if dy <= dx then                             -- is the slope <= 1 ?
         two_ds_accumulated_error = 0              -- initialize error
         while currentx != x1 loop
            currentx = currentx + xinc             -- consider x's from x0 to x1
            two_ds_accumulated_error = two_ds_accumulated_error + two_dy
            if two_ds_accumulated_error > dx then
               currenty = currenty + yinc
               two_ds_accumulated_error = two_ds_accumulated_error - two_ds
            end if
            glcd_write_pixel(byte(currentx), byte(currenty))
         end loop
      else                                         -- slope is large: reverse roles of X & Y
         two_dy_accumulated_error = 0              -- initialize error
         while currenty != y1 loop
            currenty = currenty + yinc             -- consider y's from y0 to y1
            two_dy_accumulated_error = two_dy_accumulated_error + two_ds
            if two_dy_accumulated_error > dy then
               currentx = currentx + xinc
               two_dy_accumulated_error = two_dy_accumulated_error - two_dy
            end if
            glcd_write_pixel(byte(currentx), byte(currenty))
         end loop
      end if
   end if
end procedure


-- -----------------------------------------------------------------------------
-- Purpose:    Draw a rectangular box
-- Arguments:  - x- and y-coordinates in pixels of upper left corner of the box
--             - x- and y-coordinates in pixels of lower right corner of the box
-- Notes:      Using current pixel color <glcd_pen_color>
-- Author:     Paul D'haene
-- -----------------------------------------------------------------------------
procedure glcd_box(byte*GLCD_X_SIZE in x0, byte*GLCD_Y_SIZE in y0,
                   byte*GLCD_X_SIZE in x1, byte*GLCD_Y_SIZE in y1) is
   glcd_line(x0,y0, x1,y0)
   glcd_line(x1,y0, x1,y1)
   glcd_line(x1,y1, x0,y1)
   glcd_line(x0,y1, x0,y0)
end procedure


-- -----------------------------------------------------------------------------
-- Purpose:    Draw a filled rectangular box
-- Arguments:  - x- and y-coordinates in pixels of upper left corner of the box
--             - x- and y-coordinates in pixels of lower right corner of the box
-- Notes:      Using current pixel color <glcd_pen_color>
-- Author:     Paul D'haene
-- -----------------------------------------------------------------------------
procedure glcd_box_fill(byte*GLCD_X_SIZE in x0, byte*GLCD_Y_SIZE in y0,
                        byte*GLCD_X_SIZE in x1, byte*GLCD_Y_SIZE in y1) is

   if (y1 < y0) then                               -- y-coord. must be ascending
      var byte*GLCD_Y_SIZE t = y1                  -- )
      y1 = y0                                      -- ) interchange y-coord.
      y0 = t                                       -- )
   end if
   while (y0 <= y1) loop                           -- all pixel lines y0..y1
      glcd_line(x0,y0, x1,y0 )                     -- draw line of pixels
      y0 = y0 + 1
   end loop

   -- todo: add block write capability.

end procedure


if !defined(glcd_draw_image) then                  -- when not defined in glcd device library

-- -----------------------------------------------------------------------------
-- Purpose:   Draw an image from a byte array.
-- Arguments: - image (byte array)
--            - x- and y-coordinates in pixels of upper left corner of the image
--            - width and height in pixels of the image
-- Notes:     Same requirements as lcd_clear_screen(),
--            You can currently only draw an image that contains
--            the same number of colors as your glcd supports.
-- -----------------------------------------------------------------------------
procedure glcd_draw_image(byte in image[],
                          byte*GLCD_X_SIZE in x, byte*GLCD_Y_SIZE in y,
                          byte*GLCD_X_SIZE in width, byte*GLCD_Y_SIZE in height) is

   -- fill using glcd's block write procedures
   if GLCD_USE_BLOCK_WRITE == TRUE then
      if GLCD_BLOCK_WRITE_TYPE == FONT_TOP_LEFT_HORIZONTAL then
         if GLCD_COLOR_BITS == 16 then
            glcd_block_set_address(x,y,x + width - 1,y + height - 1)

            var word i
            for (count(image)/2) using i loop

               var word location1 = i*2+1
               var word location2 = i*2

               var word color
               var byte _color[2] at color
               _color[1] = image[location1]
               _color[0] = image[location2]

               glcd_block_write_color(color)
            end loop
         elsif GLCD_COLOR_BITS == 1 then
            -- not supported yet
         end if
      else
         _error "GLCD_BLOCK_WRITE_TYPE NOT SUPPORTED"
      end if
   end if
end procedure

end if            -- (not defined in glcd device library)

