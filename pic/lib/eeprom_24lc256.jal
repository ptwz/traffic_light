-- Title: 24LC256 i2c eeprom library
-- Author: Matthew Schinkel, copyright (c) 2009, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4m
-- Revision: $Revision: 1.1 $
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: read and write to 24lc256 i2c eeprom
--
-- Functions descriptions:
-- ee_24lc256_read    -- Read data from 24LC256 at input address
-- ee_24lc256_write   -- Write data to 24LC256 at input address
--
-- Sources:
-- http://groups.google.com/group/jallib
--

--------------------------------------------------------------------------------
-- Read data from 24LC256 at input address
--------------------------------------------------------------------------------
procedure ee_24lc256_read(byte in ic_address, word in mem_address, byte out data) is
   var byte ack_ok
   var byte address_low
   var byte address_high
   
   -- split the memory address into 2 bytes
   var byte address_bytes[2] at mem_address
   address_high  = address_bytes[1]
   address_low = address_bytes[0]
   
   i2c_start()                                    -- send start bit
   ack_ok = i2c_transmit_byte(ic_address)         -- transmit data & wait for ack
   ack_ok = i2c_transmit_byte(address_high)       -- transmit data & wait for ack
   ack_ok = i2c_transmit_byte(address_low)        -- transmit data & wait for ack
   
   i2c_restart()                                    -- send start bit
   ack_ok = i2c_transmit_byte(ic_address + 1)     -- transmit data & wait for ack
   data = i2c_receive_byte(0)                     -- nack (no ack)
   i2c_stop()                                     -- send stop bit
end procedure

--------------------------------------------------------------------------------
-- Write data to 24LC256 at input address
--------------------------------------------------------------------------------
procedure ee_24lc256_write(byte in ic_address, word in mem_address, byte in data) is
   var byte ack_ok
   
   var byte address_low
   var byte address_high
   
   -- split the memory address into 2 bytes
   var byte address_bytes[2] at mem_address
   address_high  = address_bytes[1]
   address_low = address_bytes[0]
   
   i2c_start()                              -- send start bit
   ack_ok = i2c_transmit_byte(ic_address)    -- transmit data & wait for ack
   ack_ok = i2c_transmit_byte(address_high) -- transmit data & wait for ack
   ack_ok = i2c_transmit_byte(address_low)  -- transmit data & wait for ack
   ack_ok = i2c_transmit_byte(data)         -- transmit data & wait for ack
   i2c_stop()                               -- send stop bit
   
   _usec_delay(5_000)                      -- datasheet says writes take 5ms
end procedure
