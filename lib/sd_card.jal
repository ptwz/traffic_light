-- Title: Library for communicating with SD memory cards
-- Author: Matthew Schinkel - borntechi.com, copyright (c) 2009, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4n
-- Revision: $Revision: 1.1 $
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: this library provides functions for SD memory cards.
--
-- Notes: SD card SPI mode is 1,1
--
--        This version works with only standard capacity sd cards up to 4gb,
--        high capacity up to 32 gb, and Extended Capacity up to 2TB
--        may be supported later on.
--
-- Sources:
-- SanDisk Secure Digital Card - http://www.cs.ucr.edu/~amitra/sdcard/ProdManualSDCardv1.9.pdf
-- How to use MMC/SDC - http://forums.parallax.com/forums/attach.aspx?a=32012
--

-- fix a compatibility issue. compiler bug has been reported.
if jal_build == 20110306 then
   --for jalv2 2.4o beta (compiled Mar  6 2011)
   var volatile byte sd_sector_buffer_low[256] -- 256 low bytes
   var volatile byte sd_sector_buffer_high[256] -- 256 high bytes
else
   --for jalv2 2.4n and others
   var byte sd_sector_buffer_low[256] -- 256 low bytes
   var byte sd_sector_buffer_high[256] -- 256 high bytes
end if

const word SD_BYTE_PER_SECTOR = 512

include print

-- defaulting to MSSP1 if none of following aliases are previously defined
if !defined(spi_master_set_mode) then
   alias spi_master_set_mode is spi_master_hw_set_mode
end if
if !defined(spi_master_set_speed) then
   alias spi_master_set_speed is spi_master_hw_set_speed
end if

-- counters
var byte sd_word_count = 0
var word sd_byte_count = 0
var word sd_sector_count = 0
var dword sd_sector_select

-- Basic Commands
const byte SD_GO_IDLE_STATE = 0
const byte SD_SEND_OP_COND = 1
const byte SD_SEND_IF_COND = 8  -- for SDHC only
const byte SD_SEND_CSD = 9      -- sd sends "Card Specific Data" standard or high capacity
const byte SD_SEND_CID = 10
const byte SD_STOP_TRANSMISSION = 12
const byte SD_SEND_STATUS = 13

-- Read Commands
const byte SD_SET_BLOCKLEN = 16
const byte SD_READ_SINGLE_BLOCK = 17
const byte SD_READ_MULTIPLE_BLOCK = 18

-- Write Commands
const byte SD_WRITE_BLOCK = 24
const byte SD_WRITE_MULTIPLE_BLOCK = 25
const byte SD_PROGRAM_CSD = 27

-- Write Protection Commands
const byte SD_SET_WRITE_PROT = 28
const byte SD_CLR_WRITE_PROT = 29
const byte SD_SEND_WRITE_PROT = 30

-- Erase Commands
const byte SD_ERASE_WR_BLK_START = 32
const byte SD_ERASE_WR_BLK_END = 33
const byte SD_ERASE = 38

-- Application Specific Commands
const byte SD_APP_CMD = 55 -- indicate that the next command is a application specific command
const byte SD_GEN_CMD = 56

-- Other Commands
const byte SD_READ_OCR = 58
const byte SD_CRC_ON_OFF = 59 -- default is off

-- application specific command, must write command 55 first
const byte SD_SD_STATUS = 13
const byte SD_SEND_NUM_WR_BLOCKS = 22
const byte SD_SET_WR_BLK_ERASE_COUNT = 23
const byte SD_SD_APP_OP_COND = 41
const byte SD_SET_CLR_CARD_DETECT = 42
const byte SD_SEND_SCR = 51

-- constants for fat32 library
const PATA_HARD_DISK = 0
const SD_CARD = 1
const DATA_MEDIA = SD_CARD

-- carrier used to access SD-Card (pseudo-var dealing with SPI)
if !defined(spi_master) then
   alias spi_master is spi_master_hw
end if

var bit sd_error = FALSE

--------------------------------------------------------------------------------
-- send a command to the sd card (commands with 1 response only)
--------------------------------------------------------------------------------
procedure send_command(byte in command,dword in data, byte out response) is
   var byte parameters[4] at data
   var byte x

   -- send a valid CRC byte only for set idle command
   -- right bit must always be 1 (stop bit)
   if command == SD_GO_IDLE_STATE then
      x = 0x95
   else
      x = 0xFF
   end if

   command = command + 64          -- left bits must be 01 (start bits)

   spi_master = 0xFF            -- send 8 clock pulses

   spi_master = command         -- send the command
   spi_master = parameters[3]   -- send command parameters
   spi_master = parameters[2]   -- send command parameters
   spi_master = parameters[1]   -- send command parameters
   spi_master = parameters[0]   -- send command parameters
   spi_master = x               -- CRC data byte, crc disabled in this lib.
   spi_master = 0xFF            -- send 8 clock pulses

   response = spi_master        -- Get a responce from the card after each command

   spi_master = 0xFF            -- send 8 clock pulses

end procedure

--------------------------------------------------------------------------------
-- check if the sd card is ready after last command.
--------------------------------------------------------------------------------
procedure sd_ready() is
   var byte response = 1
   while response != 0 loop   -- wait till last command has been completed
      send_command(SD_SEND_OP_COND,0, response)
   end loop
end procedure

--------------------------------------------------------------------------------
-- initalize the sd card in SPI data transfer mode.
--------------------------------------------------------------------------------
procedure sd_init() is

   if defined(sd_force_spi_mode) == true then
      sd_force_spi_mode()
   end if

   var byte reply = 0           -- shows if sd card init is ok

   -- steps to set sd card to use SPI
   sd_chip_select = low      -- start chip slect low
   _usec_delay(1_000)        -- delay
   sd_chip_select = high     -- chip select high

   for 10 loop
      spi_master = 0xFF    -- send clock pulses (0xFF 10 times)
   end loop

   -- try to contact the sd card
   var byte count1 = 0
   while (reply == 0) & (count1 < 100) loop -- try 100 times
      _usec_delay(1000)      -- delay 1ms
      sd_chip_select = low   -- enable the sd card
      send_command(SD_GO_IDLE_STATE,0,reply) -- command 0, Resets card to idle state, get a response
      sd_ready()             -- wait till sd card is ready
      sd_chip_select = high  -- disable the sd card
      count1 = count1 + 1    -- increment count
   end loop

   if count1 == 100 then
      sd_error = TRUE
   end if
   
end procedure

--------------------------------------------------------------------------------
-- set the sd card to idle state
--------------------------------------------------------------------------------
procedure sd_set_idle() is
   sd_chip_select = low  -- enable the sd card

   var byte reply
   send_command(SD_STOP_TRANSMISSION,0,reply) -- stop current transmission
   sd_ready()                                 -- wait till sd card is ready
   send_command(SD_GO_IDLE_STATE,0,reply)     -- command 0, Resets card to idle state
   sd_ready()                                 -- wait till sd card is ready

   sd_chip_select = high  -- disable the sd card
end procedure

--------------------------------------------------------------------------------
-- tell sd card you will be reading data from a specified sector
-- do not interupt read process by switching to another spi component
--------------------------------------------------------------------------------
procedure  sd_start_read(dword in address) is
   sd_sector_select = address

   -- put spi into mode
   if defined(sd_force_spi_mode) == true then
      sd_force_spi_mode()
   end if

   var byte reply
   sd_chip_select = low  -- enable the sd card
   address = address * SD_BYTE_PER_SECTOR -- make sd card sector addressable, sd cards are normally byte addressable.
   send_command(SD_READ_MULTIPLE_BLOCK,address,reply) -- send read multi block command, ignore reply.
   sd_word_count = 0       -- reset count
   sd_byte_count = 0
   sd_sector_count = 0     -- reset count
end procedure


;   --------------------------------------------------------------------------------
;   -- read 2 bytes from the sd card
;   --------------------------------------------------------------------------------
;   procedure sd_read_data(byte out low_byte, byte out high_byte) is
;      var byte x
;
;      if sd_word_count == 0 then              -- beginning of sector read
;         while spi_master != 0xFE loop      -- wait till data is ready to read
;         end loop
;      end if
;
;      low_byte = spi_master                -- get data byte
;      high_byte = spi_master               -- get data byte
;
;      if sd_word_count == 255 then            -- end of sector read
;         sd_sector_count = sd_sector_count + 1 -- increment sector number
;         x = spi_master                     -- get junk crc data, crc is disabled
;         x = spi_master                     -- get junk crc data, crc is disabled
;      end if
;
;      sd_word_count = sd_word_count + 1       -- increment word_count
;      sd_byte_count = sd_byte_count + 2       -- increment byte_count
;   end procedure


;--------------------------------------------------------------------------------
;-- read 1 bytes from the sd card
;--------------------------------------------------------------------------------
;procedure sd_read_data_byte(byte out data_byte) is
;   var byte x
;
;   if sd_byte_count == 0 then               -- beginning of sector read
;      while spi_master != 0xFE loop      -- wait till data is ready to read
;      end loop
;   end if
;
;   data_byte = spi_master                -- get data byte
;
;   if sd_byte_count == SD_BYTE_PER_SECTOR then             -- end of sector read
;      sd_sector_count = sd_sector_count + 1 -- increment sector number
;      x = spi_master                     -- get junk crc data, crc is disabled
;      x = spi_master                     -- get junk crc data, crc is disabled
;   end if
;
;   sd_byte_count = sd_byte_count + 1 -- increment byte_count
;
;   if sd_byte_count == SD_BYTE_PER_SECTOR then
;      sd_byte_count = 0
;   end if
;end procedure


--------------------------------------------------------------------------------
-- read 1 bytes from the sd card (pseudo var)
--------------------------------------------------------------------------------
function sd_data_byte'get() return byte is
   var byte x, data_byte
   
   if sd_byte_count == 0 then            -- beginning of sector read
      while spi_master != 0xFE loop      -- wait till data is ready to read
      end loop
   end if

   data_byte = spi_master                -- get data byte

   sd_byte_count = sd_byte_count + 1     -- increment byte_count
   if sd_byte_count == SD_BYTE_PER_SECTOR then          -- end of sector read
      sd_byte_count = 0
      sd_sector_count = sd_sector_count + 1 -- increment sector number
      x = spi_master                     -- get junk crc data, crc is disabled
      x = spi_master                     -- get junk crc data, crc is disabled
   end if

   return data_byte
end function



--------------------------------------------------------------------------------
-- tell sd card you are finished reading
-- needed to be the same as other mass media libs
--------------------------------------------------------------------------------
procedure sd_stop_read() is
   sd_set_idle()
   sd_chip_select = high  -- disable the sd card
end procedure

--------------------------------------------------------------------------------
-- send a read pulse to the sd card, go 2 bytes forward in current sector.
--------------------------------------------------------------------------------
procedure sd_read_pulse(word in count1) is
   _warn "This procedure is obsolete. Please use sd_read_pulse_byte()"
   var byte x,y
   count1 = count1 * 2
   for count1 loop      -- loop specified number of times
       x = sd_data_byte
   end loop
end procedure

--------------------------------------------------------------------------------
-- send a read pulse to the sd card, go 1 bytes forward in current sector.
--------------------------------------------------------------------------------
procedure sd_read_pulse_byte(word in count1) is
   var byte x
   for count1 loop           -- loop specified number of times
      x = sd_data_byte       -- do a data read and ignore the incomming data
   end loop
end procedure

--------------------------------------------------------------------------------
-- tell sd card you will be writing data to a specified sector
-- must write 1 sector at a time, SD_BYTE_PER_SECTOR bytes
-- do not interupt write process by switching to another spi component
--------------------------------------------------------------------------------
procedure sd_start_write(dword in address) is

   -- put spi into mode
   if defined(sd_force_spi_mode) == true then
      sd_force_spi_mode()
   end if

   sd_chip_select = LOW  -- enable the sd card
   var byte reply
   address = address * SD_BYTE_PER_SECTOR -- make sd card sector addressable, sd cards are normally byte addressable.
   send_command(SD_WRITE_MULTIPLE_BLOCK,address,reply) -- send read multi block command, ignore reply.
   sd_word_count = 0       -- reset count
   sd_byte_count = 0       -- reset count
   sd_sector_count = 0     -- reset count
end procedure

   ;--------------------------------------------------------------------------------
;   -- write 2 bytes to the sd card
;   --------------------------------------------------------------------------------
;   procedure sd_write_data(byte in low_byte, byte in high_byte) is
;      var byte x
;
;      if sd_word_count == 0 then    -- beginning of sector write
;         spi_master = 0xFC       -- send "stop transmission token" write multiple command
;         ;spi_master = 0xFE      -- send "stop transmission token" for write single command
;      end if
;
;      spi_master = low_byte     -- send data byte
;      spi_master = high_byte    -- send data byte
;
;      if sd_word_count == 255 then -- end of sector write
;         sd_sector_count = sd_sector_count + 1 -- increment sector count
;
;         spi_master = 0xFF  -- send junk crc, crc is disabled
;         spi_master = 0xFF  -- send junk crc, crc is disabled
;
;         x = spi_master   -- wait for a response
;         while x == 0 loop
;            x = spi_master
;         end loop
;         -- response = 010 = data accepted
;         -- response = 101 = crc error
;         -- response = 110 = write error
;
;         x = spi_master   -- wait for sd card to become ready
;         while x != 0xFF loop
;            x = spi_master
;         end loop
;      end if
;
;      sd_word_count = sd_word_count + 1  -- increment word count
;      sd_byte_count = sd_byte_count + 2       -- increment byte_count
;   end procedure


;   --------------------------------------------------------------------------------
;   -- write 1 byte to the sd card
;   --------------------------------------------------------------------------------
;   procedure sd_write_data_byte(byte in data_byte) is
;      var byte x
;
;      if sd_byte_count == 0 then  -- beginning of sector write
;         spi_master = 0xFC      -- send "stop transmission token" write multiple command
;         ;spi_master = 0xFE      -- send "stop transmission token" for write single command
;      end if
;
;      spi_master = data_byte     -- send data byte
;
;      if sd_byte_count == 511 then -- end of sector write
;         sd_sector_count = sd_sector_count + 1 -- increment sector count
;
;         spi_master = 0xFF  -- send junk crc, crc is disabled
;         spi_master = 0xFF  -- send junk crc, crc is disabled
;
;         x = spi_master   -- wait for a response
;         while x == 0 loop
;            x = spi_master
;         end loop
;         -- response = 010 = data accepted
;         -- response = 101 = crc error
;         -- response = 110 = write error
;
;         x = spi_master   -- wait for sd card to become ready
;         while x != 0xFF loop
;            x = spi_master
;         end loop
;      end if
;
;      sd_byte_count = sd_byte_count + 1  -- increment byte count
;
;      if sd_byte_count == SD_BYTE_PER_SECTOR then
;         sd_byte_count = 0
;      end if
;   end procedure


--------------------------------------------------------------------------------
-- write 1 byte to the sd card (pseudo var)
--------------------------------------------------------------------------------
procedure sd_data_byte'put(byte in data_byte) is
   var byte x
   
   if sd_byte_count == 0 then    -- beginning of sector write
      spi_master = 0xFC       -- send "stop transmission token" write multiple command
      ;spi_master = 0xFE      -- send "stop transmission token" for write single command
   end if

   spi_master = data_byte     -- send data byte

   sd_byte_count = sd_byte_count + 1  -- increment byte count

   if sd_byte_count == SD_BYTE_PER_SECTOR then -- end of sector write
      sd_byte_count = 0
      sd_sector_count = sd_sector_count + 1 -- increment sector count

      spi_master = 0xFF  -- send junk crc, crc is disabled
      spi_master = 0xFF  -- send junk crc, crc is disabled

      x = spi_master   -- wait for a response
      while x == 0 loop
         x = spi_master
      end loop
      -- response = 010 = data accepted
      -- response = 101 = crc error
      -- response = 110 = write error

      x = spi_master   -- wait for sd card to become ready
      while x != 0xFF loop
         x = spi_master
      end loop
   end if
end procedure

--------------------------------------------------------------------------------
-- write till sector is finished with input byte
-- data does not actually get written till you get to the end of the sector
--------------------------------------------------------------------------------
procedure sd_write_to_sector_end(byte in input_byte) is
   if !(sd_word_count == 0) then
      var byte x
      x = 0 - sd_word_count
      for x loop
         sd_data_byte = input_byte
         sd_data_byte = input_byte
      end loop
      sd_chip_select = high  -- disable the sd card
   elsif !(sd_byte_count == 0) then
      var word y
      y = SD_BYTE_PER_SECTOR - sd_byte_count
      for y loop
         sd_data_byte = input_byte -- write 2 bytes, 0's as data
      end loop
      sd_chip_select = high  -- disable the sd card
   end if
end procedure

--------------------------------------------------------------------------------
-- tell sd card you are finished writing
--------------------------------------------------------------------------------
procedure sd_stop_write() is
   sd_write_to_sector_end(0) -- writes 0's till end of sector

   spi_master = 0xFD -- send "stop transmission token"
   sd_set_idle()
   sd_chip_select = high  -- disable the sd card
   if SD_DELAY_AFTER_WRITE == TRUE then
      _usec_delay (50_000)
   else
   
      for 50000 loop
         sd_chip_select = low  -- enable the sd card

         var byte reply
         send_command(SD_STOP_TRANSMISSION,0,reply) -- stop current transmission
         sd_ready()                                 -- wait till sd card is ready
         send_command(SD_GO_IDLE_STATE,0,reply)     -- command 0, Resets card to idle state
         sd_ready()                                 -- wait till sd card is ready

         sd_chip_select = high  -- disable the sd card

         if !(reply == 0) then
            exit loop
         end if
      end loop
   end if
end procedure

;--------------------------------------------------------------------------------
;-- send a write pulse to the sd card by writing 2 bytes, 0's as data
;--------------------------------------------------------------------------------
procedure sd_write_pulse(byte in count1) is
   _warn "This procedure is obsolete. Please use sd_write_pulse_byte()"
   for count1 loop
      sd_data_byte = 0
      sd_data_byte = 0
   end loop
end procedure

;--------------------------------------------------------------------------------
;-- send a write pulse to the sd card by writing 1 bytes, 0 as data
;--------------------------------------------------------------------------------
procedure sd_write_pulse_byte(word in count1) is
   for count1 loop
      sd_data_byte = 0
   end loop
end procedure

---------------------------------------------------------------------------
-- define the sector buffer. Can be read as sd_sector_buffer[0-511]
---------------------------------------------------------------------------
function sd_sector_buffer'get(word in address) return byte is
   pragma inline
   if bit(address) == 0 then
      return sd_sector_buffer_low[address / 2]
   else
      return sd_sector_buffer_high[(address / 2)]
   end if
end function
--
procedure sd_sector_buffer'put(word in address, byte in data) is
   pragma inline
   if bit(address) == 0 then
      sd_sector_buffer_low[address / 2] = data
   else
      sd_sector_buffer_high[(address / 2)] = data
   end if
end procedure

procedure _sd_read_512() is
   sd_sector_buffer_low[0] = spi_master
   sd_sector_buffer_high[0] = spi_master
   sd_sector_buffer_low[1] = spi_master
   sd_sector_buffer_high[1] = spi_master
   sd_sector_buffer_low[2] = spi_master
   sd_sector_buffer_high[2] = spi_master
   sd_sector_buffer_low[3] = spi_master
   sd_sector_buffer_high[3] = spi_master
   sd_sector_buffer_low[4] = spi_master
   sd_sector_buffer_high[4] = spi_master
   sd_sector_buffer_low[5] = spi_master
   sd_sector_buffer_high[5] = spi_master
   sd_sector_buffer_low[6] = spi_master
   sd_sector_buffer_high[6] = spi_master
   sd_sector_buffer_low[7] = spi_master
   sd_sector_buffer_high[7] = spi_master
   sd_sector_buffer_low[8] = spi_master
   sd_sector_buffer_high[8] = spi_master
   sd_sector_buffer_low[9] = spi_master
   sd_sector_buffer_high[9] = spi_master
   sd_sector_buffer_low[10] = spi_master
   sd_sector_buffer_high[10] = spi_master
   sd_sector_buffer_low[11] = spi_master
   sd_sector_buffer_high[11] = spi_master
   sd_sector_buffer_low[12] = spi_master
   sd_sector_buffer_high[12] = spi_master
   sd_sector_buffer_low[13] = spi_master
   sd_sector_buffer_high[13] = spi_master
   sd_sector_buffer_low[14] = spi_master
   sd_sector_buffer_high[14] = spi_master
   sd_sector_buffer_low[15] = spi_master
   sd_sector_buffer_high[15] = spi_master
   sd_sector_buffer_low[16] = spi_master
   sd_sector_buffer_high[16] = spi_master
   sd_sector_buffer_low[17] = spi_master
   sd_sector_buffer_high[17] = spi_master
   sd_sector_buffer_low[18] = spi_master
   sd_sector_buffer_high[18] = spi_master
   sd_sector_buffer_low[19] = spi_master
   sd_sector_buffer_high[19] = spi_master
   sd_sector_buffer_low[20] = spi_master
   sd_sector_buffer_high[20] = spi_master
   sd_sector_buffer_low[21] = spi_master
   sd_sector_buffer_high[21] = spi_master
   sd_sector_buffer_low[22] = spi_master
   sd_sector_buffer_high[22] = spi_master
   sd_sector_buffer_low[23] = spi_master
   sd_sector_buffer_high[23] = spi_master
   sd_sector_buffer_low[24] = spi_master
   sd_sector_buffer_high[24] = spi_master
   sd_sector_buffer_low[25] = spi_master
   sd_sector_buffer_high[25] = spi_master
   sd_sector_buffer_low[26] = spi_master
   sd_sector_buffer_high[26] = spi_master
   sd_sector_buffer_low[27] = spi_master
   sd_sector_buffer_high[27] = spi_master
   sd_sector_buffer_low[28] = spi_master
   sd_sector_buffer_high[28] = spi_master
   sd_sector_buffer_low[29] = spi_master
   sd_sector_buffer_high[29] = spi_master
   sd_sector_buffer_low[30] = spi_master
   sd_sector_buffer_high[30] = spi_master
   sd_sector_buffer_low[31] = spi_master
   sd_sector_buffer_high[31] = spi_master
   sd_sector_buffer_low[32] = spi_master
   sd_sector_buffer_high[32] = spi_master
   sd_sector_buffer_low[33] = spi_master
   sd_sector_buffer_high[33] = spi_master
   sd_sector_buffer_low[34] = spi_master
   sd_sector_buffer_high[34] = spi_master
   sd_sector_buffer_low[35] = spi_master
   sd_sector_buffer_high[35] = spi_master
   sd_sector_buffer_low[36] = spi_master
   sd_sector_buffer_high[36] = spi_master
   sd_sector_buffer_low[37] = spi_master
   sd_sector_buffer_high[37] = spi_master
   sd_sector_buffer_low[38] = spi_master
   sd_sector_buffer_high[38] = spi_master
   sd_sector_buffer_low[39] = spi_master
   sd_sector_buffer_high[39] = spi_master
   sd_sector_buffer_low[40] = spi_master
   sd_sector_buffer_high[40] = spi_master
   sd_sector_buffer_low[41] = spi_master
   sd_sector_buffer_high[41] = spi_master
   sd_sector_buffer_low[42] = spi_master
   sd_sector_buffer_high[42] = spi_master
   sd_sector_buffer_low[43] = spi_master
   sd_sector_buffer_high[43] = spi_master
   sd_sector_buffer_low[44] = spi_master
   sd_sector_buffer_high[44] = spi_master
   sd_sector_buffer_low[45] = spi_master
   sd_sector_buffer_high[45] = spi_master
   sd_sector_buffer_low[46] = spi_master
   sd_sector_buffer_high[46] = spi_master
   sd_sector_buffer_low[47] = spi_master
   sd_sector_buffer_high[47] = spi_master
   sd_sector_buffer_low[48] = spi_master
   sd_sector_buffer_high[48] = spi_master
   sd_sector_buffer_low[49] = spi_master
   sd_sector_buffer_high[49] = spi_master
   sd_sector_buffer_low[50] = spi_master
   sd_sector_buffer_high[50] = spi_master
   sd_sector_buffer_low[51] = spi_master
   sd_sector_buffer_high[51] = spi_master
   sd_sector_buffer_low[52] = spi_master
   sd_sector_buffer_high[52] = spi_master
   sd_sector_buffer_low[53] = spi_master
   sd_sector_buffer_high[53] = spi_master
   sd_sector_buffer_low[54] = spi_master
   sd_sector_buffer_high[54] = spi_master
   sd_sector_buffer_low[55] = spi_master
   sd_sector_buffer_high[55] = spi_master
   sd_sector_buffer_low[56] = spi_master
   sd_sector_buffer_high[56] = spi_master
   sd_sector_buffer_low[57] = spi_master
   sd_sector_buffer_high[57] = spi_master
   sd_sector_buffer_low[58] = spi_master
   sd_sector_buffer_high[58] = spi_master
   sd_sector_buffer_low[59] = spi_master
   sd_sector_buffer_high[59] = spi_master
   sd_sector_buffer_low[60] = spi_master
   sd_sector_buffer_high[60] = spi_master
   sd_sector_buffer_low[61] = spi_master
   sd_sector_buffer_high[61] = spi_master
   sd_sector_buffer_low[62] = spi_master
   sd_sector_buffer_high[62] = spi_master
   sd_sector_buffer_low[63] = spi_master
   sd_sector_buffer_high[63] = spi_master
   sd_sector_buffer_low[64] = spi_master
   sd_sector_buffer_high[64] = spi_master
   sd_sector_buffer_low[65] = spi_master
   sd_sector_buffer_high[65] = spi_master
   sd_sector_buffer_low[66] = spi_master
   sd_sector_buffer_high[66] = spi_master
   sd_sector_buffer_low[67] = spi_master
   sd_sector_buffer_high[67] = spi_master
   sd_sector_buffer_low[68] = spi_master
   sd_sector_buffer_high[68] = spi_master
   sd_sector_buffer_low[69] = spi_master
   sd_sector_buffer_high[69] = spi_master
   sd_sector_buffer_low[70] = spi_master
   sd_sector_buffer_high[70] = spi_master
   sd_sector_buffer_low[71] = spi_master
   sd_sector_buffer_high[71] = spi_master
   sd_sector_buffer_low[72] = spi_master
   sd_sector_buffer_high[72] = spi_master
   sd_sector_buffer_low[73] = spi_master
   sd_sector_buffer_high[73] = spi_master
   sd_sector_buffer_low[74] = spi_master
   sd_sector_buffer_high[74] = spi_master
   sd_sector_buffer_low[75] = spi_master
   sd_sector_buffer_high[75] = spi_master
   sd_sector_buffer_low[76] = spi_master
   sd_sector_buffer_high[76] = spi_master
   sd_sector_buffer_low[77] = spi_master
   sd_sector_buffer_high[77] = spi_master
   sd_sector_buffer_low[78] = spi_master
   sd_sector_buffer_high[78] = spi_master
   sd_sector_buffer_low[79] = spi_master
   sd_sector_buffer_high[79] = spi_master
   sd_sector_buffer_low[80] = spi_master
   sd_sector_buffer_high[80] = spi_master
   sd_sector_buffer_low[81] = spi_master
   sd_sector_buffer_high[81] = spi_master
   sd_sector_buffer_low[82] = spi_master
   sd_sector_buffer_high[82] = spi_master
   sd_sector_buffer_low[83] = spi_master
   sd_sector_buffer_high[83] = spi_master
   sd_sector_buffer_low[84] = spi_master
   sd_sector_buffer_high[84] = spi_master
   sd_sector_buffer_low[85] = spi_master
   sd_sector_buffer_high[85] = spi_master
   sd_sector_buffer_low[86] = spi_master
   sd_sector_buffer_high[86] = spi_master
   sd_sector_buffer_low[87] = spi_master
   sd_sector_buffer_high[87] = spi_master
   sd_sector_buffer_low[88] = spi_master
   sd_sector_buffer_high[88] = spi_master
   sd_sector_buffer_low[89] = spi_master
   sd_sector_buffer_high[89] = spi_master
   sd_sector_buffer_low[90] = spi_master
   sd_sector_buffer_high[90] = spi_master
   sd_sector_buffer_low[91] = spi_master
   sd_sector_buffer_high[91] = spi_master
   sd_sector_buffer_low[92] = spi_master
   sd_sector_buffer_high[92] = spi_master
   sd_sector_buffer_low[93] = spi_master
   sd_sector_buffer_high[93] = spi_master
   sd_sector_buffer_low[94] = spi_master
   sd_sector_buffer_high[94] = spi_master
   sd_sector_buffer_low[95] = spi_master
   sd_sector_buffer_high[95] = spi_master
   sd_sector_buffer_low[96] = spi_master
   sd_sector_buffer_high[96] = spi_master
   sd_sector_buffer_low[97] = spi_master
   sd_sector_buffer_high[97] = spi_master
   sd_sector_buffer_low[98] = spi_master
   sd_sector_buffer_high[98] = spi_master
   sd_sector_buffer_low[99] = spi_master
   sd_sector_buffer_high[99] = spi_master
   sd_sector_buffer_low[100] = spi_master
   sd_sector_buffer_high[100] = spi_master
   sd_sector_buffer_low[101] = spi_master
   sd_sector_buffer_high[101] = spi_master
   sd_sector_buffer_low[102] = spi_master
   sd_sector_buffer_high[102] = spi_master
   sd_sector_buffer_low[103] = spi_master
   sd_sector_buffer_high[103] = spi_master
   sd_sector_buffer_low[104] = spi_master
   sd_sector_buffer_high[104] = spi_master
   sd_sector_buffer_low[105] = spi_master
   sd_sector_buffer_high[105] = spi_master
   sd_sector_buffer_low[106] = spi_master
   sd_sector_buffer_high[106] = spi_master
   sd_sector_buffer_low[107] = spi_master
   sd_sector_buffer_high[107] = spi_master
   sd_sector_buffer_low[108] = spi_master
   sd_sector_buffer_high[108] = spi_master
   sd_sector_buffer_low[109] = spi_master
   sd_sector_buffer_high[109] = spi_master
   sd_sector_buffer_low[110] = spi_master
   sd_sector_buffer_high[110] = spi_master
   sd_sector_buffer_low[111] = spi_master
   sd_sector_buffer_high[111] = spi_master
   sd_sector_buffer_low[112] = spi_master
   sd_sector_buffer_high[112] = spi_master
   sd_sector_buffer_low[113] = spi_master
   sd_sector_buffer_high[113] = spi_master
   sd_sector_buffer_low[114] = spi_master
   sd_sector_buffer_high[114] = spi_master
   sd_sector_buffer_low[115] = spi_master
   sd_sector_buffer_high[115] = spi_master
   sd_sector_buffer_low[116] = spi_master
   sd_sector_buffer_high[116] = spi_master
   sd_sector_buffer_low[117] = spi_master
   sd_sector_buffer_high[117] = spi_master
   sd_sector_buffer_low[118] = spi_master
   sd_sector_buffer_high[118] = spi_master
   sd_sector_buffer_low[119] = spi_master
   sd_sector_buffer_high[119] = spi_master
   sd_sector_buffer_low[120] = spi_master
   sd_sector_buffer_high[120] = spi_master
   sd_sector_buffer_low[121] = spi_master
   sd_sector_buffer_high[121] = spi_master
   sd_sector_buffer_low[122] = spi_master
   sd_sector_buffer_high[122] = spi_master
   sd_sector_buffer_low[123] = spi_master
   sd_sector_buffer_high[123] = spi_master
   sd_sector_buffer_low[124] = spi_master
   sd_sector_buffer_high[124] = spi_master
   sd_sector_buffer_low[125] = spi_master
   sd_sector_buffer_high[125] = spi_master
   sd_sector_buffer_low[126] = spi_master
   sd_sector_buffer_high[126] = spi_master
   sd_sector_buffer_low[127] = spi_master
   sd_sector_buffer_high[127] = spi_master
   sd_sector_buffer_low[128] = spi_master
   sd_sector_buffer_high[128] = spi_master
   sd_sector_buffer_low[129] = spi_master
   sd_sector_buffer_high[129] = spi_master
   sd_sector_buffer_low[130] = spi_master
   sd_sector_buffer_high[130] = spi_master
   sd_sector_buffer_low[131] = spi_master
   sd_sector_buffer_high[131] = spi_master
   sd_sector_buffer_low[132] = spi_master
   sd_sector_buffer_high[132] = spi_master
   sd_sector_buffer_low[133] = spi_master
   sd_sector_buffer_high[133] = spi_master
   sd_sector_buffer_low[134] = spi_master
   sd_sector_buffer_high[134] = spi_master
   sd_sector_buffer_low[135] = spi_master
   sd_sector_buffer_high[135] = spi_master
   sd_sector_buffer_low[136] = spi_master
   sd_sector_buffer_high[136] = spi_master
   sd_sector_buffer_low[137] = spi_master
   sd_sector_buffer_high[137] = spi_master
   sd_sector_buffer_low[138] = spi_master
   sd_sector_buffer_high[138] = spi_master
   sd_sector_buffer_low[139] = spi_master
   sd_sector_buffer_high[139] = spi_master
   sd_sector_buffer_low[140] = spi_master
   sd_sector_buffer_high[140] = spi_master
   sd_sector_buffer_low[141] = spi_master
   sd_sector_buffer_high[141] = spi_master
   sd_sector_buffer_low[142] = spi_master
   sd_sector_buffer_high[142] = spi_master
   sd_sector_buffer_low[143] = spi_master
   sd_sector_buffer_high[143] = spi_master
   sd_sector_buffer_low[144] = spi_master
   sd_sector_buffer_high[144] = spi_master
   sd_sector_buffer_low[145] = spi_master
   sd_sector_buffer_high[145] = spi_master
   sd_sector_buffer_low[146] = spi_master
   sd_sector_buffer_high[146] = spi_master
   sd_sector_buffer_low[147] = spi_master
   sd_sector_buffer_high[147] = spi_master
   sd_sector_buffer_low[148] = spi_master
   sd_sector_buffer_high[148] = spi_master
   sd_sector_buffer_low[149] = spi_master
   sd_sector_buffer_high[149] = spi_master
   sd_sector_buffer_low[150] = spi_master
   sd_sector_buffer_high[150] = spi_master
   sd_sector_buffer_low[151] = spi_master
   sd_sector_buffer_high[151] = spi_master
   sd_sector_buffer_low[152] = spi_master
   sd_sector_buffer_high[152] = spi_master
   sd_sector_buffer_low[153] = spi_master
   sd_sector_buffer_high[153] = spi_master
   sd_sector_buffer_low[154] = spi_master
   sd_sector_buffer_high[154] = spi_master
   sd_sector_buffer_low[155] = spi_master
   sd_sector_buffer_high[155] = spi_master
   sd_sector_buffer_low[156] = spi_master
   sd_sector_buffer_high[156] = spi_master
   sd_sector_buffer_low[157] = spi_master
   sd_sector_buffer_high[157] = spi_master
   sd_sector_buffer_low[158] = spi_master
   sd_sector_buffer_high[158] = spi_master
   sd_sector_buffer_low[159] = spi_master
   sd_sector_buffer_high[159] = spi_master
   sd_sector_buffer_low[160] = spi_master
   sd_sector_buffer_high[160] = spi_master
   sd_sector_buffer_low[161] = spi_master
   sd_sector_buffer_high[161] = spi_master
   sd_sector_buffer_low[162] = spi_master
   sd_sector_buffer_high[162] = spi_master
   sd_sector_buffer_low[163] = spi_master
   sd_sector_buffer_high[163] = spi_master
   sd_sector_buffer_low[164] = spi_master
   sd_sector_buffer_high[164] = spi_master
   sd_sector_buffer_low[165] = spi_master
   sd_sector_buffer_high[165] = spi_master
   sd_sector_buffer_low[166] = spi_master
   sd_sector_buffer_high[166] = spi_master
   sd_sector_buffer_low[167] = spi_master
   sd_sector_buffer_high[167] = spi_master
   sd_sector_buffer_low[168] = spi_master
   sd_sector_buffer_high[168] = spi_master
   sd_sector_buffer_low[169] = spi_master
   sd_sector_buffer_high[169] = spi_master
   sd_sector_buffer_low[170] = spi_master
   sd_sector_buffer_high[170] = spi_master
   sd_sector_buffer_low[171] = spi_master
   sd_sector_buffer_high[171] = spi_master
   sd_sector_buffer_low[172] = spi_master
   sd_sector_buffer_high[172] = spi_master
   sd_sector_buffer_low[173] = spi_master
   sd_sector_buffer_high[173] = spi_master
   sd_sector_buffer_low[174] = spi_master
   sd_sector_buffer_high[174] = spi_master
   sd_sector_buffer_low[175] = spi_master
   sd_sector_buffer_high[175] = spi_master
   sd_sector_buffer_low[176] = spi_master
   sd_sector_buffer_high[176] = spi_master
   sd_sector_buffer_low[177] = spi_master
   sd_sector_buffer_high[177] = spi_master
   sd_sector_buffer_low[178] = spi_master
   sd_sector_buffer_high[178] = spi_master
   sd_sector_buffer_low[179] = spi_master
   sd_sector_buffer_high[179] = spi_master
   sd_sector_buffer_low[180] = spi_master
   sd_sector_buffer_high[180] = spi_master
   sd_sector_buffer_low[181] = spi_master
   sd_sector_buffer_high[181] = spi_master
   sd_sector_buffer_low[182] = spi_master
   sd_sector_buffer_high[182] = spi_master
   sd_sector_buffer_low[183] = spi_master
   sd_sector_buffer_high[183] = spi_master
   sd_sector_buffer_low[184] = spi_master
   sd_sector_buffer_high[184] = spi_master
   sd_sector_buffer_low[185] = spi_master
   sd_sector_buffer_high[185] = spi_master
   sd_sector_buffer_low[186] = spi_master
   sd_sector_buffer_high[186] = spi_master
   sd_sector_buffer_low[187] = spi_master
   sd_sector_buffer_high[187] = spi_master
   sd_sector_buffer_low[188] = spi_master
   sd_sector_buffer_high[188] = spi_master
   sd_sector_buffer_low[189] = spi_master
   sd_sector_buffer_high[189] = spi_master
   sd_sector_buffer_low[190] = spi_master
   sd_sector_buffer_high[190] = spi_master
   sd_sector_buffer_low[191] = spi_master
   sd_sector_buffer_high[191] = spi_master
   sd_sector_buffer_low[192] = spi_master
   sd_sector_buffer_high[192] = spi_master
   sd_sector_buffer_low[193] = spi_master
   sd_sector_buffer_high[193] = spi_master
   sd_sector_buffer_low[194] = spi_master
   sd_sector_buffer_high[194] = spi_master
   sd_sector_buffer_low[195] = spi_master
   sd_sector_buffer_high[195] = spi_master
   sd_sector_buffer_low[196] = spi_master
   sd_sector_buffer_high[196] = spi_master
   sd_sector_buffer_low[197] = spi_master
   sd_sector_buffer_high[197] = spi_master
   sd_sector_buffer_low[198] = spi_master
   sd_sector_buffer_high[198] = spi_master
   sd_sector_buffer_low[199] = spi_master
   sd_sector_buffer_high[199] = spi_master
   sd_sector_buffer_low[200] = spi_master
   sd_sector_buffer_high[200] = spi_master
   sd_sector_buffer_low[201] = spi_master
   sd_sector_buffer_high[201] = spi_master
   sd_sector_buffer_low[202] = spi_master
   sd_sector_buffer_high[202] = spi_master
   sd_sector_buffer_low[203] = spi_master
   sd_sector_buffer_high[203] = spi_master
   sd_sector_buffer_low[204] = spi_master
   sd_sector_buffer_high[204] = spi_master
   sd_sector_buffer_low[205] = spi_master
   sd_sector_buffer_high[205] = spi_master
   sd_sector_buffer_low[206] = spi_master
   sd_sector_buffer_high[206] = spi_master
   sd_sector_buffer_low[207] = spi_master
   sd_sector_buffer_high[207] = spi_master
   sd_sector_buffer_low[208] = spi_master
   sd_sector_buffer_high[208] = spi_master
   sd_sector_buffer_low[209] = spi_master
   sd_sector_buffer_high[209] = spi_master
   sd_sector_buffer_low[210] = spi_master
   sd_sector_buffer_high[210] = spi_master
   sd_sector_buffer_low[211] = spi_master
   sd_sector_buffer_high[211] = spi_master
   sd_sector_buffer_low[212] = spi_master
   sd_sector_buffer_high[212] = spi_master
   sd_sector_buffer_low[213] = spi_master
   sd_sector_buffer_high[213] = spi_master
   sd_sector_buffer_low[214] = spi_master
   sd_sector_buffer_high[214] = spi_master
   sd_sector_buffer_low[215] = spi_master
   sd_sector_buffer_high[215] = spi_master
   sd_sector_buffer_low[216] = spi_master
   sd_sector_buffer_high[216] = spi_master
   sd_sector_buffer_low[217] = spi_master
   sd_sector_buffer_high[217] = spi_master
   sd_sector_buffer_low[218] = spi_master
   sd_sector_buffer_high[218] = spi_master
   sd_sector_buffer_low[219] = spi_master
   sd_sector_buffer_high[219] = spi_master
   sd_sector_buffer_low[220] = spi_master
   sd_sector_buffer_high[220] = spi_master
   sd_sector_buffer_low[221] = spi_master
   sd_sector_buffer_high[221] = spi_master
   sd_sector_buffer_low[222] = spi_master
   sd_sector_buffer_high[222] = spi_master
   sd_sector_buffer_low[223] = spi_master
   sd_sector_buffer_high[223] = spi_master
   sd_sector_buffer_low[224] = spi_master
   sd_sector_buffer_high[224] = spi_master
   sd_sector_buffer_low[225] = spi_master
   sd_sector_buffer_high[225] = spi_master
   sd_sector_buffer_low[226] = spi_master
   sd_sector_buffer_high[226] = spi_master
   sd_sector_buffer_low[227] = spi_master
   sd_sector_buffer_high[227] = spi_master
   sd_sector_buffer_low[228] = spi_master
   sd_sector_buffer_high[228] = spi_master
   sd_sector_buffer_low[229] = spi_master
   sd_sector_buffer_high[229] = spi_master
   sd_sector_buffer_low[230] = spi_master
   sd_sector_buffer_high[230] = spi_master
   sd_sector_buffer_low[231] = spi_master
   sd_sector_buffer_high[231] = spi_master
   sd_sector_buffer_low[232] = spi_master
   sd_sector_buffer_high[232] = spi_master
   sd_sector_buffer_low[233] = spi_master
   sd_sector_buffer_high[233] = spi_master
   sd_sector_buffer_low[234] = spi_master
   sd_sector_buffer_high[234] = spi_master
   sd_sector_buffer_low[235] = spi_master
   sd_sector_buffer_high[235] = spi_master
   sd_sector_buffer_low[236] = spi_master
   sd_sector_buffer_high[236] = spi_master
   sd_sector_buffer_low[237] = spi_master
   sd_sector_buffer_high[237] = spi_master
   sd_sector_buffer_low[238] = spi_master
   sd_sector_buffer_high[238] = spi_master
   sd_sector_buffer_low[239] = spi_master
   sd_sector_buffer_high[239] = spi_master
   sd_sector_buffer_low[240] = spi_master
   sd_sector_buffer_high[240] = spi_master
   sd_sector_buffer_low[241] = spi_master
   sd_sector_buffer_high[241] = spi_master
   sd_sector_buffer_low[242] = spi_master
   sd_sector_buffer_high[242] = spi_master
   sd_sector_buffer_low[243] = spi_master
   sd_sector_buffer_high[243] = spi_master
   sd_sector_buffer_low[244] = spi_master
   sd_sector_buffer_high[244] = spi_master
   sd_sector_buffer_low[245] = spi_master
   sd_sector_buffer_high[245] = spi_master
   sd_sector_buffer_low[246] = spi_master
   sd_sector_buffer_high[246] = spi_master
   sd_sector_buffer_low[247] = spi_master
   sd_sector_buffer_high[247] = spi_master
   sd_sector_buffer_low[248] = spi_master
   sd_sector_buffer_high[248] = spi_master
   sd_sector_buffer_low[249] = spi_master
   sd_sector_buffer_high[249] = spi_master
   sd_sector_buffer_low[250] = spi_master
   sd_sector_buffer_high[250] = spi_master
   sd_sector_buffer_low[251] = spi_master
   sd_sector_buffer_high[251] = spi_master
   sd_sector_buffer_low[252] = spi_master
   sd_sector_buffer_high[252] = spi_master
   sd_sector_buffer_low[253] = spi_master
   sd_sector_buffer_high[253] = spi_master
   sd_sector_buffer_low[254] = spi_master
   sd_sector_buffer_high[254] = spi_master
   sd_sector_buffer_low[255] = spi_master
   sd_sector_buffer_high[255] = spi_master
end procedure

--------------------------------------------------------------------------------
-- read one entire sector
--------------------------------------------------------------------------------
procedure  sd_read_sector() is
   var byte x
   var word count1 = 0

   while spi_master != 0xFE loop      -- wait till data is ready to read
   end loop
   
   -- get sector data
   if defined(SD_READ_EXTRA_SPEED) == TRUE then
      if SD_READ_EXTRA_SPEED == TRUE then
         _sd_read_512()
      else
         for 256 using count1 loop
            -- get the data trough spi
            sd_sector_buffer_low[count1] = spi_master  -- get low data
            sd_sector_buffer_high[count1] = spi_master -- get high data
         end loop
      end if
   else
      for 256 using count1 loop
         -- get the data trough spi
         sd_sector_buffer_low[count1] = spi_master  -- get low data
         sd_sector_buffer_high[count1] = spi_master -- get high data
      end loop
   end if
   
   sd_sector_count = sd_sector_count + 1 -- increment sector number
   x = spi_master                     -- get junk crc data, crc is disabled
   x = spi_master                     -- get junk crc data, crc is disabled

   sd_word_count = sd_word_count + 1     -- increment word_count
   sd_byte_count = sd_byte_count + 2       -- increment byte_count

   sd_sector_select = sd_sector_select + 1
end procedure

--------------------------------------------------------------------------------
-- read one entire sector at address
--------------------------------------------------------------------------------
procedure sd_read_sector_address(dword in address) is

   -- force sd card mode
   if defined(sd_force_spi_mode) == true then
      sd_force_spi_mode()
   end if

   sd_start_read(address)
   sd_read_sector()
   sd_stop_read()
end procedure

--------------------------------------------------------------------------------
-- write one entire sector
--------------------------------------------------------------------------------
procedure sd_write_sector() is
   var byte x
   var word count1
   
   spi_master = 0xFC       -- send "stop transmission token" write multiple command

   -- send the data via spi
   for 256 using count1 loop
    spi_master = sd_sector_buffer_low[count1] -- set low data
    spi_master = sd_sector_buffer_high[count1]-- set high data
   end loop

   sd_sector_count = sd_sector_count + 1 -- increment sector count

   spi_master = 0xFF  -- send junk crc, crc is disabled
   spi_master = 0xFF  -- send junk crc, crc is disabled

   x = spi_master   -- wait for a response
   while x == 0 loop
      x = spi_master
   end loop
   -- response = 010 = data accepted
   -- response = 101 = crc error
   -- response = 110 = write error

   x = spi_master   -- wait for sd card to become ready
   while x != 0xFF loop
      x = spi_master
   end loop
end procedure

--------------------------------------------------------------------------------
-- write one entire sector at address
--------------------------------------------------------------------------------
procedure sd_write_sector_address(dword in address) is
   sd_start_write(address)
   sd_write_sector()
   sd_stop_write()
end procedure

-- ----------------------------------------------------------------------------
-- print a sector to an output device
-- ----------------------------------------------------------------------------
procedure sd_print_sector(volatile byte out device, dword in address) is
   sd_start_read(address)
   for SD_BYTE_PER_SECTOR loop
      device = sd_data_byte
   end loop
   sd_stop_read
end procedure

-- ----------------------------------------------------------------------------
-- print a sector to an output device in ascii hex
-- ----------------------------------------------------------------------------
procedure sd_print_sector_hex(volatile byte out device,word in bytes_per_line,dword in address) is
   sd_start_read(address)
   for SD_BYTE_PER_SECTOR / bytes_per_line loop
      print_crlf(device)
      for bytes_per_line loop
         device = " "
         print_byte_hex(device,sd_data_byte)
      end loop
   end loop
   sd_stop_read
end procedure

;   --------------------------------------------------------------------------------
;   -- read CSD or CID to serial port. Example:
;   -- sd_read_csd_cid(SD_SEND_CSD)
;   -- sd_read_csd_cid(SD_SEND_CSD)
;   --------------------------------------------------------------------------------
;   procedure sd_read_csd_cid(byte in command) is
;      sd_chip_select = low  -- enable the sd card
;
;      var byte response,data, step
;      send_command(command,0,response)
;
;      -- wait till ready
;      while spi_master != 0xFE loop      -- wait till data is ready to read
;      end loop
;
;      -- get data
;      for 16 using step loop
;         data = spi_master
;         print_byte_hex(serial_data, data)
;         serial_data = " "
;      end loop
;
;      -- get crc
;      data = spi_master
;      data = spi_master
;
;      sd_chip_select = high  -- enable the sd card
;   end procedure

;   --------------------------------------------------------------------------------
;   -- send SD_READ_IF_COND command
;   --------------------------------------------------------------------------------
;   procedure sd_read_if_cond() is
;      sd_chip_select = low   -- enable the sd card
;
;      var byte response
;      send_command(SD_SEND_IF_COND, 0x1AA, response)
;      print_byte_hex(serial_data,response)
;
;      print_byte_hex(serial_data,spi_master)
;      print_byte_hex(serial_data,spi_master)
;      print_byte_hex(serial_data,spi_master)
;      print_byte_hex(serial_data,spi_master)
;
;      spi_master = 0xFF            -- send 8 clock pulses
;
;      sd_chip_select = high   -- enable the sd card
;   end procedure


--------------------------------------------------------------------------------
-- returns sd card size in number of sectors.
-- Total size in bytes = sd_number_of_sectors * 512
--------------------------------------------------------------------------------
function sd_number_of_sectors'get() return dword is
   sd_chip_select = low  -- enable the sd card

   var byte x
   var byte*4 c_size = 0
   var byte _c_size[3] at c_size
   var byte*2 c_size_mult
   var byte _c_size_mult[2] at c_size_mult

   send_command(SD_SEND_CSD,0,x)

   -- wait till ready
   while spi_master != 0xFE loop      -- wait till data is ready to read
   end loop

   -- throw data we dont' need
   for 6 loop
      x = spi_master
   end loop

   _c_size[2] = spi_master
   _c_size[1] = spi_master
   _c_size[0] = spi_master

   _c_size[2] = _c_size[2] & 0b00000111
   c_size = c_size >> 6

   -- get c_size_mult
   _c_size_mult[1] = spi_master
   _c_size_mult[0] = spi_master

   c_size_mult = (c_size_mult >> 7) & 0b00000111

   -- throw the rest of data we dont' need
   for 5 loop
      x = spi_master
   end loop

   -- get crc
   x = spi_master
   x = spi_master

   sd_chip_select = high  -- enable the sd card

   return (c_size << (c_size_mult + 2))
end function
