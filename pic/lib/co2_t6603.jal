-- Title: T6603_CO2, read values from GE/Telaire T6603 CO2 sensor.
-- Author: Eur van Andel, eur@fiwihex.nl Copyright (c) 2008
-- Adapted-by: Albert Faber
-- Compiler: =2.4m
-- Revision: $Revision: 1.1 $
-- 
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: this library communicates with the T6603 GE/Telaire CO2 sensor.
-- This sensor uses the Telaire Tsunami-Lite Commnications Protocol 
-- available functions are:
-- get_status() return byte
-- get_co2_ppm() return word           -- CO2 concentration in ppm 
-- get_serial_numer() return string[15]
-- get_elevation_m() return word       -- in meters above sea level
-- 
-- This library uses the serial_hardware and delay libraries. 
-- These libs must be included  and initialised in the main program before
-- including this one. This code is published with approval from GE. 
--
-- Sources:  http://www.ge-mcs.com/download/sensing-manuals/T63182-003.pdf
-- if this document moves, google for: http://www.google.com/search?q=telaire+tsnuami+lite
--
-- Some clippings from the protocol document:
-- -------------- START OF PROTOCOL DOCUMENT CLIPPINGS  ---------------------
-- 
-- The UART communications interface expects a frame size of 8 bits, no parity,
-- one stop bit, and a baud rate of 19200.  
--  
-- A communications delay of several seconds occurs when the Sensor is powered
-- up or power cycled.  This communications delay time is necessary for the
-- sensor to initialize and achieve full functionality. 
-- 
-- 
-- UART Commands from PC to Sensor 
-- Commands sent from a host to the Sensor have the following format: 
--  
-- <flag><address><length><command><additional_data> 
--  
-- where: 
--  
-- <flag>     the hex value 0xFF 
-- <address>  one byte hex value. The byte 0xFE is an addr that sensors respond. 
-- <length>   total length in bytes of the command and additional data 
-- <command>  one byte hex command, values explained below 
-- <add_data> may or may not be applicable, depending upon the command 
-- 
-- 
-- For example, to request Sensor identification, the following command is used: 
-- 
--   0x FF 0xFE   0x02     0x02                 0x03 
--  <flag> <addr> <length> <command> = CMD_READ <additional data> = CO2_PPM 
--                                                                    
-- The length of the command is 0x02, since the command CMD_READ, CO2_PPM
-- consists of the two bytes “0x02 0x01”. 
-- 
--
-- UART Response from Sensor to PC 
-- Responses returned from the Sensor to the host have the following format: 
--  
-- <flag><address><length><response_data> 
--  
-- <flag>      the hex value 0xFF. 
-- <address>   one byte hex value.  The byte 0xFA signifies “to master”
-- <length>    total length in bytes of the response data 
-- <resp_data> may or may not be applicable, depending upon the command 
--  
-- In response to the above identification command CMD_READ CO2_PPM, one Sensor
-- replied with the following byte stream: 
--  
-- 0xFF    0xFA       0x02     0x01  0xD5 
-- <flag>  <address>  <lenght> <resp_data>
--  
-- The length of the response_data  is 2 bytes  (0x02).  The response is 0x01D5, -- so 469 ppm, a normal value in a city. 
--  
-- UART Acknowledgement or <ACK> Reply 
-- Some commands require that a Sensor only confirm that the command was
-- received and the appropriate action was taken. In this case, when a Sensor
-- does not need to return data in response to a command, it will instead reply
-- with an  Acknowledgement response, called an <ACK>.
-- This is a response packet formatted as shown above, but with the <length>
-- equal to 0x00, and no response data present: 
--  
-- 0xFF    0xFA      0x00 
-- <flag>  <address> <length> 
-- 
-- 
-- -------------- END OF PROTOCOL DOCUMENT CLIPPINGS -----------------------
--



const FLAG        = 0xFF
const BRDCST      = 0xFE
const CMD_READ    = 0x02
const CMD_UPDATE  = 0x03
const CMD_STATUS  = 0xB6

const CO2_PPM     = 0x03
const SERIAL      = 0x01
const ELEVATION   = 0x0F

var word co2_global         -- global CO2 value, keeps value when garbage reply

-- returns a word with CO2 concentration in ppm
-- note: if sensor is busy measuring the CO2 values, it will give garbage reply
-- reply is checked for garbage and if so, *PREVIOUS* ppm value is returned
function get_co2_ppm() return word is
   var byte response[7]      -- serial number is 15 ASCII bytes, others shorter
   var byte n                 -- index for response[]
   var word counter           -- for timeout
   var byte char

   serial_hw_write(FLAG)         
   serial_hw_write(BRDCST)      
   serial_hw_write(0x02)            -- length of the remainder of the msg
   serial_hw_write(CMD_READ)
   serial_hw_write(CO2_PPM)

    n = 0
    counter = 0
    while n < 6 loop                -- response expected is 5 bytes
      if serial_hw_read(char) then  -- we try to get 6 to clear any junk
         response[n]= char       
         n = n + 1
      end if
      delay_10us(20)                -- less then half a byte frame
      counter = counter + 1
      if counter > 500 then         -- we wait 100 miliseconds = 170 frames
         n = 6                      -- force end of loop
      end if
   end loop
   
-- -----------------------------------------------------   
-- DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG
-- can be used to see if the sensor is really talking
-- -----------------------------------------------------   

--   lcd_set_cursor(0,16)           -- 3rd line (2nd half of first line)
--   print_byte_hex(lcd, response[0])
--   lcd = " "
--   print_byte_hex(lcd, response[1])
--   lcd = " "
--   print_byte_hex(lcd, response[2])
--   lcd = " "
--   print_byte_hex(lcd, response[3])
--   lcd = " "
--   print_byte_hex(lcd, response[4])
--   lcd = " "
--   print_byte_hex(lcd, response[5])

-- -----------------------------------------------------   
-- DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG
-- -----------------------------------------------------   
   if response[0] == 0xFF  & response[1] == 0xFA then     
      co2_global = response[3]
      co2_global = (co2_global << 8) + response[4]
   end if
   return co2_global  -- if not, send previous value
end function
   
-- returns status byte. bit_0 = error, bit_1 = warmup, 
-- bit_2 = calibration, bit_3 = idle
function get_co2_status() return byte is
   var byte response[7]      -- serial number is 15 ASCII bytes, others shorter
   var byte n                 -- index for response[]
   var word counter           -- for timeout
   var byte char

   serial_hw_write(FLAG)         
   serial_hw_write(BRDCST)      
   serial_hw_write(0x01)        -- length of the remainder of the msg
   serial_hw_write(CMD_STATUS)

   n = 0
   counter = 0
   while n < 5 loop           -- response expected is 4 bytes
      if serial_hw_read(char) then
         response[n]= char
         n = n + 1
      end if
      delay_10us(20)       
      counter = counter + 1
      if counter > 50 then 
         n = 6          
      end if
   end loop
   
   return response[3]            -- bit_0: error, bit_1: warmup, 
end function                  -- bit_2:calibration, bit_3: idle

-- returns 8 byte ASCII string, which should be the same
-- as the number on the sticker
procedure get_co2_serial_number(byte out str[8]) is
   var byte response[21]
   var byte n                 -- index for response[]
   var word counter           -- for timeout
   var byte char

   serial_hw_write(FLAG)         
   serial_hw_write(BRDCST)      
   serial_hw_write(0x02)        -- length of the remainder of the msg
   serial_hw_write(CMD_READ)
   serial_hw_write(SERIAL)

   n = 0
   counter = 0
   while n < 19 loop          -- response expected is 18 bytes
     if serial_hw_read(char) then
        response[n]= char
        n = n + 1
     end if
     delay_10us(20)       
     counter = counter + 1
     if counter > 80 then       -- 27 frames
        n = 20            
     end if
   end loop
   
   n = 0
   for 8 loop                 -- serial no is not zero-padded!
      str[n] = response[n+3]
      n = n + 1
   end loop
      
end procedure      

-- returns programmed elevation above sea level in meters
-- this elevation is uses to calculate CO2 concentration correctly
function get_co2_elevation_m() return word is
   var byte response[15]      -- serial number is 15 ASCII bytes, others shorter
   var byte n                 -- index for response[]
   var word counter           -- for timeout
   var byte char
   var dword elevation_ft
   var word elevation_m  

   serial_hw_write(FLAG)         
   serial_hw_write(BRDCST)      
   serial_hw_write(0x02)        -- length of the remainder of the msg
   serial_hw_write(CMD_READ)
   serial_hw_write(ELEVATION)

   n = 0
   counter = 0
   while n < 5 loop           -- response expected is 5 bytes
      if serial_hw_read(char) then
         response[n]= char
         n = n + 1
      end if
      delay_10us(20)          -- less then half a byte frame
      counter = counter + 1
      if counter > 50 then    -- we wait 17 frames
         n = 6                -- force end of loop
      end if
   end loop
   
   elevation_ft = response[3]
   elevation_ft = (elevation << 8) + dword( response[4])  -- feet above sealevel
   elevation_ft = elevation_ft * 3048                     -- meters * 10_000
   elevation_ft = elevation_ft / 10000                    -- meters above sealevel
   elevation_m = word(elevation_ft)                       -- generates warning
   return elevation_m
end function

-- should set elevation in meters above sea level, not implemented yet
procedure set_co2_elevation_m(word in meters) is
end procedure
