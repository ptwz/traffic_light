-- ===================================================
-- Title: JalV2 device include file for PIC16F946
--
-- Author: Rob Hamerling, Copyright (c) 2008..2012, all rights reserved.
--
-- Adapted-by:
--
-- Revision: $Revision: 1.1 $
--
-- Compiler: 2.4o
--
-- This file is part of jallib  (http://jallib.googlecode.com)
-- Released under the ZLIB license  (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description:
--    Device include file for pic16f946, containing:
--    - Declaration of ports and pins of the chip.
--    - Procedures for shadowing of ports and pins
--      to circumvent the read-modify-write problem.
--    - Symbolic definitions for configuration bits (fuses)
--    - Some device dependent procedures for common
--      operations, like:
--      . enable_digital_io()
--
-- Sources:
--  - x:/mplab886/mplab ide/device/pic16f946.dev
--
-- Notes:
--  - Created with Dev2Jal Rexx script version 0.1.37
--  - File creation date/time: 8 Jul 2012 14:23
--
-- ===================================================
--
const word DEVICE_ID   = 0x1460
const byte PICTYPE[]   = "16F946"
const byte DATASHEET[] = "41250F"
const byte PGMSPEC[]   = "41244F"
--
-- Vdd Range: 2.000-5.500 Nominal: 5.000
-- Vpp Range: 10.000-12.000 Default: 12.000
--
-- ---------------------------------------------------
--
include chipdef_jallib                  -- common constants
--
pragma  target  cpu   PIC_14            -- (banks=4)
pragma  target  chip  16f946
pragma  target  bank  0x0080
pragma  target  page  0x0800
pragma  stack   8
pragma  code    8192
pragma  eeprom  0x2100,256
pragma  ID      0x2000,4
pragma  data    0x20-0x6F,0xA0-0xEF,0x120-0x16F,0x1A0-0x1FD
pragma  shared  0x7E-0x7F
--
var volatile byte _pic_accum shared at 0x7E      -- (compiler)
var volatile byte _pic_isr_w shared at 0x7F      -- (compiler)
--
const word  _FUSES_CT             = 1
const word  _FUSE_BASE            = 0x2007
const word  _FUSES                = 0b_0011_1111_1111_1111
--
-- ------------------------------------------------
var volatile byte   INDF                      at { 0x0,0x80,0x100,0x180 }
var volatile byte   _ind                      at { 0x0,0x80,0x100,0x180 }
-- ------------------------------------------------
var volatile byte   TMR0                      at { 0x1,0x101 }
-- ------------------------------------------------
var volatile byte   PCL                       at { 0x2,0x82,0x102,0x182 }
var volatile byte   _pcl                      at { 0x2,0x82,0x102,0x182 }
-- ------------------------------------------------
var volatile byte   STATUS                    at { 0x3,0x83,0x103,0x183 }
var volatile bit    STATUS_IRP                at STATUS : 7
var volatile bit*2  STATUS_RP                 at STATUS : 5
var volatile bit    STATUS_NTO                at STATUS : 4
var volatile bit    STATUS_NPD                at STATUS : 3
var volatile bit    STATUS_Z                  at STATUS : 2
var volatile bit    STATUS_DC                 at STATUS : 1
var volatile bit    STATUS_C                  at STATUS : 0
var volatile byte   _status                   at { 0x3,0x83,0x103,0x183 }
const        byte   _irp                      =  7
const        byte   _rp1                      =  6
const        byte   _rp0                      =  5
const        byte   _not_to                   =  4
const        byte   _not_pd                   =  3
const        byte   _z                        =  2
const        byte   _dc                       =  1
const        byte   _c                        =  0
-- ------------------------------------------------
var volatile byte   FSR                       at { 0x4,0x84,0x104,0x184 }
var volatile byte   _fsr                      at { 0x4,0x84,0x104,0x184 }
-- ------------------------------------------------
var volatile byte   _PORTA                    at { 0x5 }
--
var          byte   PORTA                     at _PORTA
var          byte   _PORTA_shadow            
--
procedure PORTA'put(byte in x at _PORTA_shadow) is
   pragma inline
   _PORTA = _PORTA_shadow
end procedure
--
procedure PORTA_low'put(byte in x) is
   pragma inline
   _PORTA_shadow = (_PORTA_shadow & 0xF0) | (x & 0x0F)
   _PORTA = _PORTA_shadow
end procedure
function PORTA_low'get() return byte is
   pragma inline
   return (PORTA & 0x0F)
end function
--
procedure PORTA_high'put(byte in x) is
   pragma inline
   _PORTA_shadow = (_PORTA_shadow & 0x0F) | (x << 4)
   _PORTA = _PORTA_shadow
end procedure
function PORTA_high'get() return byte is
   pragma inline
   return (PORTA >> 4)
end function
--
var volatile bit    PORTA_RA7                 at _PORTA : 7
var volatile bit    pin_A7                    at _PORTA : 7
alias               pin_OSC1                  is pin_A7
alias               pin_CLKIN                 is pin_A7
alias               pin_T1OSI                 is pin_A7
--
procedure pin_A7'put(bit in x at _PORTA_shadow : 7) is
   pragma inline
   _PORTA = _PORTA_shadow
end procedure
--
var volatile bit    PORTA_RA6                 at _PORTA : 6
var volatile bit    pin_A6                    at _PORTA : 6
alias               pin_OSC2                  is pin_A6
alias               pin_CLKOUT                is pin_A6
alias               pin_T1OSO                 is pin_A6
--
procedure pin_A6'put(bit in x at _PORTA_shadow : 6) is
   pragma inline
   _PORTA = _PORTA_shadow
end procedure
--
var volatile bit    PORTA_RA5                 at _PORTA : 5
var volatile bit    pin_A5                    at _PORTA : 5
alias               pin_AN4                   is pin_A5
alias               pin_C2OUT                 is pin_A5
alias               pin_SS                    is pin_A5
alias               pin_SEG5                  is pin_A5
--
procedure pin_A5'put(bit in x at _PORTA_shadow : 5) is
   pragma inline
   _PORTA = _PORTA_shadow
end procedure
--
var volatile bit    PORTA_RA4                 at _PORTA : 4
var volatile bit    pin_A4                    at _PORTA : 4
alias               pin_C1OUT                 is pin_A4
alias               pin_T0CKI                 is pin_A4
alias               pin_SEG4                  is pin_A4
--
procedure pin_A4'put(bit in x at _PORTA_shadow : 4) is
   pragma inline
   _PORTA = _PORTA_shadow
end procedure
--
var volatile bit    PORTA_RA3                 at _PORTA : 3
var volatile bit    pin_A3                    at _PORTA : 3
alias               pin_AN3                   is pin_A3
alias               pin_C1_POS                is pin_A3
alias               pin_VREF_POS              is pin_A3
alias               pin_SEG15                 is pin_A3
--
procedure pin_A3'put(bit in x at _PORTA_shadow : 3) is
   pragma inline
   _PORTA = _PORTA_shadow
end procedure
--
var volatile bit    PORTA_RA2                 at _PORTA : 2
var volatile bit    pin_A2                    at _PORTA : 2
alias               pin_AN2                   is pin_A2
alias               pin_C2_POS                is pin_A2
alias               pin_VREF_NEG              is pin_A2
alias               pin_COM2                  is pin_A2
--
procedure pin_A2'put(bit in x at _PORTA_shadow : 2) is
   pragma inline
   _PORTA = _PORTA_shadow
end procedure
--
var volatile bit    PORTA_RA1                 at _PORTA : 1
var volatile bit    pin_A1                    at _PORTA : 1
alias               pin_AN1                   is pin_A1
alias               pin_C2_NEG                is pin_A1
alias               pin_SEG7                  is pin_A1
--
procedure pin_A1'put(bit in x at _PORTA_shadow : 1) is
   pragma inline
   _PORTA = _PORTA_shadow
end procedure
--
var volatile bit    PORTA_RA0                 at _PORTA : 0
var volatile bit    pin_A0                    at _PORTA : 0
alias               pin_AN0                   is pin_A0
alias               pin_C1_NEG                is pin_A0
alias               pin_SEG12                 is pin_A0
--
procedure pin_A0'put(bit in x at _PORTA_shadow : 0) is
   pragma inline
   _PORTA = _PORTA_shadow
end procedure
--
-- ------------------------------------------------
var volatile byte   _PORTB                    at { 0x6,0x106 }
--
var          byte   PORTB                     at _PORTB
var          byte   _PORTB_shadow            
--
procedure PORTB'put(byte in x at _PORTB_shadow) is
   pragma inline
   _PORTB = _PORTB_shadow
end procedure
--
procedure PORTB_low'put(byte in x) is
   pragma inline
   _PORTB_shadow = (_PORTB_shadow & 0xF0) | (x & 0x0F)
   _PORTB = _PORTB_shadow
end procedure
function PORTB_low'get() return byte is
   pragma inline
   return (PORTB & 0x0F)
end function
--
procedure PORTB_high'put(byte in x) is
   pragma inline
   _PORTB_shadow = (_PORTB_shadow & 0x0F) | (x << 4)
   _PORTB = _PORTB_shadow
end procedure
function PORTB_high'get() return byte is
   pragma inline
   return (PORTB >> 4)
end function
--
var volatile bit    PORTB_RB7                 at _PORTB : 7
var volatile bit    pin_B7                    at _PORTB : 7
alias               pin_ICSPDAT               is pin_B7
alias               pin_ICDDAT                is pin_B7
alias               pin_SEG13                 is pin_B7
--
procedure pin_B7'put(bit in x at _PORTB_shadow : 7) is
   pragma inline
   _PORTB = _PORTB_shadow
end procedure
--
var volatile bit    PORTB_RB6                 at _PORTB : 6
var volatile bit    pin_B6                    at _PORTB : 6
alias               pin_ICSPCLK               is pin_B6
alias               pin_ICDCK                 is pin_B6
alias               pin_SEG14                 is pin_B6
--
procedure pin_B6'put(bit in x at _PORTB_shadow : 6) is
   pragma inline
   _PORTB = _PORTB_shadow
end procedure
--
var volatile bit    PORTB_RB5                 at _PORTB : 5
var volatile bit    pin_B5                    at _PORTB : 5
alias               pin_COM1                  is pin_B5
--
procedure pin_B5'put(bit in x at _PORTB_shadow : 5) is
   pragma inline
   _PORTB = _PORTB_shadow
end procedure
--
var volatile bit    PORTB_RB4                 at _PORTB : 4
var volatile bit    pin_B4                    at _PORTB : 4
alias               pin_COM0                  is pin_B4
--
procedure pin_B4'put(bit in x at _PORTB_shadow : 4) is
   pragma inline
   _PORTB = _PORTB_shadow
end procedure
--
var volatile bit    PORTB_RB3                 at _PORTB : 3
var volatile bit    pin_B3                    at _PORTB : 3
alias               pin_SEG3                  is pin_B3
--
procedure pin_B3'put(bit in x at _PORTB_shadow : 3) is
   pragma inline
   _PORTB = _PORTB_shadow
end procedure
--
var volatile bit    PORTB_RB2                 at _PORTB : 2
var volatile bit    pin_B2                    at _PORTB : 2
alias               pin_SEG2                  is pin_B2
--
procedure pin_B2'put(bit in x at _PORTB_shadow : 2) is
   pragma inline
   _PORTB = _PORTB_shadow
end procedure
--
var volatile bit    PORTB_RB1                 at _PORTB : 1
var volatile bit    pin_B1                    at _PORTB : 1
alias               pin_SEG1                  is pin_B1
--
procedure pin_B1'put(bit in x at _PORTB_shadow : 1) is
   pragma inline
   _PORTB = _PORTB_shadow
end procedure
--
var volatile bit    PORTB_RB0                 at _PORTB : 0
var volatile bit    pin_B0                    at _PORTB : 0
alias               pin_SEG0                  is pin_B0
--
procedure pin_B0'put(bit in x at _PORTB_shadow : 0) is
   pragma inline
   _PORTB = _PORTB_shadow
end procedure
--
-- ------------------------------------------------
var volatile byte   _PORTC                    at { 0x7 }
--
var          byte   PORTC                     at _PORTC
var          byte   _PORTC_shadow            
--
procedure PORTC'put(byte in x at _PORTC_shadow) is
   pragma inline
   _PORTC = _PORTC_shadow
end procedure
--
procedure PORTC_low'put(byte in x) is
   pragma inline
   _PORTC_shadow = (_PORTC_shadow & 0xF0) | (x & 0x0F)
   _PORTC = _PORTC_shadow
end procedure
function PORTC_low'get() return byte is
   pragma inline
   return (PORTC & 0x0F)
end function
--
procedure PORTC_high'put(byte in x) is
   pragma inline
   _PORTC_shadow = (_PORTC_shadow & 0x0F) | (x << 4)
   _PORTC = _PORTC_shadow
end procedure
function PORTC_high'get() return byte is
   pragma inline
   return (PORTC >> 4)
end function
--
var volatile bit    PORTC_RC7                 at _PORTC : 7
var volatile bit    pin_C7                    at _PORTC : 7
alias               pin_RX                    is pin_C7
alias               pin_DT                    is pin_C7
alias               pin_SDI                   is pin_C7
alias               pin_SDA                   is pin_C7
alias               pin_SEG8                  is pin_C7
--
procedure pin_C7'put(bit in x at _PORTC_shadow : 7) is
   pragma inline
   _PORTC = _PORTC_shadow
end procedure
--
var volatile bit    PORTC_RC6                 at _PORTC : 6
var volatile bit    pin_C6                    at _PORTC : 6
alias               pin_TX                    is pin_C6
alias               pin_CK                    is pin_C6
alias               pin_SCK                   is pin_C6
alias               pin_SCL                   is pin_C6
alias               pin_SEG9                  is pin_C6
--
procedure pin_C6'put(bit in x at _PORTC_shadow : 6) is
   pragma inline
   _PORTC = _PORTC_shadow
end procedure
--
var volatile bit    PORTC_RC5                 at _PORTC : 5
var volatile bit    pin_C5                    at _PORTC : 5
alias               pin_T1CKI                 is pin_C5
alias               pin_CCP1                  is pin_C5
alias               pin_SEG10                 is pin_C5
--
procedure pin_C5'put(bit in x at _PORTC_shadow : 5) is
   pragma inline
   _PORTC = _PORTC_shadow
end procedure
--
var volatile bit    PORTC_RC4                 at _PORTC : 4
var volatile bit    pin_C4                    at _PORTC : 4
alias               pin_T1G                   is pin_C4
alias               pin_SDO                   is pin_C4
alias               pin_SEG11                 is pin_C4
--
procedure pin_C4'put(bit in x at _PORTC_shadow : 4) is
   pragma inline
   _PORTC = _PORTC_shadow
end procedure
--
var volatile bit    PORTC_RC3                 at _PORTC : 3
var volatile bit    pin_C3                    at _PORTC : 3
alias               pin_SEG6                  is pin_C3
--
procedure pin_C3'put(bit in x at _PORTC_shadow : 3) is
   pragma inline
   _PORTC = _PORTC_shadow
end procedure
--
var volatile bit    PORTC_RC2                 at _PORTC : 2
var volatile bit    pin_C2                    at _PORTC : 2
alias               pin_VLCD3                 is pin_C2
--
procedure pin_C2'put(bit in x at _PORTC_shadow : 2) is
   pragma inline
   _PORTC = _PORTC_shadow
end procedure
--
var volatile bit    PORTC_RC1                 at _PORTC : 1
var volatile bit    pin_C1                    at _PORTC : 1
alias               pin_VLCD2                 is pin_C1
--
procedure pin_C1'put(bit in x at _PORTC_shadow : 1) is
   pragma inline
   _PORTC = _PORTC_shadow
end procedure
--
var volatile bit    PORTC_RC0                 at _PORTC : 0
var volatile bit    pin_C0                    at _PORTC : 0
alias               pin_VLCD1                 is pin_C0
--
procedure pin_C0'put(bit in x at _PORTC_shadow : 0) is
   pragma inline
   _PORTC = _PORTC_shadow
end procedure
--
-- ------------------------------------------------
var volatile byte   _PORTD                    at { 0x8 }
--
var          byte   PORTD                     at _PORTD
var          byte   _PORTD_shadow            
--
procedure PORTD'put(byte in x at _PORTD_shadow) is
   pragma inline
   _PORTD = _PORTD_shadow
end procedure
--
procedure PORTD_low'put(byte in x) is
   pragma inline
   _PORTD_shadow = (_PORTD_shadow & 0xF0) | (x & 0x0F)
   _PORTD = _PORTD_shadow
end procedure
function PORTD_low'get() return byte is
   pragma inline
   return (PORTD & 0x0F)
end function
--
procedure PORTD_high'put(byte in x) is
   pragma inline
   _PORTD_shadow = (_PORTD_shadow & 0x0F) | (x << 4)
   _PORTD = _PORTD_shadow
end procedure
function PORTD_high'get() return byte is
   pragma inline
   return (PORTD >> 4)
end function
--
var volatile bit    PORTD_RD7                 at _PORTD : 7
var volatile bit    pin_D7                    at _PORTD : 7
alias               pin_SEG20                 is pin_D7
--
procedure pin_D7'put(bit in x at _PORTD_shadow : 7) is
   pragma inline
   _PORTD = _PORTD_shadow
end procedure
--
var volatile bit    PORTD_RD6                 at _PORTD : 6
var volatile bit    pin_D6                    at _PORTD : 6
alias               pin_SEG19                 is pin_D6
--
procedure pin_D6'put(bit in x at _PORTD_shadow : 6) is
   pragma inline
   _PORTD = _PORTD_shadow
end procedure
--
var volatile bit    PORTD_RD5                 at _PORTD : 5
var volatile bit    pin_D5                    at _PORTD : 5
alias               pin_SEG18                 is pin_D5
--
procedure pin_D5'put(bit in x at _PORTD_shadow : 5) is
   pragma inline
   _PORTD = _PORTD_shadow
end procedure
--
var volatile bit    PORTD_RD4                 at _PORTD : 4
var volatile bit    pin_D4                    at _PORTD : 4
alias               pin_SEG17                 is pin_D4
--
procedure pin_D4'put(bit in x at _PORTD_shadow : 4) is
   pragma inline
   _PORTD = _PORTD_shadow
end procedure
--
var volatile bit    PORTD_RD3                 at _PORTD : 3
var volatile bit    pin_D3                    at _PORTD : 3
alias               pin_SEG16                 is pin_D3
--
procedure pin_D3'put(bit in x at _PORTD_shadow : 3) is
   pragma inline
   _PORTD = _PORTD_shadow
end procedure
--
var volatile bit    PORTD_RD2                 at _PORTD : 2
var volatile bit    pin_D2                    at _PORTD : 2
alias               pin_CCP2                  is pin_D2
--
procedure pin_D2'put(bit in x at _PORTD_shadow : 2) is
   pragma inline
   _PORTD = _PORTD_shadow
end procedure
--
var volatile bit    PORTD_RD1                 at _PORTD : 1
var volatile bit    pin_D1                    at _PORTD : 1
--
procedure pin_D1'put(bit in x at _PORTD_shadow : 1) is
   pragma inline
   _PORTD = _PORTD_shadow
end procedure
--
var volatile bit    PORTD_RD0                 at _PORTD : 0
var volatile bit    pin_D0                    at _PORTD : 0
alias               pin_COM3                  is pin_D0
--
procedure pin_D0'put(bit in x at _PORTD_shadow : 0) is
   pragma inline
   _PORTD = _PORTD_shadow
end procedure
--
-- ------------------------------------------------
var volatile byte   _PORTE                    at { 0x9 }
--
var          byte   PORTE                     at _PORTE
var          byte   _PORTE_shadow            
--
procedure PORTE'put(byte in x at _PORTE_shadow) is
   pragma inline
   _PORTE = _PORTE_shadow
end procedure
--
procedure PORTE_low'put(byte in x) is
   pragma inline
   _PORTE_shadow = (_PORTE_shadow & 0xF0) | (x & 0x0F)
   _PORTE = _PORTE_shadow
end procedure
function PORTE_low'get() return byte is
   pragma inline
   return (PORTE & 0x0F)
end function
--
procedure PORTE_high'put(byte in x) is
   pragma inline
   _PORTE_shadow = (_PORTE_shadow & 0x0F) | (x << 4)
   _PORTE = _PORTE_shadow
end procedure
function PORTE_high'get() return byte is
   pragma inline
   return (PORTE >> 4)
end function
--
var volatile bit    PORTE_RE7                 at _PORTE : 7
var volatile bit    pin_E7                    at _PORTE : 7
alias               pin_SEG27                 is pin_E7
--
procedure pin_E7'put(bit in x at _PORTE_shadow : 7) is
   pragma inline
   _PORTE = _PORTE_shadow
end procedure
--
var volatile bit    PORTE_RE6                 at _PORTE : 6
var volatile bit    pin_E6                    at _PORTE : 6
alias               pin_SEG26                 is pin_E6
--
procedure pin_E6'put(bit in x at _PORTE_shadow : 6) is
   pragma inline
   _PORTE = _PORTE_shadow
end procedure
--
var volatile bit    PORTE_RE5                 at _PORTE : 5
var volatile bit    pin_E5                    at _PORTE : 5
alias               pin_SEG25                 is pin_E5
--
procedure pin_E5'put(bit in x at _PORTE_shadow : 5) is
   pragma inline
   _PORTE = _PORTE_shadow
end procedure
--
var volatile bit    PORTE_RE4                 at _PORTE : 4
var volatile bit    pin_E4                    at _PORTE : 4
alias               pin_SEG24                 is pin_E4
--
procedure pin_E4'put(bit in x at _PORTE_shadow : 4) is
   pragma inline
   _PORTE = _PORTE_shadow
end procedure
--
var volatile bit    PORTE_RE3                 at _PORTE : 3
var volatile bit    pin_E3                    at _PORTE : 3
alias               pin_MCLR                  is pin_E3
alias               pin_VPP                   is pin_E3
--
procedure pin_E3'put(bit in x at _PORTE_shadow : 3) is
   pragma inline
   _PORTE = _PORTE_shadow
end procedure
--
var volatile bit    PORTE_RE2                 at _PORTE : 2
var volatile bit    pin_E2                    at _PORTE : 2
alias               pin_AN7                   is pin_E2
alias               pin_SEG23                 is pin_E2
--
procedure pin_E2'put(bit in x at _PORTE_shadow : 2) is
   pragma inline
   _PORTE = _PORTE_shadow
end procedure
--
var volatile bit    PORTE_RE1                 at _PORTE : 1
var volatile bit    pin_E1                    at _PORTE : 1
alias               pin_AN6                   is pin_E1
alias               pin_SEG22                 is pin_E1
--
procedure pin_E1'put(bit in x at _PORTE_shadow : 1) is
   pragma inline
   _PORTE = _PORTE_shadow
end procedure
--
var volatile bit    PORTE_RE0                 at _PORTE : 0
var volatile bit    pin_E0                    at _PORTE : 0
alias               pin_AN5                   is pin_E0
alias               pin_SEG21                 is pin_E0
--
procedure pin_E0'put(bit in x at _PORTE_shadow : 0) is
   pragma inline
   _PORTE = _PORTE_shadow
end procedure
--
-- ------------------------------------------------
var volatile byte   PCLATH                    at { 0xA,0x8A,0x10A,0x18A }
var volatile bit*5  PCLATH_PCLATH             at PCLATH : 0
var volatile byte   _pclath                   at { 0xA,0x8A,0x10A,0x18A }
-- ------------------------------------------------
var volatile byte   INTCON                    at { 0xB,0x8B,0x10B,0x18B }
var volatile bit    INTCON_GIE                at INTCON : 7
var volatile bit    INTCON_PEIE               at INTCON : 6
var volatile bit    INTCON_TMR0IE             at INTCON : 5
var volatile bit    INTCON_INTE               at INTCON : 4
var volatile bit    INTCON_RBIE               at INTCON : 3
var volatile bit    INTCON_TMR0IF             at INTCON : 2
var volatile bit    INTCON_INTF               at INTCON : 1
var volatile bit    INTCON_RBIF               at INTCON : 0
-- ------------------------------------------------
var volatile byte   PIR1                      at { 0xC }
var volatile bit    PIR1_EEIF                 at PIR1 : 7
var volatile bit    PIR1_ADIF                 at PIR1 : 6
var volatile bit    PIR1_RCIF                 at PIR1 : 5
var volatile bit    PIR1_TXIF                 at PIR1 : 4
var volatile bit    PIR1_SSPIF                at PIR1 : 3
var volatile bit    PIR1_CCP1IF               at PIR1 : 2
var volatile bit    PIR1_TMR2IF               at PIR1 : 1
var volatile bit    PIR1_TMR1IF               at PIR1 : 0
-- ------------------------------------------------
var volatile byte   PIR2                      at { 0xD }
var volatile bit    PIR2_OSFIF                at PIR2 : 7
var volatile bit    PIR2_C2IF                 at PIR2 : 6
var volatile bit    PIR2_C1IF                 at PIR2 : 5
var volatile bit    PIR2_LCDIF                at PIR2 : 4
var volatile bit    PIR2_LVDIF                at PIR2 : 2
var volatile bit    PIR2_CCP2IF               at PIR2 : 0
-- ------------------------------------------------
var volatile word   TMR1                      at { 0xE }
-- ------------------------------------------------
var volatile byte   TMR1L                     at { 0xE }
-- ------------------------------------------------
var volatile byte   TMR1H                     at { 0xF }
-- ------------------------------------------------
var volatile byte   T1CON                     at { 0x10 }
var volatile bit    T1CON_T1GINV              at T1CON : 7
var volatile bit    T1CON_TMR1GE              at T1CON : 6
var volatile bit*2  T1CON_T1CKPS              at T1CON : 4
var volatile bit    T1CON_T1OSCEN             at T1CON : 3
var volatile bit    T1CON_NT1SYNC             at T1CON : 2
var volatile bit    T1CON_TMR1CS              at T1CON : 1
var volatile bit    T1CON_TMR1ON              at T1CON : 0
-- ------------------------------------------------
var volatile byte   TMR2                      at { 0x11 }
-- ------------------------------------------------
var volatile byte   T2CON                     at { 0x12 }
var volatile bit*4  T2CON_TOUTPS              at T2CON : 3
var volatile bit    T2CON_TMR2ON              at T2CON : 2
var volatile bit*2  T2CON_T2CKPS              at T2CON : 0
-- ------------------------------------------------
var volatile byte   SSPBUF                    at { 0x13 }
-- ------------------------------------------------
var volatile byte   SSPCON                    at { 0x14 }
var volatile bit    SSPCON_WCOL               at SSPCON : 7
var volatile bit    SSPCON_SSPOV              at SSPCON : 6
var volatile bit    SSPCON_SSPEN              at SSPCON : 5
var volatile bit    SSPCON_CKP                at SSPCON : 4
var volatile bit*4  SSPCON_SSPM               at SSPCON : 0
--
alias               SSPCON1                   is SSPCON
alias               SSPCON1_WCOL              is SSPCON_WCOL
alias               SSPCON1_SSPOV             is SSPCON_SSPOV
alias               SSPCON1_SSPEN             is SSPCON_SSPEN
alias               SSPCON1_CKP               is SSPCON_CKP
alias               SSPCON1_SSPM              is SSPCON_SSPM
-- ------------------------------------------------
var volatile word   CCPR1                     at { 0x15 }
-- ------------------------------------------------
var volatile byte   CCPR1L                    at { 0x15 }
-- ------------------------------------------------
var volatile byte   CCPR1H                    at { 0x16 }
-- ------------------------------------------------
var volatile byte   CCP1CON                   at { 0x17 }
var volatile bit*2  CCP1CON_DC1B              at CCP1CON : 4
var volatile bit*4  CCP1CON_CCP1M             at CCP1CON : 0
-- ------------------------------------------------
var volatile byte   RCSTA                     at { 0x18 }
var volatile bit    RCSTA_SPEN                at RCSTA : 7
var volatile bit    RCSTA_RX9                 at RCSTA : 6
var volatile bit    RCSTA_SREN                at RCSTA : 5
var volatile bit    RCSTA_CREN                at RCSTA : 4
var volatile bit    RCSTA_ADDEN               at RCSTA : 3
var volatile bit    RCSTA_FERR                at RCSTA : 2
var volatile bit    RCSTA_OERR                at RCSTA : 1
var volatile bit    RCSTA_RX9D                at RCSTA : 0
-- ------------------------------------------------
var volatile byte   TXREG                     at { 0x19 }
-- ------------------------------------------------
var volatile byte   RCREG                     at { 0x1A }
-- ------------------------------------------------
var volatile word   CCPR2                     at { 0x1B }
-- ------------------------------------------------
var volatile byte   CCPR2L                    at { 0x1B }
-- ------------------------------------------------
var volatile byte   CCPR2H                    at { 0x1C }
-- ------------------------------------------------
var volatile byte   CCP2CON                   at { 0x1D }
var volatile bit*2  CCP2CON_DC2B              at CCP2CON : 4
var volatile bit*4  CCP2CON_CCP2M             at CCP2CON : 0
-- ------------------------------------------------
var volatile byte   ADRESH                    at { 0x1E }
-- ------------------------------------------------
var volatile byte   ADCON0                    at { 0x1F }
var volatile bit    ADCON0_ADFM               at ADCON0 : 7
var volatile bit    ADCON0_VCFG1              at ADCON0 : 6
var volatile bit    ADCON0_VCFG0              at ADCON0 : 5
var volatile bit*2  ADCON0_VCFG               at ADCON0 : 5
var volatile bit*3  ADCON0_CHS                at ADCON0 : 2
var volatile bit    ADCON0_GO                 at ADCON0 : 1
var volatile bit    ADCON0_NDONE              at ADCON0 : 1
var volatile bit    ADCON0_ADON               at ADCON0 : 0
-- ------------------------------------------------
var volatile byte   OPTION_REG                at { 0x81,0x181 }
var volatile bit    OPTION_REG_NRBPU          at OPTION_REG : 7
var volatile bit    OPTION_REG_INTEDG         at OPTION_REG : 6
var volatile bit    OPTION_REG_T0CS           at OPTION_REG : 5
alias               T0CON_T0CS                is OPTION_REG_T0CS
var volatile bit    OPTION_REG_T0SE           at OPTION_REG : 4
alias               T0CON_T0SE                is OPTION_REG_T0SE
var volatile bit    OPTION_REG_PSA            at OPTION_REG : 3
alias               T0CON_PSA                 is OPTION_REG_PSA
var volatile bit*3  OPTION_REG_PS             at OPTION_REG : 0
alias               T0CON_T0PS                is OPTION_REG_PS
-- ------------------------------------------------
var volatile byte   TRISA                     at { 0x85 }
alias               PORTA_direction           is TRISA
--
procedure PORTA_low_direction'put(byte in x) is
   pragma inline
   TRISA = (TRISA & 0xF0) | (x & 0x0F)
end procedure
function PORTA_low_direction'get() return byte is
   pragma inline
   return (TRISA & 0x0F)
end function
--
procedure PORTA_high_direction'put(byte in x) is
   pragma inline
   TRISA = (TRISA & 0x0F) | (x << 4)
end procedure
function PORTA_high_direction'get() return byte is
   pragma inline
   return (TRISA >> 4)
end function
--
var volatile bit    TRISA_TRISA7              at TRISA : 7
alias               pin_A7_direction          is TRISA_TRISA7
alias               pin_OSC1_direction        is pin_A7_direction
alias               pin_CLKIN_direction       is pin_A7_direction
alias               pin_T1OSI_direction       is pin_A7_direction
--
var volatile bit    TRISA_TRISA6              at TRISA : 6
alias               pin_A6_direction          is TRISA_TRISA6
alias               pin_OSC2_direction        is pin_A6_direction
alias               pin_CLKOUT_direction      is pin_A6_direction
alias               pin_T1OSO_direction       is pin_A6_direction
--
var volatile bit    TRISA_TRISA5              at TRISA : 5
alias               pin_A5_direction          is TRISA_TRISA5
alias               pin_AN4_direction         is pin_A5_direction
alias               pin_C2OUT_direction       is pin_A5_direction
alias               pin_SS_direction          is pin_A5_direction
alias               pin_SEG5_direction        is pin_A5_direction
--
var volatile bit    TRISA_TRISA4              at TRISA : 4
alias               pin_A4_direction          is TRISA_TRISA4
alias               pin_C1OUT_direction       is pin_A4_direction
alias               pin_T0CKI_direction       is pin_A4_direction
alias               pin_SEG4_direction        is pin_A4_direction
--
var volatile bit    TRISA_TRISA3              at TRISA : 3
alias               pin_A3_direction          is TRISA_TRISA3
alias               pin_AN3_direction         is pin_A3_direction
alias               pin_C1_POS_direction      is pin_A3_direction
alias               pin_VREF_POS_direction    is pin_A3_direction
alias               pin_SEG15_direction       is pin_A3_direction
--
var volatile bit    TRISA_TRISA2              at TRISA : 2
alias               pin_A2_direction          is TRISA_TRISA2
alias               pin_AN2_direction         is pin_A2_direction
alias               pin_C2_POS_direction      is pin_A2_direction
alias               pin_VREF_NEG_direction    is pin_A2_direction
alias               pin_COM2_direction        is pin_A2_direction
--
var volatile bit    TRISA_TRISA1              at TRISA : 1
alias               pin_A1_direction          is TRISA_TRISA1
alias               pin_AN1_direction         is pin_A1_direction
alias               pin_C2_NEG_direction      is pin_A1_direction
alias               pin_SEG7_direction        is pin_A1_direction
--
var volatile bit    TRISA_TRISA0              at TRISA : 0
alias               pin_A0_direction          is TRISA_TRISA0
alias               pin_AN0_direction         is pin_A0_direction
alias               pin_C1_NEG_direction      is pin_A0_direction
alias               pin_SEG12_direction       is pin_A0_direction
--
-- ------------------------------------------------
var volatile byte   TRISB                     at { 0x86,0x186 }
alias               PORTB_direction           is TRISB
--
procedure PORTB_low_direction'put(byte in x) is
   pragma inline
   TRISB = (TRISB & 0xF0) | (x & 0x0F)
end procedure
function PORTB_low_direction'get() return byte is
   pragma inline
   return (TRISB & 0x0F)
end function
--
procedure PORTB_high_direction'put(byte in x) is
   pragma inline
   TRISB = (TRISB & 0x0F) | (x << 4)
end procedure
function PORTB_high_direction'get() return byte is
   pragma inline
   return (TRISB >> 4)
end function
--
var volatile bit    TRISB_TRISB7              at TRISB : 7
alias               pin_B7_direction          is TRISB_TRISB7
alias               pin_ICSPDAT_direction     is pin_B7_direction
alias               pin_ICDDAT_direction      is pin_B7_direction
alias               pin_SEG13_direction       is pin_B7_direction
--
var volatile bit    TRISB_TRISB6              at TRISB : 6
alias               pin_B6_direction          is TRISB_TRISB6
alias               pin_ICSPCLK_direction     is pin_B6_direction
alias               pin_ICDCK_direction       is pin_B6_direction
alias               pin_SEG14_direction       is pin_B6_direction
--
var volatile bit    TRISB_TRISB5              at TRISB : 5
alias               pin_B5_direction          is TRISB_TRISB5
alias               pin_COM1_direction        is pin_B5_direction
--
var volatile bit    TRISB_TRISB4              at TRISB : 4
alias               pin_B4_direction          is TRISB_TRISB4
alias               pin_COM0_direction        is pin_B4_direction
--
var volatile bit    TRISB_TRISB3              at TRISB : 3
alias               pin_B3_direction          is TRISB_TRISB3
alias               pin_SEG3_direction        is pin_B3_direction
--
var volatile bit    TRISB_TRISB2              at TRISB : 2
alias               pin_B2_direction          is TRISB_TRISB2
alias               pin_SEG2_direction        is pin_B2_direction
--
var volatile bit    TRISB_TRISB1              at TRISB : 1
alias               pin_B1_direction          is TRISB_TRISB1
alias               pin_SEG1_direction        is pin_B1_direction
--
var volatile bit    TRISB_TRISB0              at TRISB : 0
alias               pin_B0_direction          is TRISB_TRISB0
alias               pin_SEG0_direction        is pin_B0_direction
--
-- ------------------------------------------------
var volatile byte   TRISC                     at { 0x87 }
alias               PORTC_direction           is TRISC
--
procedure PORTC_low_direction'put(byte in x) is
   pragma inline
   TRISC = (TRISC & 0xF0) | (x & 0x0F)
end procedure
function PORTC_low_direction'get() return byte is
   pragma inline
   return (TRISC & 0x0F)
end function
--
procedure PORTC_high_direction'put(byte in x) is
   pragma inline
   TRISC = (TRISC & 0x0F) | (x << 4)
end procedure
function PORTC_high_direction'get() return byte is
   pragma inline
   return (TRISC >> 4)
end function
--
var volatile bit    TRISC_TRISC7              at TRISC : 7
alias               pin_C7_direction          is TRISC_TRISC7
alias               pin_RX_direction          is pin_C7_direction
alias               pin_DT_direction          is pin_C7_direction
alias               pin_SDI_direction         is pin_C7_direction
alias               pin_SDA_direction         is pin_C7_direction
alias               pin_SEG8_direction        is pin_C7_direction
--
var volatile bit    TRISC_TRISC6              at TRISC : 6
alias               pin_C6_direction          is TRISC_TRISC6
alias               pin_TX_direction          is pin_C6_direction
alias               pin_CK_direction          is pin_C6_direction
alias               pin_SCK_direction         is pin_C6_direction
alias               pin_SCL_direction         is pin_C6_direction
alias               pin_SEG9_direction        is pin_C6_direction
--
var volatile bit    TRISC_TRISC5              at TRISC : 5
alias               pin_C5_direction          is TRISC_TRISC5
alias               pin_T1CKI_direction       is pin_C5_direction
alias               pin_CCP1_direction        is pin_C5_direction
alias               pin_SEG10_direction       is pin_C5_direction
--
var volatile bit    TRISC_TRISC4              at TRISC : 4
alias               pin_C4_direction          is TRISC_TRISC4
alias               pin_T1G_direction         is pin_C4_direction
alias               pin_SDO_direction         is pin_C4_direction
alias               pin_SEG11_direction       is pin_C4_direction
--
var volatile bit    TRISC_TRISC3              at TRISC : 3
alias               pin_C3_direction          is TRISC_TRISC3
alias               pin_SEG6_direction        is pin_C3_direction
--
var volatile bit    TRISC_TRISC2              at TRISC : 2
alias               pin_C2_direction          is TRISC_TRISC2
alias               pin_VLCD3_direction       is pin_C2_direction
--
var volatile bit    TRISC_TRISC1              at TRISC : 1
alias               pin_C1_direction          is TRISC_TRISC1
alias               pin_VLCD2_direction       is pin_C1_direction
--
var volatile bit    TRISC_TRISC0              at TRISC : 0
alias               pin_C0_direction          is TRISC_TRISC0
alias               pin_VLCD1_direction       is pin_C0_direction
--
-- ------------------------------------------------
var volatile byte   TRISD                     at { 0x88 }
alias               PORTD_direction           is TRISD
--
procedure PORTD_low_direction'put(byte in x) is
   pragma inline
   TRISD = (TRISD & 0xF0) | (x & 0x0F)
end procedure
function PORTD_low_direction'get() return byte is
   pragma inline
   return (TRISD & 0x0F)
end function
--
procedure PORTD_high_direction'put(byte in x) is
   pragma inline
   TRISD = (TRISD & 0x0F) | (x << 4)
end procedure
function PORTD_high_direction'get() return byte is
   pragma inline
   return (TRISD >> 4)
end function
--
var volatile bit    TRISD_TRISD7              at TRISD : 7
alias               pin_D7_direction          is TRISD_TRISD7
alias               pin_SEG20_direction       is pin_D7_direction
--
var volatile bit    TRISD_TRISD6              at TRISD : 6
alias               pin_D6_direction          is TRISD_TRISD6
alias               pin_SEG19_direction       is pin_D6_direction
--
var volatile bit    TRISD_TRISD5              at TRISD : 5
alias               pin_D5_direction          is TRISD_TRISD5
alias               pin_SEG18_direction       is pin_D5_direction
--
var volatile bit    TRISD_TRISD4              at TRISD : 4
alias               pin_D4_direction          is TRISD_TRISD4
alias               pin_SEG17_direction       is pin_D4_direction
--
var volatile bit    TRISD_TRISD3              at TRISD : 3
alias               pin_D3_direction          is TRISD_TRISD3
alias               pin_SEG16_direction       is pin_D3_direction
--
var volatile bit    TRISD_TRISD2              at TRISD : 2
alias               pin_D2_direction          is TRISD_TRISD2
alias               pin_CCP2_direction        is pin_D2_direction
--
var volatile bit    TRISD_TRISD1              at TRISD : 1
alias               pin_D1_direction          is TRISD_TRISD1
--
var volatile bit    TRISD_TRISD0              at TRISD : 0
alias               pin_D0_direction          is TRISD_TRISD0
alias               pin_COM3_direction        is pin_D0_direction
--
-- ------------------------------------------------
var volatile byte   TRISE                     at { 0x89 }
alias               PORTE_direction           is TRISE
--
procedure PORTE_low_direction'put(byte in x) is
   pragma inline
   TRISE = (TRISE & 0xF0) | (x & 0x0F)
end procedure
function PORTE_low_direction'get() return byte is
   pragma inline
   return (TRISE & 0x0F)
end function
--
procedure PORTE_high_direction'put(byte in x) is
   pragma inline
   TRISE = (TRISE & 0x0F) | (x << 4)
end procedure
function PORTE_high_direction'get() return byte is
   pragma inline
   return (TRISE >> 4)
end function
--
var volatile bit    TRISE_TRISE7              at TRISE : 7
alias               pin_E7_direction          is TRISE_TRISE7
alias               pin_SEG27_direction       is pin_E7_direction
--
var volatile bit    TRISE_TRISE6              at TRISE : 6
alias               pin_E6_direction          is TRISE_TRISE6
alias               pin_SEG26_direction       is pin_E6_direction
--
var volatile bit    TRISE_TRISE5              at TRISE : 5
alias               pin_E5_direction          is TRISE_TRISE5
alias               pin_SEG25_direction       is pin_E5_direction
--
var volatile bit    TRISE_TRISE4              at TRISE : 4
alias               pin_E4_direction          is TRISE_TRISE4
alias               pin_SEG24_direction       is pin_E4_direction
--
var volatile bit    TRISE_TRISE3              at TRISE : 3
alias               pin_E3_direction          is TRISE_TRISE3
alias               pin_MCLR_direction        is pin_E3_direction
alias               pin_VPP_direction         is pin_E3_direction
--
var volatile bit    TRISE_TRISE2              at TRISE : 2
alias               pin_E2_direction          is TRISE_TRISE2
alias               pin_AN7_direction         is pin_E2_direction
alias               pin_SEG23_direction       is pin_E2_direction
--
var volatile bit    TRISE_TRISE1              at TRISE : 1
alias               pin_E1_direction          is TRISE_TRISE1
alias               pin_AN6_direction         is pin_E1_direction
alias               pin_SEG22_direction       is pin_E1_direction
--
var volatile bit    TRISE_TRISE0              at TRISE : 0
alias               pin_E0_direction          is TRISE_TRISE0
alias               pin_AN5_direction         is pin_E0_direction
alias               pin_SEG21_direction       is pin_E0_direction
--
-- ------------------------------------------------
var volatile byte   PIE1                      at { 0x8C }
var volatile bit    PIE1_EEIE                 at PIE1 : 7
var volatile bit    PIE1_ADIE                 at PIE1 : 6
var volatile bit    PIE1_RCIE                 at PIE1 : 5
var volatile bit    PIE1_TXIE                 at PIE1 : 4
var volatile bit    PIE1_SSPIE                at PIE1 : 3
var volatile bit    PIE1_CCP1IE               at PIE1 : 2
var volatile bit    PIE1_TMR2IE               at PIE1 : 1
var volatile bit    PIE1_TMR1IE               at PIE1 : 0
-- ------------------------------------------------
var volatile byte   PIE2                      at { 0x8D }
var volatile bit    PIE2_OSFIE                at PIE2 : 7
var volatile bit    PIE2_C2IE                 at PIE2 : 6
var volatile bit    PIE2_C1IE                 at PIE2 : 5
var volatile bit    PIE2_LCDIE                at PIE2 : 4
var volatile bit    PIE2_LVDIE                at PIE2 : 2
var volatile bit    PIE2_CCP2IE               at PIE2 : 0
-- ------------------------------------------------
var volatile byte   PCON                      at { 0x8E }
var volatile bit    PCON_SBOREN               at PCON : 4
var volatile bit    PCON_NPOR                 at PCON : 1
var volatile bit    PCON_NBOR                 at PCON : 0
-- ------------------------------------------------
var volatile byte   OSCCON                    at { 0x8F }
var volatile bit*3  OSCCON_IRCF               at OSCCON : 4
var volatile bit    OSCCON_OSTS               at OSCCON : 3
var volatile bit    OSCCON_HTS                at OSCCON : 2
var volatile bit    OSCCON_LTS                at OSCCON : 1
var volatile bit    OSCCON_SCS                at OSCCON : 0
-- ------------------------------------------------
var volatile byte   OSCTUNE                   at { 0x90 }
var volatile bit*5  OSCTUNE_TUN               at OSCTUNE : 0
-- ------------------------------------------------
var volatile byte   ANSEL                     at { 0x91 }
var volatile bit    ANSEL_AN7                 at ANSEL : 7
alias               JANSEL_ANS7               is ANSEL_AN7
var volatile bit    ANSEL_AN6                 at ANSEL : 6
alias               JANSEL_ANS6               is ANSEL_AN6
var volatile bit    ANSEL_AN5                 at ANSEL : 5
alias               JANSEL_ANS5               is ANSEL_AN5
var volatile bit    ANSEL_AN4                 at ANSEL : 4
alias               JANSEL_ANS4               is ANSEL_AN4
var volatile bit    ANSEL_AN3                 at ANSEL : 3
alias               JANSEL_ANS3               is ANSEL_AN3
var volatile bit    ANSEL_AN2                 at ANSEL : 2
alias               JANSEL_ANS2               is ANSEL_AN2
var volatile bit    ANSEL_AN1                 at ANSEL : 1
alias               JANSEL_ANS1               is ANSEL_AN1
var volatile bit    ANSEL_AN0                 at ANSEL : 0
alias               JANSEL_ANS0               is ANSEL_AN0
-- ------------------------------------------------
var volatile byte   PR2                       at { 0x92 }
-- ------------------------------------------------
var volatile byte   SSPADD                    at { 0x93 }
-- ------------------------------------------------
var volatile byte   SSPSTAT                   at { 0x94 }
var volatile bit    SSPSTAT_SMP               at SSPSTAT : 7
var volatile bit    SSPSTAT_CKE               at SSPSTAT : 6
var volatile bit    SSPSTAT_D                 at SSPSTAT : 5
var volatile bit    SSPSTAT_NA                at SSPSTAT : 5
var volatile bit    SSPSTAT_P                 at SSPSTAT : 4
var volatile bit    SSPSTAT_S                 at SSPSTAT : 3
var volatile bit    SSPSTAT_R                 at SSPSTAT : 2
var volatile bit    SSPSTAT_NW                at SSPSTAT : 2
var volatile bit    SSPSTAT_UA                at SSPSTAT : 1
var volatile bit    SSPSTAT_BF                at SSPSTAT : 0
-- ------------------------------------------------
var volatile byte   WPUB                      at { 0x95 }
-- ------------------------------------------------
var volatile byte   IOCB                      at { 0x96 }
var volatile bit*4  IOCB_IOCB                 at IOCB : 4
-- ------------------------------------------------
var volatile byte   CMCON1                    at { 0x97 }
var volatile bit    CMCON1_T1GSS              at CMCON1 : 1
var volatile bit    CMCON1_C2SYNC             at CMCON1 : 0
-- ------------------------------------------------
var volatile byte   TXSTA                     at { 0x98 }
var volatile bit    TXSTA_CSRC                at TXSTA : 7
var volatile bit    TXSTA_TX9                 at TXSTA : 6
var volatile bit    TXSTA_TXEN                at TXSTA : 5
var volatile bit    TXSTA_SYNC                at TXSTA : 4
var volatile bit    TXSTA_BRGH                at TXSTA : 2
var volatile bit    TXSTA_TRMT                at TXSTA : 1
var volatile bit    TXSTA_TX9D                at TXSTA : 0
-- ------------------------------------------------
var volatile byte   SPBRG                     at { 0x99 }
alias               SPBRGL                    is SPBRG
-- ------------------------------------------------
var volatile byte   CMCON0                    at { 0x9C }
var volatile bit    CMCON0_C2OUT              at CMCON0 : 7
var volatile bit    CMCON0_C1OUT              at CMCON0 : 6
var volatile bit    CMCON0_C2INV              at CMCON0 : 5
var volatile bit    CMCON0_C1INV              at CMCON0 : 4
var volatile bit    CMCON0_CIS                at CMCON0 : 3
var volatile bit*3  CMCON0_CM                 at CMCON0 : 0
-- ------------------------------------------------
var volatile byte   VRCON                     at { 0x9D }
var volatile bit    VRCON_VREN                at VRCON : 7
var volatile bit    VRCON_VRR                 at VRCON : 5
var volatile bit*4  VRCON_VR                  at VRCON : 0
-- ------------------------------------------------
var volatile byte   ADRESL                    at { 0x9E }
-- ------------------------------------------------
var volatile byte   ADCON1                    at { 0x9F }
var volatile bit*3  ADCON1_ADCS               at ADCON1 : 4
-- ------------------------------------------------
var volatile byte   WDTCON                    at { 0x105 }
var volatile bit*4  WDTCON_WDTPS              at WDTCON : 1
var volatile bit    WDTCON_SWDTEN             at WDTCON : 0
-- ------------------------------------------------
var volatile byte   LCDCON                    at { 0x107 }
var volatile bit    LCDCON_LCDEN              at LCDCON : 7
var volatile bit    LCDCON_SLPEN              at LCDCON : 6
var volatile bit    LCDCON_WERR               at LCDCON : 5
var volatile bit    LCDCON_VLCDEN             at LCDCON : 4
var volatile bit*2  LCDCON_CS                 at LCDCON : 2
var volatile bit*2  LCDCON_LMUX               at LCDCON : 0
-- ------------------------------------------------
var volatile byte   LCDPS                     at { 0x108 }
var volatile bit    LCDPS_WFT                 at LCDPS : 7
var volatile bit    LCDPS_BIASMD              at LCDPS : 6
var volatile bit    LCDPS_LCDA                at LCDPS : 5
var volatile bit    LCDPS_WA                  at LCDPS : 4
var volatile bit*4  LCDPS_LP                  at LCDPS : 0
-- ------------------------------------------------
var volatile byte   LVDCON                    at { 0x109 }
var volatile bit    LVDCON_IRVST              at LVDCON : 5
var volatile bit    LVDCON_LVDEN              at LVDCON : 4
var volatile bit*3  LVDCON_LVDL               at LVDCON : 0
-- ------------------------------------------------
var volatile byte   EEDATL                    at { 0x10C }
-- ------------------------------------------------
var volatile byte   EEADRL                    at { 0x10D }
-- ------------------------------------------------
var volatile byte   EEDATH                    at { 0x10E }
var volatile bit*6  EEDATH_EEDATH             at EEDATH : 0
-- ------------------------------------------------
var volatile byte   EEADRH                    at { 0x10F }
var volatile bit*5  EEADRH_EEADRH             at EEADRH : 0
-- ------------------------------------------------
var volatile byte   LCDDATA0                  at { 0x110 }
var volatile bit    LCDDATA0_SEG7             at LCDDATA0 : 7
var volatile bit    LCDDATA0_SEG6             at LCDDATA0 : 6
var volatile bit    LCDDATA0_SEG5             at LCDDATA0 : 5
var volatile bit    LCDDATA0_SEG4             at LCDDATA0 : 4
var volatile bit    LCDDATA0_SEG3             at LCDDATA0 : 3
var volatile bit    LCDDATA0_SEG2             at LCDDATA0 : 2
var volatile bit    LCDDATA0_SEG1             at LCDDATA0 : 1
var volatile bit    LCDDATA0_SEG0             at LCDDATA0 : 0
-- ------------------------------------------------
var volatile byte   LCDDATA1                  at { 0x111 }
var volatile bit    LCDDATA1_SEG15            at LCDDATA1 : 7
var volatile bit    LCDDATA1_SEG14            at LCDDATA1 : 6
var volatile bit    LCDDATA1_SEG13            at LCDDATA1 : 5
var volatile bit    LCDDATA1_SEG12            at LCDDATA1 : 4
var volatile bit    LCDDATA1_SEG11            at LCDDATA1 : 3
var volatile bit    LCDDATA1_SEG10            at LCDDATA1 : 2
var volatile bit    LCDDATA1_SEG9             at LCDDATA1 : 1
var volatile bit    LCDDATA1_SEG8             at LCDDATA1 : 0
-- ------------------------------------------------
var volatile byte   LCDDATA2                  at { 0x112 }
var volatile bit    LCDDATA2_SEG23            at LCDDATA2 : 7
var volatile bit    LCDDATA2_SEG22            at LCDDATA2 : 6
var volatile bit    LCDDATA2_SEG21            at LCDDATA2 : 5
var volatile bit    LCDDATA2_SEG20            at LCDDATA2 : 4
var volatile bit    LCDDATA2_SEG19            at LCDDATA2 : 3
var volatile bit    LCDDATA2_SEG18            at LCDDATA2 : 2
var volatile bit    LCDDATA2_SEG17            at LCDDATA2 : 1
var volatile bit    LCDDATA2_SEG16            at LCDDATA2 : 0
-- ------------------------------------------------
var volatile byte   LCDDATA3                  at { 0x113 }
var volatile bit    LCDDATA3_SEG7             at LCDDATA3 : 7
var volatile bit    LCDDATA3_SEG6             at LCDDATA3 : 6
var volatile bit    LCDDATA3_SEG5             at LCDDATA3 : 5
var volatile bit    LCDDATA3_SEG4             at LCDDATA3 : 4
var volatile bit    LCDDATA3_SEG3             at LCDDATA3 : 3
var volatile bit    LCDDATA3_SEG2             at LCDDATA3 : 2
var volatile bit    LCDDATA3_SEG1             at LCDDATA3 : 1
var volatile bit    LCDDATA3_SEG0             at LCDDATA3 : 0
-- ------------------------------------------------
var volatile byte   LCDDATA4                  at { 0x114 }
var volatile bit    LCDDATA4_SEG15            at LCDDATA4 : 7
var volatile bit    LCDDATA4_SEG14            at LCDDATA4 : 6
var volatile bit    LCDDATA4_SEG13            at LCDDATA4 : 5
var volatile bit    LCDDATA4_SEG12            at LCDDATA4 : 4
var volatile bit    LCDDATA4_SEG11            at LCDDATA4 : 3
var volatile bit    LCDDATA4_SEG10            at LCDDATA4 : 2
var volatile bit    LCDDATA4_SEG9             at LCDDATA4 : 1
var volatile bit    LCDDATA4_SEG8             at LCDDATA4 : 0
-- ------------------------------------------------
var volatile byte   LCDDATA5                  at { 0x115 }
var volatile bit    LCDDATA5_SEG23            at LCDDATA5 : 7
var volatile bit    LCDDATA5_SEG22            at LCDDATA5 : 6
var volatile bit    LCDDATA5_SEG21            at LCDDATA5 : 5
var volatile bit    LCDDATA5_SEG20            at LCDDATA5 : 4
var volatile bit    LCDDATA5_SEG19            at LCDDATA5 : 3
var volatile bit    LCDDATA5_SEG18            at LCDDATA5 : 2
var volatile bit    LCDDATA5_SEG17            at LCDDATA5 : 1
var volatile bit    LCDDATA5_SEG16            at LCDDATA5 : 0
-- ------------------------------------------------
var volatile byte   LCDDATA6                  at { 0x116 }
var volatile bit    LCDDATA6_SEG7             at LCDDATA6 : 7
var volatile bit    LCDDATA6_SEG6             at LCDDATA6 : 6
var volatile bit    LCDDATA6_SEG5             at LCDDATA6 : 5
var volatile bit    LCDDATA6_SEG4             at LCDDATA6 : 4
var volatile bit    LCDDATA6_SEG3             at LCDDATA6 : 3
var volatile bit    LCDDATA6_SEG2             at LCDDATA6 : 2
var volatile bit    LCDDATA6_SEG1             at LCDDATA6 : 1
var volatile bit    LCDDATA6_SEG0             at LCDDATA6 : 0
-- ------------------------------------------------
var volatile byte   LCDDATA7                  at { 0x117 }
var volatile bit    LCDDATA7_SEG15            at LCDDATA7 : 7
var volatile bit    LCDDATA7_SEG14            at LCDDATA7 : 6
var volatile bit    LCDDATA7_SEG13            at LCDDATA7 : 5
var volatile bit    LCDDATA7_SEG12            at LCDDATA7 : 4
var volatile bit    LCDDATA7_SEG11            at LCDDATA7 : 3
var volatile bit    LCDDATA7_SEG10            at LCDDATA7 : 2
var volatile bit    LCDDATA7_SEG9             at LCDDATA7 : 1
var volatile bit    LCDDATA7_SEG8             at LCDDATA7 : 0
-- ------------------------------------------------
var volatile byte   LCDDATA8                  at { 0x118 }
var volatile bit    LCDDATA8_SEG23            at LCDDATA8 : 7
var volatile bit    LCDDATA8_SEG22            at LCDDATA8 : 6
var volatile bit    LCDDATA8_SEG21            at LCDDATA8 : 5
var volatile bit    LCDDATA8_SEG20            at LCDDATA8 : 4
var volatile bit    LCDDATA8_SEG19            at LCDDATA8 : 3
var volatile bit    LCDDATA8_SEG18            at LCDDATA8 : 2
var volatile bit    LCDDATA8_SEG17            at LCDDATA8 : 1
var volatile bit    LCDDATA8_SEG16            at LCDDATA8 : 0
-- ------------------------------------------------
var volatile byte   LCDDATA9                  at { 0x119 }
var volatile bit    LCDDATA9_SEG7             at LCDDATA9 : 7
var volatile bit    LCDDATA9_SEG6             at LCDDATA9 : 6
var volatile bit    LCDDATA9_SEG5             at LCDDATA9 : 5
var volatile bit    LCDDATA9_SEG4             at LCDDATA9 : 4
var volatile bit    LCDDATA9_SEG3             at LCDDATA9 : 3
var volatile bit    LCDDATA9_SEG2             at LCDDATA9 : 2
var volatile bit    LCDDATA9_SEG1             at LCDDATA9 : 1
var volatile bit    LCDDATA9_SEG0             at LCDDATA9 : 0
-- ------------------------------------------------
var volatile byte   LCDDATA10                 at { 0x11A }
var volatile bit    LCDDATA10_SEG15           at LCDDATA10 : 7
var volatile bit    LCDDATA10_SEG14           at LCDDATA10 : 6
var volatile bit    LCDDATA10_SEG13           at LCDDATA10 : 5
var volatile bit    LCDDATA10_SEG12           at LCDDATA10 : 4
var volatile bit    LCDDATA10_SEG11           at LCDDATA10 : 3
var volatile bit    LCDDATA10_SEG10           at LCDDATA10 : 2
var volatile bit    LCDDATA10_SEG9            at LCDDATA10 : 1
var volatile bit    LCDDATA10_SEG8            at LCDDATA10 : 0
-- ------------------------------------------------
var volatile byte   LCDDATA11                 at { 0x11B }
var volatile bit    LCDDATA11_SEG23           at LCDDATA11 : 7
var volatile bit    LCDDATA11_SEG22           at LCDDATA11 : 6
var volatile bit    LCDDATA11_SEG21           at LCDDATA11 : 5
var volatile bit    LCDDATA11_SEG20           at LCDDATA11 : 4
var volatile bit    LCDDATA11_SEG19           at LCDDATA11 : 3
var volatile bit    LCDDATA11_SEG18           at LCDDATA11 : 2
var volatile bit    LCDDATA11_SEG17           at LCDDATA11 : 1
var volatile bit    LCDDATA11_SEG16           at LCDDATA11 : 0
-- ------------------------------------------------
var volatile byte   LCDSE0                    at { 0x11C }
var volatile bit    LCDSE0_SEG7               at LCDSE0 : 7
var volatile bit    LCDSE0_SEG6               at LCDSE0 : 6
var volatile bit    LCDSE0_SEG5               at LCDSE0 : 5
var volatile bit    LCDSE0_SEG4               at LCDSE0 : 4
var volatile bit    LCDSE0_SEG3               at LCDSE0 : 3
var volatile bit    LCDSE0_SEG2               at LCDSE0 : 2
var volatile bit    LCDSE0_SEG1               at LCDSE0 : 1
var volatile bit    LCDSE0_SEG0               at LCDSE0 : 0
-- ------------------------------------------------
var volatile byte   LCDSE1                    at { 0x11D }
var volatile bit    LCDSE1_SEG15              at LCDSE1 : 7
var volatile bit    LCDSE1_SEG14              at LCDSE1 : 6
var volatile bit    LCDSE1_SEG13              at LCDSE1 : 5
var volatile bit    LCDSE1_SEG12              at LCDSE1 : 4
var volatile bit    LCDSE1_SEG11              at LCDSE1 : 3
var volatile bit    LCDSE1_SEG10              at LCDSE1 : 2
var volatile bit    LCDSE1_SEG9               at LCDSE1 : 1
var volatile bit    LCDSE1_SEG8               at LCDSE1 : 0
-- ------------------------------------------------
var volatile byte   LCDSE2                    at { 0x11E }
var volatile bit    LCDSE2_SEG23              at LCDSE2 : 7
var volatile bit    LCDSE2_SEG22              at LCDSE2 : 6
var volatile bit    LCDSE2_SEG21              at LCDSE2 : 5
var volatile bit    LCDSE2_SEG20              at LCDSE2 : 4
var volatile bit    LCDSE2_SEG19              at LCDSE2 : 3
var volatile bit    LCDSE2_SEG18              at LCDSE2 : 2
var volatile bit    LCDSE2_SEG17              at LCDSE2 : 1
var volatile bit    LCDSE2_SEG16              at LCDSE2 : 0
-- ------------------------------------------------
var volatile byte   TRISF                     at { 0x185 }
alias               PORTF_direction           is TRISF
--
procedure PORTF_low_direction'put(byte in x) is
   pragma inline
   TRISF = (TRISF & 0xF0) | (x & 0x0F)
end procedure
function PORTF_low_direction'get() return byte is
   pragma inline
   return (TRISF & 0x0F)
end function
--
procedure PORTF_high_direction'put(byte in x) is
   pragma inline
   TRISF = (TRISF & 0x0F) | (x << 4)
end procedure
function PORTF_high_direction'get() return byte is
   pragma inline
   return (TRISF >> 4)
end function
--
var volatile bit    TRISF_TRISF7              at TRISF : 7
alias               pin_F7_direction          is TRISF_TRISF7
alias               pin_SEG31_direction       is pin_F7_direction
--
var volatile bit    TRISF_TRISF6              at TRISF : 6
alias               pin_F6_direction          is TRISF_TRISF6
alias               pin_SEG30_direction       is pin_F6_direction
--
var volatile bit    TRISF_TRISF5              at TRISF : 5
alias               pin_F5_direction          is TRISF_TRISF5
alias               pin_SEG29_direction       is pin_F5_direction
--
var volatile bit    TRISF_TRISF4              at TRISF : 4
alias               pin_F4_direction          is TRISF_TRISF4
alias               pin_SEG28_direction       is pin_F4_direction
--
var volatile bit    TRISF_TRISF3              at TRISF : 3
alias               pin_F3_direction          is TRISF_TRISF3
alias               pin_SEG35_direction       is pin_F3_direction
--
var volatile bit    TRISF_TRISF2              at TRISF : 2
alias               pin_F2_direction          is TRISF_TRISF2
alias               pin_SEG34_direction       is pin_F2_direction
--
var volatile bit    TRISF_TRISF1              at TRISF : 1
alias               pin_F1_direction          is TRISF_TRISF1
alias               pin_SEG33_direction       is pin_F1_direction
--
var volatile bit    TRISF_TRISF0              at TRISF : 0
alias               pin_F0_direction          is TRISF_TRISF0
alias               pin_SEG32_direction       is pin_F0_direction
--
-- ------------------------------------------------
var volatile byte   TRISG                     at { 0x187 }
alias               PORTG_direction           is TRISG
--
procedure PORTG_low_direction'put(byte in x) is
   pragma inline
   TRISG = (TRISG & 0xF0) | (x & 0x0F)
end procedure
function PORTG_low_direction'get() return byte is
   pragma inline
   return (TRISG & 0x0F)
end function
--
procedure PORTG_high_direction'put(byte in x) is
   pragma inline
   TRISG = (TRISG & 0x0F) | (x << 4)
end procedure
function PORTG_high_direction'get() return byte is
   pragma inline
   return (TRISG >> 4)
end function
--
var volatile bit    TRISG_TRISG5              at TRISG : 5
alias               pin_G5_direction          is TRISG_TRISG5
alias               pin_SEG41_direction       is pin_G5_direction
--
var volatile bit    TRISG_TRISG4              at TRISG : 4
alias               pin_G4_direction          is TRISG_TRISG4
alias               pin_SEG40_direction       is pin_G4_direction
--
var volatile bit    TRISG_TRISG3              at TRISG : 3
alias               pin_G3_direction          is TRISG_TRISG3
alias               pin_SEG39_direction       is pin_G3_direction
--
var volatile bit    TRISG_TRISG2              at TRISG : 2
alias               pin_G2_direction          is TRISG_TRISG2
alias               pin_SEG38_direction       is pin_G2_direction
--
var volatile bit    TRISG_TRISG1              at TRISG : 1
alias               pin_G1_direction          is TRISG_TRISG1
alias               pin_SEG37_direction       is pin_G1_direction
--
var volatile bit    TRISG_TRISG0              at TRISG : 0
alias               pin_G0_direction          is TRISG_TRISG0
alias               pin_SEG36_direction       is pin_G0_direction
--
-- ------------------------------------------------
var volatile byte   _PORTF                    at { 0x188 }
--
var          byte   PORTF                     at _PORTF
var          byte   _PORTF_shadow            
--
procedure PORTF'put(byte in x at _PORTF_shadow) is
   pragma inline
   _PORTF = _PORTF_shadow
end procedure
--
procedure PORTF_low'put(byte in x) is
   pragma inline
   _PORTF_shadow = (_PORTF_shadow & 0xF0) | (x & 0x0F)
   _PORTF = _PORTF_shadow
end procedure
function PORTF_low'get() return byte is
   pragma inline
   return (PORTF & 0x0F)
end function
--
procedure PORTF_high'put(byte in x) is
   pragma inline
   _PORTF_shadow = (_PORTF_shadow & 0x0F) | (x << 4)
   _PORTF = _PORTF_shadow
end procedure
function PORTF_high'get() return byte is
   pragma inline
   return (PORTF >> 4)
end function
--
var volatile bit    PORTF_RF7                 at _PORTF : 7
var volatile bit    pin_F7                    at _PORTF : 7
alias               pin_SEG31                 is pin_F7
--
procedure pin_F7'put(bit in x at _PORTF_shadow : 7) is
   pragma inline
   _PORTF = _PORTF_shadow
end procedure
--
var volatile bit    PORTF_RF6                 at _PORTF : 6
var volatile bit    pin_F6                    at _PORTF : 6
alias               pin_SEG30                 is pin_F6
--
procedure pin_F6'put(bit in x at _PORTF_shadow : 6) is
   pragma inline
   _PORTF = _PORTF_shadow
end procedure
--
var volatile bit    PORTF_RF5                 at _PORTF : 5
var volatile bit    pin_F5                    at _PORTF : 5
alias               pin_SEG29                 is pin_F5
--
procedure pin_F5'put(bit in x at _PORTF_shadow : 5) is
   pragma inline
   _PORTF = _PORTF_shadow
end procedure
--
var volatile bit    PORTF_RF4                 at _PORTF : 4
var volatile bit    pin_F4                    at _PORTF : 4
alias               pin_SEG28                 is pin_F4
--
procedure pin_F4'put(bit in x at _PORTF_shadow : 4) is
   pragma inline
   _PORTF = _PORTF_shadow
end procedure
--
var volatile bit    PORTF_RF3                 at _PORTF : 3
var volatile bit    pin_F3                    at _PORTF : 3
alias               pin_SEG35                 is pin_F3
--
procedure pin_F3'put(bit in x at _PORTF_shadow : 3) is
   pragma inline
   _PORTF = _PORTF_shadow
end procedure
--
var volatile bit    PORTF_RF2                 at _PORTF : 2
var volatile bit    pin_F2                    at _PORTF : 2
alias               pin_SEG34                 is pin_F2
--
procedure pin_F2'put(bit in x at _PORTF_shadow : 2) is
   pragma inline
   _PORTF = _PORTF_shadow
end procedure
--
var volatile bit    PORTF_RF1                 at _PORTF : 1
var volatile bit    pin_F1                    at _PORTF : 1
alias               pin_SEG33                 is pin_F1
--
procedure pin_F1'put(bit in x at _PORTF_shadow : 1) is
   pragma inline
   _PORTF = _PORTF_shadow
end procedure
--
var volatile bit    PORTF_RF0                 at _PORTF : 0
var volatile bit    pin_F0                    at _PORTF : 0
alias               pin_SEG32                 is pin_F0
--
procedure pin_F0'put(bit in x at _PORTF_shadow : 0) is
   pragma inline
   _PORTF = _PORTF_shadow
end procedure
--
-- ------------------------------------------------
var volatile byte   _PORTG                    at { 0x189 }
--
var          byte   PORTG                     at _PORTG
var          byte   _PORTG_shadow            
--
procedure PORTG'put(byte in x at _PORTG_shadow) is
   pragma inline
   _PORTG = _PORTG_shadow
end procedure
--
procedure PORTG_low'put(byte in x) is
   pragma inline
   _PORTG_shadow = (_PORTG_shadow & 0xF0) | (x & 0x0F)
   _PORTG = _PORTG_shadow
end procedure
function PORTG_low'get() return byte is
   pragma inline
   return (PORTG & 0x0F)
end function
--
procedure PORTG_high'put(byte in x) is
   pragma inline
   _PORTG_shadow = (_PORTG_shadow & 0x0F) | (x << 4)
   _PORTG = _PORTG_shadow
end procedure
function PORTG_high'get() return byte is
   pragma inline
   return (PORTG >> 4)
end function
--
var volatile bit    PORTG_RG5                 at _PORTG : 5
var volatile bit    pin_G5                    at _PORTG : 5
alias               pin_SEG41                 is pin_G5
--
procedure pin_G5'put(bit in x at _PORTG_shadow : 5) is
   pragma inline
   _PORTG = _PORTG_shadow
end procedure
--
var volatile bit    PORTG_RG4                 at _PORTG : 4
var volatile bit    pin_G4                    at _PORTG : 4
alias               pin_SEG40                 is pin_G4
--
procedure pin_G4'put(bit in x at _PORTG_shadow : 4) is
   pragma inline
   _PORTG = _PORTG_shadow
end procedure
--
var volatile bit    PORTG_RG3                 at _PORTG : 3
var volatile bit    pin_G3                    at _PORTG : 3
alias               pin_SEG39                 is pin_G3
--
procedure pin_G3'put(bit in x at _PORTG_shadow : 3) is
   pragma inline
   _PORTG = _PORTG_shadow
end procedure
--
var volatile bit    PORTG_RG2                 at _PORTG : 2
var volatile bit    pin_G2                    at _PORTG : 2
alias               pin_SEG38                 is pin_G2
--
procedure pin_G2'put(bit in x at _PORTG_shadow : 2) is
   pragma inline
   _PORTG = _PORTG_shadow
end procedure
--
var volatile bit    PORTG_RG1                 at _PORTG : 1
var volatile bit    pin_G1                    at _PORTG : 1
alias               pin_SEG37                 is pin_G1
--
procedure pin_G1'put(bit in x at _PORTG_shadow : 1) is
   pragma inline
   _PORTG = _PORTG_shadow
end procedure
--
var volatile bit    PORTG_RG0                 at _PORTG : 0
var volatile bit    pin_G0                    at _PORTG : 0
alias               pin_SEG36                 is pin_G0
--
procedure pin_G0'put(bit in x at _PORTG_shadow : 0) is
   pragma inline
   _PORTG = _PORTG_shadow
end procedure
--
-- ------------------------------------------------
var volatile byte   EECON1                    at { 0x18C }
var volatile bit    EECON1_EEPGD              at EECON1 : 7
var volatile bit    EECON1_WRERR              at EECON1 : 3
var volatile bit    EECON1_WREN               at EECON1 : 2
var volatile bit    EECON1_WR                 at EECON1 : 1
var volatile bit    EECON1_RD                 at EECON1 : 0
-- ------------------------------------------------
var volatile byte   EECON2                    at { 0x18D }
-- ------------------------------------------------
var volatile byte   LCDDATA12                 at { 0x190 }
var volatile bit    LCDDATA12_SEG31           at LCDDATA12 : 7
var volatile bit    LCDDATA12_SEG30           at LCDDATA12 : 6
var volatile bit    LCDDATA12_SEG29           at LCDDATA12 : 5
var volatile bit    LCDDATA12_SEG28           at LCDDATA12 : 4
var volatile bit    LCDDATA12_SEG27           at LCDDATA12 : 3
var volatile bit    LCDDATA12_SEG26           at LCDDATA12 : 2
var volatile bit    LCDDATA12_SEG25           at LCDDATA12 : 1
var volatile bit    LCDDATA12_SEG24           at LCDDATA12 : 0
-- ------------------------------------------------
var volatile byte   LCDDATA13                 at { 0x191 }
var volatile bit    LCDDATA13_SEG39           at LCDDATA13 : 7
var volatile bit    LCDDATA13_SEG38           at LCDDATA13 : 6
var volatile bit    LCDDATA13_SEG37           at LCDDATA13 : 5
var volatile bit    LCDDATA13_SEG36           at LCDDATA13 : 4
var volatile bit    LCDDATA13_SEG35           at LCDDATA13 : 3
var volatile bit    LCDDATA13_SEG34           at LCDDATA13 : 2
var volatile bit    LCDDATA13_SEG33           at LCDDATA13 : 1
var volatile bit    LCDDATA13_SEG32           at LCDDATA13 : 0
-- ------------------------------------------------
var volatile byte   LCDDATA14                 at { 0x192 }
var volatile bit    LCDDATA14_SEG41           at LCDDATA14 : 1
var volatile bit    LCDDATA14_SEG40           at LCDDATA14 : 0
-- ------------------------------------------------
var volatile byte   LCDDATA15                 at { 0x193 }
var volatile bit    LCDDATA15_SEG31           at LCDDATA15 : 7
var volatile bit    LCDDATA15_SEG30           at LCDDATA15 : 6
var volatile bit    LCDDATA15_SEG29           at LCDDATA15 : 5
var volatile bit    LCDDATA15_SEG28           at LCDDATA15 : 4
var volatile bit    LCDDATA15_SEG27           at LCDDATA15 : 3
var volatile bit    LCDDATA15_SEG26           at LCDDATA15 : 2
var volatile bit    LCDDATA15_SEG25           at LCDDATA15 : 1
var volatile bit    LCDDATA15_SEG24           at LCDDATA15 : 0
-- ------------------------------------------------
var volatile byte   LCDDATA16                 at { 0x194 }
var volatile bit    LCDDATA16_SEG39           at LCDDATA16 : 7
var volatile bit    LCDDATA16_SEG38           at LCDDATA16 : 6
var volatile bit    LCDDATA16_SEG37           at LCDDATA16 : 5
var volatile bit    LCDDATA16_SEG36           at LCDDATA16 : 4
var volatile bit    LCDDATA16_SEG35           at LCDDATA16 : 3
var volatile bit    LCDDATA16_SEG34           at LCDDATA16 : 2
var volatile bit    LCDDATA16_SEG33           at LCDDATA16 : 1
var volatile bit    LCDDATA16_SEG32           at LCDDATA16 : 0
-- ------------------------------------------------
var volatile byte   LCDDATA17                 at { 0x195 }
var volatile bit    LCDDATA17_SEG41           at LCDDATA17 : 1
var volatile bit    LCDDATA17_SEG40           at LCDDATA17 : 0
-- ------------------------------------------------
var volatile byte   LCDDATA18                 at { 0x196 }
var volatile bit    LCDDATA18_SEG31           at LCDDATA18 : 7
var volatile bit    LCDDATA18_SEG30           at LCDDATA18 : 6
var volatile bit    LCDDATA18_SEG29           at LCDDATA18 : 5
var volatile bit    LCDDATA18_SEG28           at LCDDATA18 : 4
var volatile bit    LCDDATA18_SEG27           at LCDDATA18 : 3
var volatile bit    LCDDATA18_SEG26           at LCDDATA18 : 2
var volatile bit    LCDDATA18_SEG25           at LCDDATA18 : 1
var volatile bit    LCDDATA18_SEG24           at LCDDATA18 : 0
-- ------------------------------------------------
var volatile byte   LCDDATA19                 at { 0x197 }
var volatile bit    LCDDATA19_SEG39           at LCDDATA19 : 7
var volatile bit    LCDDATA19_SEG38           at LCDDATA19 : 6
var volatile bit    LCDDATA19_SEG37           at LCDDATA19 : 5
var volatile bit    LCDDATA19_SEG36           at LCDDATA19 : 4
var volatile bit    LCDDATA19_SEG35           at LCDDATA19 : 3
var volatile bit    LCDDATA19_SEG34           at LCDDATA19 : 2
var volatile bit    LCDDATA19_SEG33           at LCDDATA19 : 1
var volatile bit    LCDDATA19_SEG32           at LCDDATA19 : 0
-- ------------------------------------------------
var volatile byte   LCDDATA20                 at { 0x198 }
var volatile bit    LCDDATA20_SEG41           at LCDDATA20 : 1
var volatile bit    LCDDATA20_SEG40           at LCDDATA20 : 0
-- ------------------------------------------------
var volatile byte   LCDDATA21                 at { 0x199 }
var volatile bit    LCDDATA21_SEG31           at LCDDATA21 : 7
var volatile bit    LCDDATA21_SEG30           at LCDDATA21 : 6
var volatile bit    LCDDATA21_SEG29           at LCDDATA21 : 5
var volatile bit    LCDDATA21_SEG28           at LCDDATA21 : 4
var volatile bit    LCDDATA21_SEG27           at LCDDATA21 : 3
var volatile bit    LCDDATA21_SEG26           at LCDDATA21 : 2
var volatile bit    LCDDATA21_SEG25           at LCDDATA21 : 1
var volatile bit    LCDDATA21_SEG24           at LCDDATA21 : 0
-- ------------------------------------------------
var volatile byte   LCDDATA22                 at { 0x19A }
var volatile bit    LCDDATA22_SEG39           at LCDDATA22 : 7
var volatile bit    LCDDATA22_SEG38           at LCDDATA22 : 6
var volatile bit    LCDDATA22_SEG37           at LCDDATA22 : 5
var volatile bit    LCDDATA22_SEG36           at LCDDATA22 : 4
var volatile bit    LCDDATA22_SEG35           at LCDDATA22 : 3
var volatile bit    LCDDATA22_SEG34           at LCDDATA22 : 2
var volatile bit    LCDDATA22_SEG33           at LCDDATA22 : 1
var volatile bit    LCDDATA22_SEG32           at LCDDATA22 : 0
-- ------------------------------------------------
var volatile byte   LCDDATA23                 at { 0x19B }
var volatile bit    LCDDATA23_SEG41           at LCDDATA23 : 1
var volatile bit    LCDDATA23_SEG40           at LCDDATA23 : 0
-- ------------------------------------------------
var volatile byte   LCDSE3                    at { 0x19C }
var volatile bit    LCDSE3_SEG31              at LCDSE3 : 7
var volatile bit    LCDSE3_SEG30              at LCDSE3 : 6
var volatile bit    LCDSE3_SEG29              at LCDSE3 : 5
var volatile bit    LCDSE3_SEG28              at LCDSE3 : 4
var volatile bit    LCDSE3_SEG27              at LCDSE3 : 3
var volatile bit    LCDSE3_SEG26              at LCDSE3 : 2
var volatile bit    LCDSE3_SEG25              at LCDSE3 : 1
var volatile bit    LCDSE3_SEG24              at LCDSE3 : 0
-- ------------------------------------------------
var volatile byte   LCDSE4                    at { 0x19D }
var volatile bit    LCDSE4_SEG39              at LCDSE4 : 7
var volatile bit    LCDSE4_SEG38              at LCDSE4 : 6
var volatile bit    LCDSE4_SEG37              at LCDSE4 : 5
var volatile bit    LCDSE4_SEG36              at LCDSE4 : 4
var volatile bit    LCDSE4_SEG35              at LCDSE4 : 3
var volatile bit    LCDSE4_SEG34              at LCDSE4 : 2
var volatile bit    LCDSE4_SEG33              at LCDSE4 : 1
var volatile bit    LCDSE4_SEG32              at LCDSE4 : 0
-- ------------------------------------------------
var volatile byte   LCDSE5                    at { 0x19E }
var volatile bit    LCDSE5_SEG41              at LCDSE5 : 1
var volatile bit    LCDSE5_SEG40              at LCDSE5 : 0
--
-- ===================================================
--
-- Special (device specific) constants and procedures
--
const ADC_GROUP = ADC_V0
const byte ADC_NTOTAL_CHANNEL = 8
const byte ADC_ADCS_BITCOUNT  = 3
--
const PPS_GROUP  = PPS_0        -- no Peripheral Pin Selection
--
-- - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Change analog I/O pins into digital I/O pins.
procedure analog_off() is
   pragma inline
   ANSEL  = 0b0000_0000       -- digital I/O
end procedure
--
-- - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Disable ADC module
procedure adc_off() is
   pragma inline
   ADCON0 = 0b0000_0000         -- disable ADC
   ADCON1 = 0b0000_0000
end procedure
--
-- - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Disable comparator module
procedure comparator_off() is
   pragma inline
   CMCON0 = 0b0000_0111        -- disable comparator
   CMCON1 = 0b0000_0000
end procedure
--
-- - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Switch analog ports to digital mode (if analog module present).
procedure enable_digital_io() is
   pragma inline
   analog_off()
   adc_off()
   comparator_off()
end procedure
--
-- ==================================================
--
-- Symbolic Fuse definitions
-- -------------------------
--
-- CONFIG (0x2007)
--
pragma fuse_def OSC 0x7 {                  -- oscillator selection bits
       RC_CLKOUT = 0x7                     -- rc oscillator: clkout function on ra6/osc2/clkout/t1oso pin, rc on ra7/osc1/clkin/t1osi
       RC_NOCLKOUT = 0x6                   -- rcio oscillator: i/o function on ra6/osc2/clkout/t1oso pin, rc on ra7/osc1/clkin/t1osi
       INTOSC_CLKOUT = 0x5                 -- intosc oscillator: clkout function on ra6/osc2/clkout/t1oso pin, i/o function on ra7/osc1/clkin/t1osi
       INTOSC_NOCLKOUT = 0x4               -- intoscio oscillator: i/o function on ra6/osc2/clkout/t1oso pin, i/o function on ra7/osc1/clkin/t1osi
       EC_NOCLKOUT = 0x3                   -- ec: i/o function on ra6/osc2/clkout/t1oso pin, clkin on ra7/osc1/clkin/t1osi
       HS = 0x2                            -- hs oscillator: high-speed crystal/resonator on ra6/osc2/clkout/t1oso and ra7/osc1/clkin/t1osi
       XT = 0x1                            -- xt oscillator: crystal/resonator on ra6/osc2/clkout/t1oso and ra7/osc1/clkin/t1osi
       LP = 0x0                            -- lp oscillator: low-power crystal on ra6/osc2/clkout/t1oso and ra7/osc1/clkin/t1osi
       }
pragma fuse_def WDT 0x8 {                  -- watchdog timer enable bit
       ENABLED = 0x8                       -- enabled
       DISABLED = 0x0                      -- disabled
       }
pragma fuse_def PWRTE 0x10 {               -- power up timer enable bit
       DISABLED = 0x10                     -- disabled
       ENABLED = 0x0                       -- enabled
       }
pragma fuse_def MCLR 0x20 {                -- re3/mclr pin function select bit
       EXTERNAL = 0x20                     -- enabled
       INTERNAL = 0x0                      -- disabled
       }
pragma fuse_def CP 0x40 {                  -- code protection bit
       DISABLED = 0x40                     -- disabled
       ENABLED = 0x0                       -- enabled
       }
pragma fuse_def CPD 0x80 {                 -- data code protection bit
       DISABLED = 0x80                     -- disabled
       ENABLED = 0x0                       -- enabled
       }
pragma fuse_def BROWNOUT 0x300 {           -- brown-out reset selection bits
       ENABLED = 0x300                     -- enabled
       RUNONLY = 0x200                     -- bor enabled during operation and disabled in sleep
       CONTROL = 0x100                     -- bor controlled by sboren bit of the pcon register
       DISABLED = 0x0                      -- disabled
       }
pragma fuse_def IESO 0x400 {               -- internal external switchover bit
       ENABLED = 0x400                     -- enabled
       DISABLED = 0x0                      -- disabled
       }
pragma fuse_def FCMEN 0x800 {              -- fail-safe clock monitor enabled bit
       ENABLED = 0x800                     -- enabled
       DISABLED = 0x0                      -- disabled
       }
pragma fuse_def DEBUG 0x1000 {             -- in-circuit debugger mode bit
       DISABLED = 0x1000                   -- disabled
       ENABLED = 0x0                       -- enabled
       }
--
