-- Title: bit array library
-- Author: Matthew Schinkel - borntechi.com, copyright (c) 2009, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4m
-- Revision: $Revision: 1.1 $
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: This library allows creation of bit arrays with
--              up to 16383 entries.
--
-- Sources:
--
-- notes:
-- uses large_array_1 library when BIT_ARRAY_1_SIZE > 2047
--
-- const dword BIT_ARRAY_1_SIZE = 100   -- choose number of array variables
-- include bit_array                    -- include the array library
-- alias test is bit_array_1            -- rename/alias the array to test

-- create a byte array to hold the bits
const byte _BIT_ARRAY_1_CALC1 = BIT_ARRAY_1_SIZE / 8
const byte _BIT_ARRAY_1_CALC2 = _BIT_ARRAY_1_CALC1 * 8
const byte _BIT_ARRAY_1_CALC3 = BIT_ARRAY_1_SIZE - _BIT_ARRAY_1_CALC1


const word _BIT_ARRAY_1_ARRAY_SIZE = (BIT_ARRAY_1_SIZE / 8)+ 1
if _BIT_ARRAY_1_ARRAY_SIZE <= 255 then
   var byte bit_array_1_byte_array[(BIT_ARRAY_1_SIZE / 8)+ 1]
else
   const dword LARGE_ARRAY_1_SIZE = _BIT_ARRAY_1_ARRAY_SIZE           -- choose number of array variables
   const dword LARGE_ARRAY_1_VARIABLE_SIZE = 1    -- choose size of variables (byte)
   include large_array_1                          -- include the array library
   alias bit_array_1_byte_array is large_array_1
end if


-- ----------------------------------------------------------------------------
-- Writes one bit to the correct byte array (internal use only)
-- ----------------------------------------------------------------------------
procedure _bit_array_1_set_byte(word in byte_address, byte in bit_address, bit in data) is
   var byte holder
   holder = bit_array_1_byte_array[byte_address] -- get the byte out of the byte array

   var bit bit0 at holder : 0   -- get the bits out of the byte
   var bit bit1 at holder : 1
   var bit bit2 at holder : 2
   var bit bit3 at holder : 3
   var bit bit4 at holder : 4
   var bit bit5 at holder : 5
   var bit bit6 at holder : 6
   var bit bit7 at holder : 7

   if bit_address == 0 then     -- set the correct bit in the byte
       bit0 = data
   elsif bit_address == 1 then
       bit1 = data
   elsif bit_address == 2 then
       bit2 = data
   elsif bit_address == 3 then
       bit3 = data
   elsif bit_address == 4 then
       bit4 = data
   elsif bit_address == 5 then
       bit5 = data
   elsif bit_address == 6 then
       bit6 = data
   elsif bit_address == 7 then
       bit7 = data
   end if

   bit_array_1_byte_array[byte_address] = holder  -- save the new byte to the byte array

end procedure

-- ----------------------------------------------------------------------------
-- Reads one bit from the correct byte array (internal use only)
-- ----------------------------------------------------------------------------
function _bit_array_1_get_byte(word in byte_address, byte in bit_address) return bit is
   var bit data

   var byte holder
   holder = bit_array_1_byte_array[byte_address]  -- get the byte out of the byte array

   var bit bit0 at holder : 0   -- get the bits out of the byte
   var bit bit1 at holder : 1
   var bit bit2 at holder : 2
   var bit bit3 at holder : 3
   var bit bit4 at holder : 4
   var bit bit5 at holder : 5
   var bit bit6 at holder : 6
   var bit bit7 at holder : 7

   if bit_address == 0 then     -- get the correct bit out of the byte
       data = bit0
   elsif bit_address == 1 then
       data = bit1
   elsif bit_address == 2 then
       data = bit2
   elsif bit_address == 3 then
       data = bit3
   elsif bit_address == 4 then
       data = bit4
   elsif bit_address == 5 then
       data = bit5
   elsif bit_address == 6 then
       data = bit6
   elsif bit_address == 7 then
       data = bit7
   end if

   return data
end function

-- ----------------------------------------------------------------------------
-- Write to bit array
-- ----------------------------------------------------------------------------
procedure bit_array_1'put(word in address, bit in data) is

   var word byte_array_location
   var byte bit_location
   var word calc_bit_location

   -- find the byte location
   byte_array_location = address / 8
   -- find the bit location
   calc_bit_location = address - (byte_array_location * 8)
   var byte val[2] at calc_bit_location
   bit_location = val[0]
   -- write the bit
   _bit_array_1_set_byte(byte_array_location, bit_location, data)

end procedure

-- ----------------------------------------------------------------------------
-- Read from bit array
-- ----------------------------------------------------------------------------
function bit_array_1'get(word in address) return bit is
   var bit data

   var word byte_array_location
   var byte bit_location
   var word calc_bit_location

   -- find the byte location
   byte_array_location = address / 8
   -- find the bit location
   calc_bit_location = address - (byte_array_location * 8)
   var byte val[2] at calc_bit_location
   bit_location = val[0]
   -- write the bit
   data = _bit_array_1_get_byte(byte_array_location, bit_location)

   return data -- return the bit
end function
