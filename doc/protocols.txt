Protocols used

Serial
======

RPi<->PIC
=========

RPi -> PIC
-----------
Only one byte commands are transmitted, represented by the following ASCII
chars:

g	No green light -> Go to RED
G	Green light -> Go to GREEN
e	No error -> Enbale normal operation
E	Temporary error -> Blink yellow

s<ADDR>=VAL Set EEPROM location to value, both in base-10!

Valid addresses:
0: Minimum on current
1: Maximum on current
2: Maximum off current

Valid values:
0..1024 Are valid A/D codes, although maybe not very useful
65535   Reset data point to default value upon next reboot

RPi <- PIC
----------
The PIC sends an newline-terminated ASCII string of space char separated values
on regular basis. The fields are as follows:

STATE			State of PIC state machine
ERROR_STATE	Error bits, see below
BATT_VOLTAGE	Voltage of battey pack, in 1/100 Volt
LAMP_CURRENT[0]	Current through lamp 0
LAMP_CURRENT[1]	Current through lamp 1
LAMP_CURRENT[2]	Current through lamp 2

Definition of ERROR_STATE (16bit integer unsigned)

Bit	Channel		Meaning
0	RED		Max-OFF current exceeded
1	RED		Min-ON current not reached
2	RED		Max-ON current exceeded

3	YELLOW		Max-OFF current exceeded
4	YELLOW		Min-ON current not reached
5	YELLOW		Max-ON current exceeded

6	GREEN		Max-OFF current exceeded
7	GREEN		Min-ON current not reached
8	GREEN		Max-ON current exceeded

Arduino <-> RPi
===============
Should be pretty similar to the PIC/RPi interface.

Arduino -> RPi
==============
g	No green light, close Road
G	Green light, open Road

RPi -> Arduino
==============
Space separated and newline terminated string, fields as follows:
RED_LOCAL		State of red lamp, 0=off, 1=on
YELLOW_LOCAL	State of yellow lamp, 0=off
GREEN_LOCAL		State of green lamp, 0=off
RED_REMOTE		State of red lamp, 0=off, 1=on
YELLOW_REMOTE	State of yellow lamp, 0=off
GREEN_REMOTE	State of green lamp, 0=off
STATE			0=All good, 1=synching, 2=error
BATTERY			0=All good, 1=master low, 2=slave low, may be or'ed together if both
		are empty


HTTP(s)
=======

Polling (with challenge)
========================

GET-Request:
------------
http://<IP>:<PORT>/interface/group?challenge=<CHALLENGE>

The CHALLENGE is used to make replay attacks less feasible, the
protocols security depends on the quality of randomness here.

Response:
---------
JSON:
{
    raw: "<JSON RESPONSE>",
    hash: <hmac_sha256(key=CHALLENGE, data=raw)>
}
Structure of JSON RESPONSE:
{
    state: <STATE>,
    batt_voltage: <BATT_VOLTAGE>,
    lamp_currents: [<RED_CURRENT>, <YELLOW_CURRENT>, <GREEN_CURRENT>]
    give_way: <GIVE_WAY>,
    temp_error: <TEMP_ERRROR>
}

STATE={
   TRAFFIC_TEST_RED: 0,
   TRAFFIC_TEST_RED_YELLOW: 1,
   TRAFFIC_TEST_RED_YELLOW_GREEN: 2,
   TRAFFIC_GREEN: 3,
   TRAFFIC_YELLOW: 4,
   TRAFFIC_RED: 5,
   TRAFFIC_RED_YELLOW: 6,
   TRAFFIC_TEMP_ERROR_DARK: 7,
   TRAFFIC_TEMP_ERROR: 8,
   TRAFFIC_FAIL: 9
}

BATT_VOLTAGE = int(BATTERY_VOLTAGE * 100) // In 1/100 Volt!
LAMP_CURRENTS[x] = // Arbitrary units, (1024 Count / 2.5V) = ~2.441 mA/Count
GIVE_WAY = bool
TEMP_ERRROR = bool

Setting
=======

POST Request
------------
http://<IP>:<PORT>/interface/group

Body:
JSON( {
    key: GroupKey,
    giveway: GIVE_WAY,
    temp_error: TEMP_ERRROR,
})

Response:
(not ok|ok)
