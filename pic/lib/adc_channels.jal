-- Title: ADC channel configuration.
-- Author: Sebastien Lelong, Copyright (C) 2009, all rights reserved. 
-- Adapted-by: 
-- Compiler: 2.4n
-- Revision: $Revision: 1.1 $
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: this library acts as a wrapper. When included, it'll define ways to
-- configure the number ADC channels. There are 3 different cases:
--    1. the number of channels is specified setting/clearing PCFG bits
--       => a combination of PCFG bits selects a given number of ADC channels.
--          It is not possible to independently select which pins as ADC pins.
--          If available (1.a), Vref+ and Vref- are part of these combinations. 
--          If not (1.b), either PIC doesn't support voltage reference, or in 
--          some few cases, Vref+ and Vref- are handled separately via VCGF bits.
--          PCFG bits are in ADCON1, as ADCON1_PCFG
--    2. the number of channels is specified clearing PCFG bits (case only found in 18F, I think)
--       => pins can be configured independently (you can decide which pin will act as
--          an analog pin, and define your own combination
--          Vref+/Vref- are configured using VCFG bits.
--          PCFG bits are in ADCON0 and ADCON1, and are numbered (eg. ADCON_PCFG5)
--    3. the number of channels is set using ANS bits (18F and non-18F)
--       => same as case 2., channels can be configured independently
--          Vref+/Vref- are configured using VCFG bits.
--
-- Notes: this file is generated, don't modify it directly...
--






-- Configure Voltage reference using VCFG bits
procedure _adc_vref_vcfg() is
   pragma inline
   -- Configure Voltage Reference, Vref bits
   -- This is only valid for PICs where Vref isn't part of PCFG bits combination

   -- Note: ADC_NVREF = ADC_NO_EXT_VREF is indirectly handled by the following assignment
   -- at least when bits aren't scattered
   var byte vcfg_shadow = ADC_NVREF

   if ADC_NVREF == ADC_VREF_POS_NEG then
      vcfg_shadow = 3   -- 0b_10 | 0b_01 => 0b_11 => one bit per VCFG bit*2
   end if
   if ADC_NVREF == ADC_VREF_NEG then
      vcfg_shadow = 2 -- 0b_10 | 0b_00 => 0b_10 => one bit per VCFG bit*2
   end if
   
   if defined(ADCON0_VCFG) then
      ADCON0_VCFG = vcfg_shadow
   elsif defined(ADCON1_VCFG) then
      ADCON1_VCFG = vcfg_shadow

   -- VCFG0 bit can be found in ADCON0 or ADCON1 register
   elsif defined(ADCON1_VCFG0) then
      if ADC_NVREF == ADC_NO_EXT_VREF then
         ADCON1_VCFG0 = false
         ADCON1_VCFG1 = false
      elsif ADC_NVREF == ADC_VREF_POS then
         ADCON1_VCFG0 = true
      elsif ADC_NVREF == ADC_VREF_POS_NEG then
         ADCON1_VCFG0 = true
         ADCON1_VCFG1 = true
      elsif ADC_NVREF == ADC_VREF_NEG then
         ADCON1_VCFG1 = true
      end if
   elsif defined(ADCON0_VCFG0) then
      if ADC_NVREF == ADC_NO_EXT_VREF then
         ADCON0_VCFG0 = false
         ADCON0_VCFG1 = false
      elsif ADC_NVREF == ADC_VREF_POS then
         ADCON0_VCFG0 = true
      elsif ADC_NVREF == ADC_VREF_POS_NEG then
         ADCON0_VCFG0 = true
         ADCON0_VCFG1 = true
      elsif ADC_NVREF == ADC_VREF_NEG then
         ADCON0_VCFG1 = true
      end if
   -- Special case for PVCFG
   -- Need to act on PVCFG and NVCFG bits
   elsif defined(ADCON1_PVCFG0) then
      if ADC_NVREF == ADC_NO_EXT_VREF then
         ADCON1_PVCFG0 = false
         ADCON1_PVCFG1 = false
         ADCON1_NVCFG0 = false
         ADCON1_NVCFG1 = false
      elsif ADC_NVREF == ADC_VREF_POS then
         -- PVCFG = 0b_01
         ADCON1_PVCFG0 = false
         ADCON1_PVCFG1 = true
      elsif ADC_NVREF == ADC_VREF_POS_NEG then
         -- PVCFG = 0b_01
         ADCON1_PVCFG0 = false
         ADCON1_PVCFG1 = true
         -- NVCFG = 0b_01
         ADCON1_NVCFG0 = false
         ADCON1_NVCFG1 = true
      elsif ADC_NVREF == ADC_VREF_NEG then
         -- NVCFG = 0b_01
         ADCON1_NVCFG0 = false
         ADCON1_NVCFG1 = true
      end if
   else
      if defined(ADC_NVREF) & ADC_NVREF != ADC_NO_EXT_VREF then
         _error "You've specified ADC_NVREF, but I can't find VCFG bits. There should be VCFG bits, except if I've made a mistake..."
      end if
   end if
end procedure



-- Configure Voltage reference using ADREF bits
-- Found in PICs: 16f722, 16f723, 16f724, 16f726, 16f727, 16lf722, 
--                16lf723, 16lf724, 16lf726, 16lf727,
-- Same family, DS 41341B
procedure _adc_vref_adref() is

   if defined(ADCON1_ADREF) then
      if ADC_NVREF == ADC_NO_EXT_VREF then
         ADCON1_ADREF = 0b_00
      elsif ADC_NVREF == ADC_VREF_POS then
         ADCON1_ADREF = 0b_10
      elsif ADC_NVREF != ADC_NO_EXT_VREF then
         _error "ADC_NVREF must be set to ADC_NO_EXT_VREF or ADC_VREF_POS"
      end if
   end if

end procedure



-- Configure Voltage reference using ADPREF bits and ADNREF bit
-- ADNREF isn't necessarily found when ADPREF is:
--   $ diff <(grep ADPREF1 * | sed "s#:var.*
-- tells the following PICs have a Vref+ (ADPREF) but no Vref- (ADNREF):
--   12f1822, 12lf1822, 16f1823, 16lf1823

procedure _adc_vref_adpref_adnref() is

    if defined(ADCON1_ADPREF0) then

        if ADC_NVREF == ADC_NO_EXT_VREF then
            ADCON1_ADPREF0 = 0b0
            ADCON1_ADPREF1 = 0b0
            if defined(ADCON1_ADNREF) then
               ADCON1_ADNREF = 0b0
            end if
        elsif ADC_NVREF == ADC_VREF_POS then
            -- Vref+ is one Vref+ pin
            ADCON1_ADPREF0 = 0b0
            ADCON1_ADPREF1 = 0b1
        elsif ADC_NVREF == ADC_VREF_POS_NEG then
            -- Vref+ is on Vref+ pin
            -- Vref- is on Vref- pin
            ADCON1_ADPREF0 = 0b0
            ADCON1_ADPREF1 = 0b1
            if !defined(ADCON1_ADNREF) then
               _error "You seem to want to configure a Vref- pin, but selected PIC doesn't support this feature"
            else
               ADCON1_ADNREF = 0b1
            end if
        elsif ADC_NVREF == ADC_VREF_NEG then
            -- Vref- is on Vref- pin (no Vref+)
            if !defined(ADCON1_ADNREF) then
               _error "You seem to want to configure a Vref- pin, but selected PIC doesn't support this feature"
            else
               ADCON1_ADNREF = 0b1    
            end if
        end if
    end if

end procedure


-- -----------------------------------------
-- FIRST CASE: 
--  - PCFG bits exist, 
--  - analog are dependent from each other
--  - Vref config is done via PCFG bits
--    combination
-- -----------------------------------------

if target_chip == PIC_16F72 | target_chip == PIC_16F767 | target_chip == PIC_16F777 | target_chip == PIC_16F747 | target_chip == PIC_16F737 | target_chip == PIC_16F876A | target_chip == PIC_16F873A | target_chip == PIC_16F877A | target_chip == PIC_16F874A | target_chip == PIC_18F4525 | target_chip == PIC_18F2525 | target_chip == PIC_18F2620 | target_chip == PIC_18F4620 | target_chip == PIC_18F2550 | target_chip == PIC_18F4550 | target_chip == PIC_18F4455 | target_chip == PIC_18F2455 | target_chip == PIC_18F4520 | target_chip == PIC_18F2520 | target_chip == PIC_18F2420 | target_chip == PIC_18F4420 | target_chip == PIC_16F870 | target_chip == PIC_16F871 | target_chip == PIC_18F4450 | target_chip == PIC_18F2450 | target_chip == PIC_18F442 | target_chip == PIC_18F252 | target_chip == PIC_18F452 | target_chip == PIC_18F242 | target_chip == PIC_18F6585 | target_chip == PIC_18F8680 | target_chip == PIC_18F6680 | target_chip == PIC_18F8585 | target_chip == PIC_18F2553 | target_chip == PIC_18F4553 | target_chip == PIC_18F2458 | target_chip == PIC_18F4458 | target_chip == PIC_16F73 | target_chip == PIC_16F74 | target_chip == PIC_16F77 | target_chip == PIC_16F76 | target_chip == PIC_16F872 | target_chip == PIC_16F873 | target_chip == PIC_16F874 | target_chip == PIC_16F876 | target_chip == PIC_16F877 | target_chip == PIC_18F4539 | target_chip == PIC_18F2539 | target_chip == PIC_18F2439 | target_chip == PIC_18F4439 | target_chip == PIC_18F2680 | target_chip == PIC_18F4680 | target_chip == PIC_18F2585 | target_chip == PIC_18F4585 | target_chip == PIC_18F66J93 | target_chip == PIC_18F67J93 | target_chip == PIC_18F86J93 | target_chip == PIC_18F87J93 | target_chip == PIC_16F818 | target_chip == PIC_16F819 | target_chip == PIC_16F716 then
   _debug "ADC channels config: dependent pins, via PCFG bits"
   
   procedure _adc_setup_pins() is
      pragma inline
   
   
      -- Datasheet: 39597
      if target_chip == PIC_16F72 then
   
   

         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [18] = {0b_111, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_100, 0b_101, 0b_0, 0b_0, 0b_0, 0b_0, 0b_000, 0b_001, 0b_0}
         var bit*3 no_vref = 0
         var bit*3 one_vref = 0
         var bit*3 two_vref = 0

         if (ADC_NCHANNEL) == 0 then
            asm nop
         elsif (ADC_NCHANNEL) == 1 then
            asm nop
         elsif (ADC_NCHANNEL) == 2 then
            asm nop
         elsif (ADC_NCHANNEL) == 3 then
            pin_AN0_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 4 then
            asm nop
         elsif (ADC_NCHANNEL) == 5 then
            pin_AN4_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN1_direction = input
         end if

      end if
   
   
   
   
      -- Datasheet: 30498
      if target_chip == PIC_16F777 | target_chip == PIC_16F747 then
   
   

         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [45] = {0b_1111, 0b_0, 0b_0, 0b_1110, 0b_0, 0b_0, 0b_1101, 0b_0, 0b_0, 0b_1100, 0b_0, 0b_0, 0b_1011, 0b_0, 0b_0, 0b_1010, 0b_0, 0b_0, 0b_1001, 0b_0, 0b_0, 0b_1000, 0b_0, 0b_0, 0b_0111, 0b_0, 0b_0, 0b_0110, 0b_0, 0b_0, 0b_0101, 0b_0, 0b_0, 0b_0100, 0b_0, 0b_0, 0b_0011, 0b_0, 0b_0, 0b_0010, 0b_0, 0b_0, 0b_0000, 0b_0, 0b_0}
         var bit*4 no_vref = 0
         var bit*4 one_vref = 0
         var bit*4 two_vref = 0

         if (ADC_NCHANNEL) == 0 then
            asm nop
         elsif (ADC_NCHANNEL) == 1 then
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 2 then
            pin_AN1_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 3 then
            pin_AN2_direction = input
            pin_AN1_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 4 then
            pin_AN2_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 5 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 6 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN5_direction = input
         elsif (ADC_NCHANNEL) == 7 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN5_direction = input
         elsif (ADC_NCHANNEL) == 8 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN5_direction = input
         elsif (ADC_NCHANNEL) == 9 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN5_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 10 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN5_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 11 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN5_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 12 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN11_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN5_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 13 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN11_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN12_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN5_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 14 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN11_direction = input
            pin_AN1_direction = input
            pin_AN13_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN12_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN5_direction = input
            pin_AN8_direction = input
         end if

      end if
   
   
      -- Datasheet: 30498
      if target_chip == PIC_16F767 | target_chip == PIC_16F737 then
   
   

         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [36] = {0b_1111, 0b_0, 0b_0, 0b_1110, 0b_0, 0b_0, 0b_1101, 0b_0, 0b_0, 0b_1100, 0b_0, 0b_0, 0b_1011, 0b_0, 0b_0, 0b_1000, 0b_0, 0b_0, 0b_0110, 0b_0, 0b_0, 0b_0101, 0b_0, 0b_0, 0b_0100, 0b_0, 0b_0, 0b_0011, 0b_0, 0b_0, 0b_0010, 0b_0, 0b_0, 0b_0000, 0b_0, 0b_0}
         var bit*4 no_vref = 0
         var bit*4 one_vref = 0
         var bit*4 two_vref = 0

         if (ADC_NCHANNEL) == 0 then
            asm nop
         elsif (ADC_NCHANNEL) == 1 then
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 2 then
            pin_AN1_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 3 then
            pin_AN2_direction = input
            pin_AN1_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 4 then
            pin_AN2_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 5 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 6 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 7 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 8 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 9 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN11_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 10 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN11_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN12_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 11 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN11_direction = input
            pin_AN1_direction = input
            pin_AN13_direction = input
            pin_AN3_direction = input
            pin_AN12_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN8_direction = input
         end if

      end if
   
   
   
   
      -- Datasheet: 39582
      if target_chip == PIC_16F876A | target_chip == PIC_16F873A then
   
   

         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [18] = {0b_0110, 0b_0, 0b_0, 0b_1110, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0100, 0b_0, 0b_1111, 0b_0, 0b_0101, 0b_1101, 0b_1001, 0b_1010, 0b_1000}
         var bit*4 no_vref = 0
         var bit*4 one_vref = 0
         var bit*4 two_vref = 0

         if (ADC_NCHANNEL) == 0 then
            asm nop
         elsif (ADC_NCHANNEL) == 1 then
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 2 then
            asm nop
         elsif (ADC_NCHANNEL) == 3 then
            pin_AN0_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 4 then
            pin_AN1_direction = input
            pin_AN0_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 5 then
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN0_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         end if

      end if
   
   
      -- Datasheet: 39582
      if target_chip == PIC_16F877A | target_chip == PIC_16F874A then
   
   

         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [27] = {0b_0110, 0b_0, 0b_0, 0b_1110, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0100, 0b_0, 0b_1111, 0b_0, 0b_0101, 0b_1101, 0b_0010, 0b_0011, 0b_1100, 0b_1001, 0b_1010, 0b_1011, 0b_0, 0b_0, 0b_0, 0b_0000, 0b_0001, 0b_1000}
         var bit*4 no_vref = 0
         var bit*4 one_vref = 0
         var bit*4 two_vref = 0

         if (ADC_NCHANNEL) == 0 then
            asm nop
         elsif (ADC_NCHANNEL) == 1 then
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 2 then
            asm nop
         elsif (ADC_NCHANNEL) == 3 then
            pin_AN0_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 4 then
            pin_AN1_direction = input
            pin_AN0_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 5 then
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN0_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 6 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN5_direction = input
         elsif (ADC_NCHANNEL) == 7 then
            asm nop
         elsif (ADC_NCHANNEL) == 8 then
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN0_direction = input
            pin_AN5_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         end if

      end if
   
   
   
   
      -- Datasheet: 39626
      if target_chip == PIC_18F2525 | target_chip == PIC_18F2620 then
   
   

         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [33] = {0b_1111, 0b_0, 0b_0, 0b_1110, 0b_0, 0b_0, 0b_1101, 0b_0, 0b_0, 0b_1100, 0b_0, 0b_0, 0b_1011, 0b_0, 0b_0, 0b_1000, 0b_0, 0b_0, 0b_0110, 0b_0, 0b_0, 0b_0101, 0b_0, 0b_0, 0b_0100, 0b_0, 0b_0, 0b_0011, 0b_0, 0b_0, 0b_0000, 0b_0, 0b_0}
         var bit*4 no_vref = 0
         var bit*4 one_vref = 0
         var bit*4 two_vref = 0

         if (ADC_NCHANNEL) == 0 then
            asm nop
         elsif (ADC_NCHANNEL) == 1 then
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 2 then
            pin_AN1_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 3 then
            pin_AN2_direction = input
            pin_AN1_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 4 then
            pin_AN2_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 5 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 6 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 7 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 8 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 9 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN11_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 10 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN11_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN12_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN8_direction = input
         end if

      end if
   
   
      -- Datasheet: 39626
      if target_chip == PIC_18F4525 | target_chip == PIC_18F4620 then
   
   

         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [42] = {0b_1111, 0b_0, 0b_0, 0b_1110, 0b_0, 0b_0, 0b_1101, 0b_0, 0b_0, 0b_1100, 0b_0, 0b_0, 0b_1011, 0b_0, 0b_0, 0b_1010, 0b_0, 0b_0, 0b_1001, 0b_0, 0b_0, 0b_1000, 0b_0, 0b_0, 0b_0111, 0b_0, 0b_0, 0b_0110, 0b_0, 0b_0, 0b_0101, 0b_0, 0b_0, 0b_0100, 0b_0, 0b_0, 0b_0011, 0b_0, 0b_0, 0b_0000, 0b_0, 0b_0}
         var bit*4 no_vref = 0
         var bit*4 one_vref = 0
         var bit*4 two_vref = 0

         if (ADC_NCHANNEL) == 0 then
            asm nop
         elsif (ADC_NCHANNEL) == 1 then
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 2 then
            pin_AN1_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 3 then
            pin_AN2_direction = input
            pin_AN1_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 4 then
            pin_AN2_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 5 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 6 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN5_direction = input
         elsif (ADC_NCHANNEL) == 7 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN5_direction = input
         elsif (ADC_NCHANNEL) == 8 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN5_direction = input
         elsif (ADC_NCHANNEL) == 9 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN5_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 10 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN5_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 11 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN5_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 12 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN11_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN5_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 13 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN11_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN12_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN5_direction = input
            pin_AN8_direction = input
         end if

      end if
   
   
   
   
      -- Datasheet: 39632
      if target_chip == PIC_18F2550 | target_chip == PIC_18F2455 then
   
   

         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [33] = {0b_1111, 0b_0, 0b_0, 0b_1110, 0b_0, 0b_0, 0b_1101, 0b_0, 0b_0, 0b_1100, 0b_0, 0b_0, 0b_1011, 0b_0, 0b_0, 0b_1000, 0b_0, 0b_0, 0b_0110, 0b_0, 0b_0, 0b_0101, 0b_0, 0b_0, 0b_0100, 0b_0, 0b_0, 0b_0011, 0b_0, 0b_0, 0b_0000, 0b_0, 0b_0}
         var bit*4 no_vref = 0
         var bit*4 one_vref = 0
         var bit*4 two_vref = 0

         if (ADC_NCHANNEL) == 0 then
            asm nop
         elsif (ADC_NCHANNEL) == 1 then
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 2 then
            pin_AN1_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 3 then
            pin_AN2_direction = input
            pin_AN1_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 4 then
            pin_AN2_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 5 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 6 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 7 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 8 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 9 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN11_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 10 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN11_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN12_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN8_direction = input
         end if

      end if
   
   
      -- Datasheet: 39632
      if target_chip == PIC_18F4550 | target_chip == PIC_18F4455 then
   
   

         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [42] = {0b_1111, 0b_0, 0b_0, 0b_1110, 0b_0, 0b_0, 0b_1101, 0b_0, 0b_0, 0b_1100, 0b_0, 0b_0, 0b_1011, 0b_0, 0b_0, 0b_1010, 0b_0, 0b_0, 0b_1001, 0b_0, 0b_0, 0b_1000, 0b_0, 0b_0, 0b_0111, 0b_0, 0b_0, 0b_0110, 0b_0, 0b_0, 0b_0101, 0b_0, 0b_0, 0b_0100, 0b_0, 0b_0, 0b_0011, 0b_0, 0b_0, 0b_0000, 0b_0, 0b_0}
         var bit*4 no_vref = 0
         var bit*4 one_vref = 0
         var bit*4 two_vref = 0

         if (ADC_NCHANNEL) == 0 then
            asm nop
         elsif (ADC_NCHANNEL) == 1 then
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 2 then
            pin_AN1_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 3 then
            pin_AN2_direction = input
            pin_AN1_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 4 then
            pin_AN2_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 5 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 6 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN5_direction = input
         elsif (ADC_NCHANNEL) == 7 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN5_direction = input
         elsif (ADC_NCHANNEL) == 8 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN5_direction = input
         elsif (ADC_NCHANNEL) == 9 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN5_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 10 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN5_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 11 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN5_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 12 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN11_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN5_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 13 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN11_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN12_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN5_direction = input
            pin_AN8_direction = input
         end if

      end if
   
   
   
   
      -- Datasheet: 39631
      if target_chip == PIC_18F2520 | target_chip == PIC_18F2420 then
   
   

         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [33] = {0b_1111, 0b_0, 0b_0, 0b_1110, 0b_0, 0b_0, 0b_1101, 0b_0, 0b_0, 0b_1100, 0b_0, 0b_0, 0b_1011, 0b_0, 0b_0, 0b_1000, 0b_0, 0b_0, 0b_0110, 0b_0, 0b_0, 0b_0101, 0b_0, 0b_0, 0b_0100, 0b_0, 0b_0, 0b_0011, 0b_0, 0b_0, 0b_0000, 0b_0, 0b_0}
         var bit*4 no_vref = 0
         var bit*4 one_vref = 0
         var bit*4 two_vref = 0

         if (ADC_NCHANNEL) == 0 then
            asm nop
         elsif (ADC_NCHANNEL) == 1 then
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 2 then
            pin_AN1_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 3 then
            pin_AN2_direction = input
            pin_AN1_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 4 then
            pin_AN2_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 5 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 6 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 7 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 8 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 9 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN11_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 10 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN11_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN12_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN8_direction = input
         end if

      end if
   
   
      -- Datasheet: 39631
      if target_chip == PIC_18F4520 | target_chip == PIC_18F4420 then
   
   

         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [42] = {0b_1111, 0b_0, 0b_0, 0b_1110, 0b_0, 0b_0, 0b_1101, 0b_0, 0b_0, 0b_1100, 0b_0, 0b_0, 0b_1011, 0b_0, 0b_0, 0b_1010, 0b_0, 0b_0, 0b_1001, 0b_0, 0b_0, 0b_1000, 0b_0, 0b_0, 0b_0111, 0b_0, 0b_0, 0b_0110, 0b_0, 0b_0, 0b_0101, 0b_0, 0b_0, 0b_0100, 0b_0, 0b_0, 0b_0011, 0b_0, 0b_0, 0b_0000, 0b_0, 0b_0}
         var bit*4 no_vref = 0
         var bit*4 one_vref = 0
         var bit*4 two_vref = 0

         if (ADC_NCHANNEL) == 0 then
            asm nop
         elsif (ADC_NCHANNEL) == 1 then
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 2 then
            pin_AN1_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 3 then
            pin_AN2_direction = input
            pin_AN1_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 4 then
            pin_AN2_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 5 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 6 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN5_direction = input
         elsif (ADC_NCHANNEL) == 7 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN5_direction = input
         elsif (ADC_NCHANNEL) == 8 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN5_direction = input
         elsif (ADC_NCHANNEL) == 9 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN5_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 10 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN5_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 11 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN5_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 12 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN11_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN5_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 13 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN11_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN12_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN5_direction = input
            pin_AN8_direction = input
         end if

      end if
   
   
   
   
      -- Datasheet: 30569
      if target_chip == PIC_16F870 then
   
   

         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [18] = {0b_0110, 0b_0, 0b_0, 0b_1110, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0100, 0b_0101, 0b_1111, 0b_0, 0b_0, 0b_1101, 0b_1001, 0b_1010, 0b_1000}
         var bit*4 no_vref = 0
         var bit*4 one_vref = 0
         var bit*4 two_vref = 0

         if (ADC_NCHANNEL) == 0 then
            asm nop
         elsif (ADC_NCHANNEL) == 1 then
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 2 then
            asm nop
         elsif (ADC_NCHANNEL) == 3 then
            pin_AN0_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 4 then
            pin_AN0_direction = input
            pin_AN1_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 5 then
            pin_AN4_direction = input
            pin_AN0_direction = input
            pin_AN1_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         end if

      end if
   
   
      -- Datasheet: 30569
      if target_chip == PIC_16F871 then
   
   

         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [27] = {0b_0110, 0b_0, 0b_0, 0b_1110, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0100, 0b_0101, 0b_1111, 0b_0, 0b_0, 0b_1101, 0b_0010, 0b_0011, 0b_1100, 0b_1001, 0b_1010, 0b_1011, 0b_0, 0b_0, 0b_0, 0b_0000, 0b_0001, 0b_1000}
         var bit*4 no_vref = 0
         var bit*4 one_vref = 0
         var bit*4 two_vref = 0

         if (ADC_NCHANNEL) == 0 then
            asm nop
         elsif (ADC_NCHANNEL) == 1 then
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 2 then
            asm nop
         elsif (ADC_NCHANNEL) == 3 then
            pin_AN0_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 4 then
            pin_AN0_direction = input
            pin_AN1_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 5 then
            pin_AN4_direction = input
            pin_AN0_direction = input
            pin_AN1_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 6 then
            pin_AN5_direction = input
            pin_AN4_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN1_direction = input
         elsif (ADC_NCHANNEL) == 7 then
            asm nop
         elsif (ADC_NCHANNEL) == 8 then
            pin_AN7_direction = input
            pin_AN5_direction = input
            pin_AN6_direction = input
            pin_AN4_direction = input
            pin_AN0_direction = input
            pin_AN1_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         end if

      end if
   
   
   
   
      -- Datasheet: 39625
      if target_chip == PIC_18F2680 | target_chip == PIC_18F2585 then
   
   

         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [27] = {0b_1111, 0b_0, 0b_0, 0b_1110, 0b_0, 0b_0, 0b_1101, 0b_0, 0b_0, 0b_1100, 0b_0, 0b_0, 0b_1011, 0b_0, 0b_0, 0b_1000, 0b_0, 0b_0, 0b_0110, 0b_0, 0b_0, 0b_0101, 0b_0, 0b_0, 0b_0000, 0b_0, 0b_0}
         var bit*4 no_vref = 0
         var bit*4 one_vref = 0
         var bit*4 two_vref = 0

         if (ADC_NCHANNEL) == 0 then
            asm nop
         elsif (ADC_NCHANNEL) == 1 then
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 2 then
            pin_AN1_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 3 then
            pin_AN2_direction = input
            pin_AN1_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 4 then
            pin_AN2_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 5 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 6 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN8_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 7 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN8_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
         elsif (ADC_NCHANNEL) == 8 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN8_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
         end if

      end if
   
   
      -- Datasheet: 39625
      if target_chip == PIC_18F4680 | target_chip == PIC_18F4585 then
   
   

         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [36] = {0b_1111, 0b_0, 0b_0, 0b_1110, 0b_0, 0b_0, 0b_1101, 0b_0, 0b_0, 0b_1100, 0b_0, 0b_0, 0b_1011, 0b_0, 0b_0, 0b_1010, 0b_0, 0b_0, 0b_1001, 0b_0, 0b_0, 0b_1000, 0b_0, 0b_0, 0b_0111, 0b_0, 0b_0, 0b_0110, 0b_0, 0b_0, 0b_0101, 0b_0, 0b_0, 0b_0000, 0b_0, 0b_0}
         var bit*4 no_vref = 0
         var bit*4 one_vref = 0
         var bit*4 two_vref = 0

         if (ADC_NCHANNEL) == 0 then
            asm nop
         elsif (ADC_NCHANNEL) == 1 then
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 2 then
            pin_AN1_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 3 then
            pin_AN2_direction = input
            pin_AN1_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 4 then
            pin_AN2_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 5 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 6 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN5_direction = input
         elsif (ADC_NCHANNEL) == 7 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN5_direction = input
         elsif (ADC_NCHANNEL) == 8 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN5_direction = input
         elsif (ADC_NCHANNEL) == 9 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN8_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN5_direction = input
         elsif (ADC_NCHANNEL) == 10 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN8_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN5_direction = input
         elsif (ADC_NCHANNEL) == 11 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN8_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN5_direction = input
         end if

      end if
   
   
   
   
      -- Datasheet: 39564
      if target_chip == PIC_18F252 | target_chip == PIC_18F242 then
   
   

         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [18] = {0b_0110, 0b_0, 0b_0, 0b_1110, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0100, 0b_0101, 0b_1111, 0b_0, 0b_0, 0b_1101, 0b_1001, 0b_1010, 0b_1000}
         var bit*4 no_vref = 0
         var bit*4 one_vref = 0
         var bit*4 two_vref = 0

         if (ADC_NCHANNEL) == 0 then
            asm nop
         elsif (ADC_NCHANNEL) == 1 then
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 2 then
            asm nop
         elsif (ADC_NCHANNEL) == 3 then
            pin_AN0_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 4 then
            pin_AN0_direction = input
            pin_AN1_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 5 then
            pin_AN4_direction = input
            pin_AN0_direction = input
            pin_AN1_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         end if

      end if
   
   
      -- Datasheet: 39564
      if target_chip == PIC_18F442 | target_chip == PIC_18F452 then
   
   

         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [27] = {0b_0110, 0b_0, 0b_0, 0b_1110, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0100, 0b_0101, 0b_1111, 0b_0, 0b_0, 0b_1101, 0b_0010, 0b_0011, 0b_1100, 0b_1001, 0b_1010, 0b_1011, 0b_0, 0b_0, 0b_0, 0b_0000, 0b_0001, 0b_1000}
         var bit*4 no_vref = 0
         var bit*4 one_vref = 0
         var bit*4 two_vref = 0

         if (ADC_NCHANNEL) == 0 then
            asm nop
         elsif (ADC_NCHANNEL) == 1 then
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 2 then
            asm nop
         elsif (ADC_NCHANNEL) == 3 then
            pin_AN0_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 4 then
            pin_AN0_direction = input
            pin_AN1_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 5 then
            pin_AN4_direction = input
            pin_AN0_direction = input
            pin_AN1_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 6 then
            pin_AN5_direction = input
            pin_AN4_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN1_direction = input
         elsif (ADC_NCHANNEL) == 7 then
            asm nop
         elsif (ADC_NCHANNEL) == 8 then
            pin_AN7_direction = input
            pin_AN5_direction = input
            pin_AN6_direction = input
            pin_AN4_direction = input
            pin_AN0_direction = input
            pin_AN1_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         end if

      end if
   
   
   
   
      -- Datasheet: 39760
      if target_chip == PIC_18F2450 then
   
   

         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [33] = {0b_1111, 0b_0, 0b_0, 0b_1110, 0b_0, 0b_0, 0b_1101, 0b_0, 0b_0, 0b_1100, 0b_0, 0b_0, 0b_1011, 0b_0, 0b_0, 0b_1000, 0b_0, 0b_0, 0b_0110, 0b_0, 0b_0, 0b_0101, 0b_0, 0b_0, 0b_0100, 0b_0, 0b_0, 0b_0011, 0b_0, 0b_0, 0b_0000, 0b_0, 0b_0}
         var bit*4 no_vref = 0
         var bit*4 one_vref = 0
         var bit*4 two_vref = 0

         if (ADC_NCHANNEL) == 0 then
            asm nop
         elsif (ADC_NCHANNEL) == 1 then
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 2 then
            pin_AN1_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 3 then
            pin_AN2_direction = input
            pin_AN1_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 4 then
            pin_AN2_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 5 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 6 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 7 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 8 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 9 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN11_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 10 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN11_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN12_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN8_direction = input
         end if

      end if
   
   
      -- Datasheet: 39760
      if target_chip == PIC_18F4450 then
   
   

         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [42] = {0b_1111, 0b_0, 0b_0, 0b_1110, 0b_0, 0b_0, 0b_1101, 0b_0, 0b_0, 0b_1100, 0b_0, 0b_0, 0b_1011, 0b_0, 0b_0, 0b_1010, 0b_0, 0b_0, 0b_1001, 0b_0, 0b_0, 0b_1000, 0b_0, 0b_0, 0b_0111, 0b_0, 0b_0, 0b_0110, 0b_0, 0b_0, 0b_0101, 0b_0, 0b_0, 0b_0100, 0b_0, 0b_0, 0b_0011, 0b_0, 0b_0, 0b_0000, 0b_0, 0b_0}
         var bit*4 no_vref = 0
         var bit*4 one_vref = 0
         var bit*4 two_vref = 0

         if (ADC_NCHANNEL) == 0 then
            asm nop
         elsif (ADC_NCHANNEL) == 1 then
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 2 then
            pin_AN1_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 3 then
            pin_AN2_direction = input
            pin_AN1_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 4 then
            pin_AN2_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 5 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 6 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN5_direction = input
         elsif (ADC_NCHANNEL) == 7 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN5_direction = input
         elsif (ADC_NCHANNEL) == 8 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN5_direction = input
         elsif (ADC_NCHANNEL) == 9 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN5_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 10 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN5_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 11 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN5_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 12 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN11_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN5_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 13 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN11_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN12_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN5_direction = input
            pin_AN8_direction = input
         end if

      end if
   
   
   
   
      -- Datasheet: 39887
      if target_chip == PIC_18F2553 | target_chip == PIC_18F2458 then
   
   

         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [33] = {0b_1111, 0b_0, 0b_0, 0b_1110, 0b_0, 0b_0, 0b_1101, 0b_0, 0b_0, 0b_1100, 0b_0, 0b_0, 0b_1011, 0b_0, 0b_0, 0b_1000, 0b_0, 0b_0, 0b_0110, 0b_0, 0b_0, 0b_0101, 0b_0, 0b_0, 0b_0100, 0b_0, 0b_0, 0b_0011, 0b_0, 0b_0, 0b_0000, 0b_0, 0b_0}
         var bit*4 no_vref = 0
         var bit*4 one_vref = 0
         var bit*4 two_vref = 0

         if (ADC_NCHANNEL) == 0 then
            asm nop
         elsif (ADC_NCHANNEL) == 1 then
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 2 then
            pin_AN1_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 3 then
            pin_AN2_direction = input
            pin_AN1_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 4 then
            pin_AN2_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 5 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 6 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 7 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 8 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 9 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN11_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 10 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN11_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN12_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN8_direction = input
         end if

      end if
   
   
      -- Datasheet: 39887
      if target_chip == PIC_18F4553 | target_chip == PIC_18F4458 then
   
   

         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [42] = {0b_1111, 0b_0, 0b_0, 0b_1110, 0b_0, 0b_0, 0b_1101, 0b_0, 0b_0, 0b_1100, 0b_0, 0b_0, 0b_1011, 0b_0, 0b_0, 0b_1010, 0b_0, 0b_0, 0b_1001, 0b_0, 0b_0, 0b_1000, 0b_0, 0b_0, 0b_0111, 0b_0, 0b_0, 0b_0110, 0b_0, 0b_0, 0b_0101, 0b_0, 0b_0, 0b_0100, 0b_0, 0b_0, 0b_0011, 0b_0, 0b_0, 0b_0000, 0b_0, 0b_0}
         var bit*4 no_vref = 0
         var bit*4 one_vref = 0
         var bit*4 two_vref = 0

         if (ADC_NCHANNEL) == 0 then
            asm nop
         elsif (ADC_NCHANNEL) == 1 then
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 2 then
            pin_AN1_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 3 then
            pin_AN2_direction = input
            pin_AN1_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 4 then
            pin_AN2_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 5 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 6 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN5_direction = input
         elsif (ADC_NCHANNEL) == 7 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN5_direction = input
         elsif (ADC_NCHANNEL) == 8 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN5_direction = input
         elsif (ADC_NCHANNEL) == 9 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN5_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 10 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN5_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 11 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN5_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 12 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN11_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN5_direction = input
            pin_AN8_direction = input
         elsif (ADC_NCHANNEL) == 13 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN10_direction = input
            pin_AN11_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN3_direction = input
            pin_AN12_direction = input
            pin_AN0_direction = input
            pin_AN9_direction = input
            pin_AN5_direction = input
            pin_AN8_direction = input
         end if

      end if
   
   
   
   
      -- Datasheet: 30325
      if target_chip == PIC_16F73 | target_chip == PIC_16F76 then
   
   

         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [18] = {0b_110, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_100, 0b_101, 0b_0, 0b_0, 0b_0, 0b_0, 0b_000, 0b_001, 0b_0}
         var bit*3 no_vref = 0
         var bit*3 one_vref = 0
         var bit*3 two_vref = 0

         if (ADC_NCHANNEL) == 0 then
            asm nop
         elsif (ADC_NCHANNEL) == 1 then
            asm nop
         elsif (ADC_NCHANNEL) == 2 then
            asm nop
         elsif (ADC_NCHANNEL) == 3 then
            pin_AN0_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 4 then
            asm nop
         elsif (ADC_NCHANNEL) == 5 then
            pin_AN4_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN1_direction = input
         end if

      end if
   
   
      -- Datasheet: 30325
      if target_chip == PIC_16F74 | target_chip == PIC_16F77 then
   
   

         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [27] = {0b_110, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_100, 0b_101, 0b_0, 0b_0, 0b_0, 0b_0, 0b_010, 0b_011, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_000, 0b_001, 0b_0}
         var bit*3 no_vref = 0
         var bit*3 one_vref = 0
         var bit*3 two_vref = 0

         if (ADC_NCHANNEL) == 0 then
            asm nop
         elsif (ADC_NCHANNEL) == 1 then
            asm nop
         elsif (ADC_NCHANNEL) == 2 then
            asm nop
         elsif (ADC_NCHANNEL) == 3 then
            pin_AN0_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 4 then
            asm nop
         elsif (ADC_NCHANNEL) == 5 then
            pin_AN4_direction = input
            pin_AN2_direction = input
            pin_AN0_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 6 then
            asm nop
         elsif (ADC_NCHANNEL) == 7 then
            asm nop
         elsif (ADC_NCHANNEL) == 8 then
            pin_AN7_direction = input
            pin_AN5_direction = input
            pin_AN6_direction = input
            pin_AN4_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN1_direction = input
         end if

      end if
   
   
   
   
      -- Datasheet: 30221
      if target_chip == PIC_16F872 then
   
   

         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [18] = {0b_0110, 0b_0, 0b_0, 0b_1110, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0100, 0b_0101, 0b_1111, 0b_0, 0b_0, 0b_1101, 0b_1001, 0b_1010, 0b_1000}
         var bit*4 no_vref = 0
         var bit*4 one_vref = 0
         var bit*4 two_vref = 0

         if (ADC_NCHANNEL) == 0 then
            asm nop
         elsif (ADC_NCHANNEL) == 1 then
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 2 then
            asm nop
         elsif (ADC_NCHANNEL) == 3 then
            pin_AN0_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 4 then
            pin_AN0_direction = input
            pin_AN1_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 5 then
            pin_AN4_direction = input
            pin_AN0_direction = input
            pin_AN1_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         end if

      end if
   
   
   
   
      -- Datasheet: 30491
      if target_chip == PIC_18F8680 | target_chip == PIC_18F8585 then
   
   

         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [51] = {0b_1111, 0b_0, 0b_0, 0b_1110, 0b_0, 0b_0, 0b_1101, 0b_0, 0b_0, 0b_1100, 0b_0, 0b_0, 0b_1011, 0b_0, 0b_0, 0b_1010, 0b_0, 0b_0, 0b_1001, 0b_0, 0b_0, 0b_1000, 0b_0, 0b_0, 0b_0111, 0b_0, 0b_0, 0b_0110, 0b_0, 0b_0, 0b_0101, 0b_0, 0b_0, 0b_0100, 0b_0, 0b_0, 0b_0011, 0b_0, 0b_0, 0b_0010, 0b_0, 0b_0, 0b_0001, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0000, 0b_0, 0b_0}
         var bit*4 no_vref = 0
         var bit*4 one_vref = 0
         var bit*4 two_vref = 0

         if (ADC_NCHANNEL) == 0 then
            asm nop
         elsif (ADC_NCHANNEL) == 1 then
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 2 then
            pin_AN1_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 3 then
            pin_AN2_direction = input
            pin_AN1_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 4 then
            pin_AN2_direction = input
            pin_AN1_direction = input
            pin_AN0_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 5 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN0_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 6 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN5_direction = input
            pin_AN0_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 7 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN5_direction = input
            pin_AN0_direction = input
            pin_AN3_direction = input
            pin_AN6_direction = input
         elsif (ADC_NCHANNEL) == 8 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN5_direction = input
            pin_AN7_direction = input
            pin_AN0_direction = input
            pin_AN3_direction = input
            pin_AN6_direction = input
         elsif (ADC_NCHANNEL) == 9 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN8_direction = input
            pin_AN1_direction = input
            pin_AN5_direction = input
            pin_AN7_direction = input
            pin_AN0_direction = input
            pin_AN3_direction = input
            pin_AN6_direction = input
         elsif (ADC_NCHANNEL) == 10 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN9_direction = input
            pin_AN8_direction = input
            pin_AN1_direction = input
            pin_AN5_direction = input
            pin_AN7_direction = input
            pin_AN0_direction = input
            pin_AN3_direction = input
            pin_AN6_direction = input
         elsif (ADC_NCHANNEL) == 11 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN9_direction = input
            pin_AN8_direction = input
            pin_AN1_direction = input
            pin_AN5_direction = input
            pin_AN7_direction = input
            pin_AN0_direction = input
            pin_AN3_direction = input
            pin_AN10_direction = input
            pin_AN6_direction = input
         elsif (ADC_NCHANNEL) == 12 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN9_direction = input
            pin_AN8_direction = input
            pin_AN1_direction = input
            pin_AN5_direction = input
            pin_AN7_direction = input
            pin_AN0_direction = input
            pin_AN3_direction = input
            pin_AN10_direction = input
            pin_AN11_direction = input
            pin_AN6_direction = input
         elsif (ADC_NCHANNEL) == 13 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN9_direction = input
            pin_AN8_direction = input
            pin_AN1_direction = input
            pin_AN5_direction = input
            pin_AN12_direction = input
            pin_AN7_direction = input
            pin_AN0_direction = input
            pin_AN3_direction = input
            pin_AN10_direction = input
            pin_AN11_direction = input
            pin_AN6_direction = input
         elsif (ADC_NCHANNEL) == 14 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN9_direction = input
            pin_AN8_direction = input
            pin_AN1_direction = input
            pin_AN5_direction = input
            pin_AN12_direction = input
            pin_AN13_direction = input
            pin_AN7_direction = input
            pin_AN0_direction = input
            pin_AN3_direction = input
            pin_AN10_direction = input
            pin_AN11_direction = input
            pin_AN6_direction = input
         elsif (ADC_NCHANNEL) == 15 then
            asm nop
         elsif (ADC_NCHANNEL) == 16 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN15_direction = input
            pin_AN9_direction = input
            pin_AN8_direction = input
            pin_AN1_direction = input
            pin_AN5_direction = input
            pin_AN12_direction = input
            pin_AN13_direction = input
            pin_AN7_direction = input
            pin_AN0_direction = input
            pin_AN3_direction = input
            pin_AN10_direction = input
            pin_AN14_direction = input
            pin_AN11_direction = input
            pin_AN6_direction = input
         end if

      end if
   
   
      -- Datasheet: 30491
      if target_chip == PIC_18F6585 | target_chip == PIC_18F6680 then
   
   

         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [39] = {0b_1111, 0b_0, 0b_0, 0b_1110, 0b_0, 0b_0, 0b_1101, 0b_0, 0b_0, 0b_1100, 0b_0, 0b_0, 0b_1011, 0b_0, 0b_0, 0b_1010, 0b_0, 0b_0, 0b_1001, 0b_0, 0b_0, 0b_1000, 0b_0, 0b_0, 0b_0111, 0b_0, 0b_0, 0b_0110, 0b_0, 0b_0, 0b_0101, 0b_0, 0b_0, 0b_0100, 0b_0, 0b_0, 0b_0010, 0b_0, 0b_0}
         var bit*4 no_vref = 0
         var bit*4 one_vref = 0
         var bit*4 two_vref = 0

         if (ADC_NCHANNEL) == 0 then
            asm nop
         elsif (ADC_NCHANNEL) == 1 then
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 2 then
            pin_AN1_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 3 then
            pin_AN2_direction = input
            pin_AN1_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 4 then
            pin_AN2_direction = input
            pin_AN1_direction = input
            pin_AN0_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 5 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN0_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 6 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN5_direction = input
            pin_AN0_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 7 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN5_direction = input
            pin_AN0_direction = input
            pin_AN3_direction = input
            pin_AN6_direction = input
         elsif (ADC_NCHANNEL) == 8 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN5_direction = input
            pin_AN7_direction = input
            pin_AN0_direction = input
            pin_AN3_direction = input
            pin_AN6_direction = input
         elsif (ADC_NCHANNEL) == 9 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN8_direction = input
            pin_AN1_direction = input
            pin_AN5_direction = input
            pin_AN7_direction = input
            pin_AN0_direction = input
            pin_AN3_direction = input
            pin_AN6_direction = input
         elsif (ADC_NCHANNEL) == 10 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN9_direction = input
            pin_AN8_direction = input
            pin_AN1_direction = input
            pin_AN5_direction = input
            pin_AN7_direction = input
            pin_AN0_direction = input
            pin_AN3_direction = input
            pin_AN6_direction = input
         elsif (ADC_NCHANNEL) == 11 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN9_direction = input
            pin_AN8_direction = input
            pin_AN1_direction = input
            pin_AN5_direction = input
            pin_AN7_direction = input
            pin_AN0_direction = input
            pin_AN3_direction = input
            pin_AN10_direction = input
            pin_AN6_direction = input
         elsif (ADC_NCHANNEL) == 12 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN9_direction = input
            pin_AN8_direction = input
            pin_AN1_direction = input
            pin_AN5_direction = input
            pin_AN7_direction = input
            pin_AN0_direction = input
            pin_AN3_direction = input
            pin_AN10_direction = input
            pin_AN11_direction = input
            pin_AN6_direction = input
         end if

      end if
   
   
   
   
      -- Datasheet: 30292
      if target_chip == PIC_16F873 | target_chip == PIC_16F876 then
   
   

         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [18] = {0b_0110, 0b_0, 0b_0, 0b_1110, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0100, 0b_0101, 0b_1111, 0b_0, 0b_0, 0b_1101, 0b_1001, 0b_1010, 0b_1000}
         var bit*4 no_vref = 0
         var bit*4 one_vref = 0
         var bit*4 two_vref = 0

         if (ADC_NCHANNEL) == 0 then
            asm nop
         elsif (ADC_NCHANNEL) == 1 then
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 2 then
            asm nop
         elsif (ADC_NCHANNEL) == 3 then
            pin_AN0_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 4 then
            pin_AN0_direction = input
            pin_AN1_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 5 then
            pin_AN4_direction = input
            pin_AN0_direction = input
            pin_AN1_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         end if

      end if
   
   
      -- Datasheet: 30292
      if target_chip == PIC_16F874 | target_chip == PIC_16F877 then
   
   

         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [27] = {0b_0110, 0b_0, 0b_0, 0b_1110, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0100, 0b_0101, 0b_1111, 0b_0, 0b_0, 0b_1101, 0b_0010, 0b_0011, 0b_1100, 0b_1001, 0b_1010, 0b_1011, 0b_0, 0b_0, 0b_0, 0b_0000, 0b_0001, 0b_1000}
         var bit*4 no_vref = 0
         var bit*4 one_vref = 0
         var bit*4 two_vref = 0

         if (ADC_NCHANNEL) == 0 then
            asm nop
         elsif (ADC_NCHANNEL) == 1 then
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 2 then
            asm nop
         elsif (ADC_NCHANNEL) == 3 then
            pin_AN0_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 4 then
            pin_AN0_direction = input
            pin_AN1_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 5 then
            pin_AN4_direction = input
            pin_AN0_direction = input
            pin_AN1_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 6 then
            pin_AN5_direction = input
            pin_AN4_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN1_direction = input
         elsif (ADC_NCHANNEL) == 7 then
            asm nop
         elsif (ADC_NCHANNEL) == 8 then
            pin_AN7_direction = input
            pin_AN5_direction = input
            pin_AN6_direction = input
            pin_AN4_direction = input
            pin_AN0_direction = input
            pin_AN1_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         end if

      end if
   
   
   
   
      -- Datasheet: 39598
      if target_chip == PIC_16F818 | target_chip == PIC_16F819 then
   
   

         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [18] = {0b_0110, 0b_0, 0b_0, 0b_1110, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0100, 0b_0101, 0b_1111, 0b_0, 0b_0, 0b_1101, 0b_1001, 0b_1010, 0b_1000}
         var bit*4 no_vref = 0
         var bit*4 one_vref = 0
         var bit*4 two_vref = 0

         if (ADC_NCHANNEL) == 0 then
            asm nop
         elsif (ADC_NCHANNEL) == 1 then
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 2 then
            asm nop
         elsif (ADC_NCHANNEL) == 3 then
            pin_AN0_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 4 then
            pin_AN0_direction = input
            pin_AN1_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 5 then
            pin_AN0_direction = input
            pin_AN1_direction = input
            pin_AN4_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         end if

      end if
   
   
   
   
      -- Datasheet: 39948
      if target_chip == PIC_18F66J93 | target_chip == PIC_18F67J93 | target_chip == PIC_18F86J93 | target_chip == PIC_18F87J93 then
   
   

         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [39] = {0b_1111, 0b_0, 0b_0, 0b_1110, 0b_0, 0b_0, 0b_1101, 0b_0, 0b_0, 0b_1100, 0b_0, 0b_0, 0b_1011, 0b_0, 0b_0, 0b_1010, 0b_0, 0b_0, 0b_1001, 0b_0, 0b_0, 0b_1000, 0b_0, 0b_0, 0b_0111, 0b_0, 0b_0, 0b_0110, 0b_0, 0b_0, 0b_0101, 0b_0, 0b_0, 0b_0100, 0b_0, 0b_0, 0b_0000, 0b_0, 0b_0}
         var bit*4 no_vref = 0
         var bit*4 one_vref = 0
         var bit*4 two_vref = 0

         if (ADC_NCHANNEL) == 0 then
            asm nop
         elsif (ADC_NCHANNEL) == 1 then
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 2 then
            pin_AN1_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 3 then
            pin_AN2_direction = input
            pin_AN1_direction = input
            pin_AN0_direction = input
         elsif (ADC_NCHANNEL) == 4 then
            pin_AN2_direction = input
            pin_AN1_direction = input
            pin_AN0_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 5 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN0_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 6 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN5_direction = input
            pin_AN0_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 7 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN5_direction = input
            pin_AN0_direction = input
            pin_AN3_direction = input
            pin_AN6_direction = input
         elsif (ADC_NCHANNEL) == 8 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN5_direction = input
            pin_AN0_direction = input
            pin_AN3_direction = input
            pin_AN6_direction = input
         elsif (ADC_NCHANNEL) == 9 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN8_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN5_direction = input
            pin_AN0_direction = input
            pin_AN3_direction = input
            pin_AN6_direction = input
         elsif (ADC_NCHANNEL) == 10 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN8_direction = input
            pin_AN1_direction = input
            pin_AN9_direction = input
            pin_AN7_direction = input
            pin_AN5_direction = input
            pin_AN0_direction = input
            pin_AN3_direction = input
            pin_AN6_direction = input
         elsif (ADC_NCHANNEL) == 11 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN8_direction = input
            pin_AN1_direction = input
            pin_AN9_direction = input
            pin_AN7_direction = input
            pin_AN5_direction = input
            pin_AN0_direction = input
            pin_AN3_direction = input
            pin_AN10_direction = input
            pin_AN6_direction = input
         elsif (ADC_NCHANNEL) == 12 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN8_direction = input
            pin_AN1_direction = input
            pin_AN9_direction = input
            pin_AN7_direction = input
            pin_AN5_direction = input
            pin_AN0_direction = input
            pin_AN3_direction = input
            pin_AN10_direction = input
            pin_AN11_direction = input
            pin_AN6_direction = input
         end if

      end if
   
   
   
   
      -- Datasheet: 30485
      if target_chip == PIC_18F2539 | target_chip == PIC_18F2439 then
   
   

         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [18] = {0b_0110, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0100, 0b_0101, 0b_1110, 0b_0, 0b_0, 0b_1101, 0b_1001, 0b_1010, 0b_1000}
         var bit*4 no_vref = 0
         var bit*4 one_vref = 0
         var bit*4 two_vref = 0

         if (ADC_NCHANNEL) == 0 then
            asm nop
         elsif (ADC_NCHANNEL) == 1 then
            asm nop
         elsif (ADC_NCHANNEL) == 2 then
            asm nop
         elsif (ADC_NCHANNEL) == 3 then
            pin_AN0_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 4 then
            pin_AN1_direction = input
            pin_AN0_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 5 then
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN0_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         end if

      end if
   
   
      -- Datasheet: 30485
      if target_chip == PIC_18F4539 | target_chip == PIC_18F4439 then
   
   

         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [27] = {0b_0110, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0100, 0b_0101, 0b_1110, 0b_0, 0b_0, 0b_1101, 0b_0010, 0b_0011, 0b_1100, 0b_1001, 0b_1010, 0b_1011, 0b_0, 0b_0, 0b_0, 0b_0000, 0b_0001, 0b_1000}
         var bit*4 no_vref = 0
         var bit*4 one_vref = 0
         var bit*4 two_vref = 0

         if (ADC_NCHANNEL) == 0 then
            asm nop
         elsif (ADC_NCHANNEL) == 1 then
            asm nop
         elsif (ADC_NCHANNEL) == 2 then
            asm nop
         elsif (ADC_NCHANNEL) == 3 then
            pin_AN0_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 4 then
            pin_AN1_direction = input
            pin_AN0_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 5 then
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN0_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 6 then
            pin_AN2_direction = input
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN5_direction = input
         elsif (ADC_NCHANNEL) == 7 then
            asm nop
         elsif (ADC_NCHANNEL) == 8 then
            pin_AN4_direction = input
            pin_AN1_direction = input
            pin_AN7_direction = input
            pin_AN6_direction = input
            pin_AN0_direction = input
            pin_AN5_direction = input
            pin_AN2_direction = input
            pin_AN3_direction = input
         end if

      end if
   
   
   
   
      -- Datasheet: 41206
      if target_chip == PIC_16F716 then
   
   

         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [15] = {0b_110, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_0, 0b_100, 0b_101, 0b_0, 0b_000, 0b_001, 0b_0}
         var bit*3 no_vref = 0
         var bit*3 one_vref = 0
         var bit*3 two_vref = 0

         if (ADC_NCHANNEL) == 0 then
            asm nop
         elsif (ADC_NCHANNEL) == 1 then
            asm nop
         elsif (ADC_NCHANNEL) == 2 then
            asm nop
         elsif (ADC_NCHANNEL) == 3 then
            pin_AN0_direction = input
            pin_AN1_direction = input
            pin_AN3_direction = input
         elsif (ADC_NCHANNEL) == 4 then
            pin_AN2_direction = input
            pin_AN3_direction = input
            pin_AN0_direction = input
            pin_AN1_direction = input
         end if

      end if
   
   
   
      -- Vref configuration via PCFG bits are directly linked to the "if" hell just above,
      -- some variable/contant exist and are defined specifically depending on the PICs.
      -- pin setup and vref setup can't be dissociated in the context, this is why this 
      -- Vref setup is included in pin setup procedure

      -- Retrieve config bits according to selected number of ADC channels
      -- ADC_PCFG_MAP contains all confs, from 0 analog to the max
      -- It also contains configuration bits to select Vref+/- pins (case 1.a),
      -- expect when voltage ref is configured separately via VCFG bits (case 1.b).
      -- In case 1.b, ADC_PCFG_MAP only contains configuration bits to set analog pins,
      -- leaving other config as default one. That is, only the first element of 3-tuples
      -- is correctly set, since there were no configuration information for Vref+ and Vref-
      -- pins. Defined VCFG register bits tell us in which case we are, we can thus adjust
      -- shifting value to map 3-tuple elements accordingly.
      if defined(ADCON0_VCFG) | defined(ADCON1_VCFG) then
         const byte ONE_VREF_SHIFT = 0  -- we only want to extract 1st element of each 3-tuples
         const byte TWO_VREF_SHIFT = 0
      else
         const byte ONE_VREF_SHIFT = 1
         const byte TWO_VREF_SHIFT = 2
      end if
      if defined(ADC_DYNAMIC) then
         var byte idx = ADC_NCHANNEL * 3
      else
         const byte idx = ADC_NCHANNEL * 3
      end if
      if ADC_NVREF == ADC_NO_EXT_VREF then
         no_vref = ADC_PCFG_MAP[idx]
         ADCON1_PCFG = no_vref
      elsif ADC_NVREF == ADC_VREF_POS then
         one_vref = ADC_PCFG_MAP[idx + ONE_VREF_SHIFT]
         ADCON1_PCFG = one_vref
      -- In some case, Vref config is done separately (case 1.b), allowing ADC_NVREF = ADC_VREF_NEG
      -- to actually mean something (Vref- only). So we need to care of this case 1.b too
      elsif ADC_NVREF >= ADC_VREF_POS_NEG then
         two_vref = ADC_PCFG_MAP[idx + TWO_VREF_SHIFT]
         ADCON1_PCFG = two_vref
      end if
   end procedure
   


   -- Check whether we're in case 1.a (Vref done through PCFG bits) or
   -- case 1.b (Vref done separately through VCFG bits)
   if defined(ADCON0_VCFG) | defined(ADCON1_VCFG) then
      _debug "Vref config is handled separately through VCFG bits"
      alias _adc_vref is _adc_vref_vcfg
   else
      -- declare dummy procedure for normalization. Note Vref setup, due to some jalv2 contraints
      -- (like defining a constant but assigning its definitive value later), Vref setup is done
      -- while discovering/setting up ADC pins. See comment within _adc_setup_pins() for dependent pins
      _debug "Vref config is included in PCFG bits selection"
      procedure _adc_vref() is
      end procedure
   end if

-- --------------------------------------------
-- SECOND CASE: 
--  - PCFG bits exist 
--  - analog are independent from each other
--  - Vref config is done via VCFG bits
-- --------------------------------------------

elsif target_cpu == PIC_16 & (defined(ANCON0_PCFG0) | defined(ANCON0_PCFG1) | defined(ANCON0_PCFG2) | defined(ANCON0_PCFG3) | defined(ANCON0_PCFG4) | defined(ANCON0_PCFG5) | defined(ANCON0_PCFG6) | defined(ANCON0_PCFG7) | defined(ANCON1_PCFG10) | defined(ANCON1_PCFG11) | defined(ANCON1_PCFG12) | defined(ANCON1_PCFG8) | defined(ANCON1_PCFG9)) then

   _debug "ADC channels config: independent pins, via PCFG bits"

   -- This is party time, in this case, these are independent pins, user has access
   -- to set_analog_pin()/set_digital_pin(), *AND* (that's why it's party time) also
   -- can configure number of ADC channel with ADC_NCHANNEL !
   procedure _adc_setup_pins() is
      -- Selecting the number of ADC channels is done using PCFG bits
      -- User can optionally specify ADC channels number
      if defined(ADC_NCHANNEL) then
         if ADC_NCHANNEL > ADC_NTOTAL_CHANNEL then
            _error "More ADC channels than available, adjust ADC_NCHANNEL"
         end if
         -- Max 13 ADC channels
         -- At least 1 channel
         if ADC_NCHANNEL > 0 then
            ANCON0_PCFG0 = false
            pin_AN0_direction = input
         end if
         -- At least 2 channels
         if ADC_NCHANNEL > 1 then
            ANCON0_PCFG1 = false
            pin_AN1_direction = input
         end if
         -- At least 3 channels
         if ADC_NCHANNEL > 2 then
             ANCON0_PCFG2 = false
            pin_AN2_direction = input
         end if
         -- At least 4 channels
         if ADC_NCHANNEL > 3 then
            ANCON0_PCFG3 = false
            pin_AN3_direction = input
         end if
         -- At least 5 channels
         if ADC_NCHANNEL > 4 then
            ANCON0_PCFG4 = false
            pin_AN4_direction = input
         end if
         -- At least 6 channels
         if ADC_NCHANNEL > 5 then
            ANCON0_PCFG5 = false
            pin_AN5_direction = input
         end if
         -- At least 7 channels
         if ADC_NCHANNEL > 6 then
            ANCON0_PCFG6 = false
            pin_AN6_direction = input
         end if
         -- At least 8 channels
         if ADC_NCHANNEL > 7 then
            ANCON0_PCFG7 = false
            pin_AN7_direction = input
         end if
         -- At least 9 channels
         if ADC_NCHANNEL > 8 then
            ANCON1_PCFG8 = false
            pin_AN8_direction = input
         end if
         -- At least 10 channels
         if ADC_NCHANNEL > 9 then
            ANCON1_PCFG9 = false
            pin_AN9_direction = input
         end if
         -- At least 11 channels
         if ADC_NCHANNEL > 10 then
            ANCON1_PCFG10 = false
            pin_AN10_direction = input
         end if
         -- At least 12 channels
         if ADC_NCHANNEL > 11 then
            ANCON1_PCFG11 = false
            pin_AN11_direction = input
         end if
         -- At least 13 channels
         if ADC_NCHANNEL > 12 then
            ANCON1_PCFG12 = false
            pin_AN12_direction = input
         end if
      end if
   end procedure

   -- Or specify manually which pin should act as ADC
   -- Provide procedure for this (eg. for pin AN7 to be analog, set_analog_pin(7))

   -- Configure a pin to act as an analog pin.
   -- an_pin_num references the 'x' in ANx notation.
   -- Say you want to activate pin AN7, which is pin #12, also named RA4 in digital mode:
   --     - set_analog_pin(7) will set this pin as analog
   --     - set_analog_pin(12) won't set this pin as analog, but the equivalent
   --       one named AN12, if any
   --     - set_analog_pin(4) will do the same for AN4
   procedure set_analog_pin(byte in an_pin_num) is
      -- There's a mininum of 5 channels, so ANCON0_PCFG0, ANCON0_PCFG1,
      -- ANCON0_PCFG2, ANCON0_PCFG3 and ANCON0_PCFG4 are always defined
      if an_pin_num == 0 then
         ANCON0_PCFG0 = false
         pin_AN0_direction = input
      end if
      if an_pin_num == 1 then
         ANCON0_PCFG1 = false
         pin_AN1_direction = input
      end if
      if an_pin_num == 2 then
         ANCON0_PCFG2 = false
         pin_AN2_direction = input
      end if
      if an_pin_num == 3 then
         ANCON0_PCFG3 = false
         pin_AN3_direction = input
      end if
      if an_pin_num == 4 then
         ANCON0_PCFG4 = false
         pin_AN4_direction = input
      end if

      -- Sometimes, there are gaps in PCFG bits
      -- 18lf24j50 has PCFG0 to PCFG12 bits, but without PCFG5, PCFG6 and PCFG7
      -- (this is because these bits only exist in the 44-pins version, according to DS)
      -- This shouldn't be a problem because numbering between PCFG bits and
      -- analog pins is respected: there's no AN5, AN6 and AN7 as well)

      -- PCFG5, PCFG6 and PCFG7 are always found together
      if defined(ANCON0_PCFG5) & defined(ANCON0_PCFG6) & defined(ANCON0_PCFG7) then
         if an_pin_num == 5 then
            ANCON0_PCFG5 = false
            pin_AN5_direction = input
         end if
         if an_pin_num == 6 then
            ANCON0_PCFG6 = false
            pin_AN6_direction = input
         end if
         if an_pin_num == 7 then
            ANCON0_PCFG7 = false
            pin_AN7_direction = input
         end if
      end if

      -- PCFG8, PCFG9, PCFG10, PCFG11 and PCFG12 are always found together
      if defined(ANCON1_PCFG8) & defined(ANCON1_PCFG9) & defined(ANCON1_PCFG10) & defined(ANCON1_PCFG11) & defined(ANCON1_PCFG12) then
         if an_pin_num == 8 then
            ANCON1_PCFG8 = false
            pin_AN8_direction = input
         end if
         if an_pin_num == 9 then
            ANCON1_PCFG9 = false
            pin_AN9_direction = input
         end if
         if an_pin_num == 10 then
            ANCON1_PCFG10 = false
            pin_AN10_direction = input
         end if
         if an_pin_num == 11 then
            ANCON1_PCFG11 = false
            pin_AN11_direction = input
         end if
         if an_pin_num == 12 then
            ANCON1_PCFG12 = false
            pin_AN12_direction = input
         end if
      end if
   end procedure

   -- Configure a pin to act as an digital pin.
   -- Because setting a pin to act as digital makes only sens for
   -- pins which can also be configured as analog,
   -- an_pin_num references the 'x' in ANx notation.
   -- Say you want to deactivate pin AN7, which is pin #12, also named RA4 in digital mode:
   --     - set_digital_pin(7) will set this pin as digital
   --     - set_analog_pin(12) won't set this pin as digital, but the equivalent
   --       one named AN12, if any
   --     - set_analog_pin(4) will do the same for AN4
   -- 
   -- Note: the pin direction is not modified
   procedure set_digital_pin(byte in an_pin_num) is
      if an_pin_num == 0 then
         ANCON0_PCFG0 = true
         pin_AN0_direction = input
      end if
      if an_pin_num == 1 then
         ANCON0_PCFG1 = true
         pin_AN1_direction = input
      end if
      if an_pin_num == 2 then
         ANCON0_PCFG2 = true
         pin_AN2_direction = input
      end if
      if an_pin_num == 3 then
         ANCON0_PCFG3 = true
         pin_AN3_direction = input
      end if
      if an_pin_num == 4 then
         ANCON0_PCFG4 = true
         pin_AN4_direction = input
      end if

      -- PCFG5, PCFG6 and PCFG7 are always found together
      if defined(ANCON0_PCFG5) & defined(ANCON0_PCFG6) & defined(ANCON0_PCFG7) then
         if an_pin_num == 5 then
            ANCON0_PCFG5 = true
            pin_AN5_direction = input
         end if
         if an_pin_num == 6 then
            ANCON0_PCFG6 = true
            pin_AN6_direction = input
         end if
         if an_pin_num == 7 then
            ANCON0_PCFG7 = true
            pin_AN7_direction = input
         end if
      end if

      -- PCFG8, PCFG9, PCFG10, PCFG11 and PCFG12 are always found together
      if defined(ANCON1_PCFG8) & defined(ANCON1_PCFG9) & defined(ANCON1_PCFG10) & defined(ANCON1_PCFG11) & defined(ANCON1_PCFG12) then
         if an_pin_num == 8 then
            ANCON1_PCFG8 = true
            pin_AN8_direction = input
         end if
         if an_pin_num == 9 then
            ANCON1_PCFG9 = true
            pin_AN9_direction = input
         end if
         if an_pin_num == 10 then
            ANCON1_PCFG10 = true
            pin_AN10_direction = input
         end if
         if an_pin_num == 11 then
            ANCON1_PCFG11 = true
            pin_AN11_direction = input
         end if
         if an_pin_num == 12 then
            ANCON1_PCFG12 = true
            pin_AN12_direction = input
         end if
      end if
   end procedure



   if defined(ADCON0_VCFG) | defined(ADCON1_VCFG) | defined(ADCON1_PVCFG) then
      alias _adc_vref is _adc_vref_vcfg
   elsif defined(ADCON1_ADREF) then
      alias _adc_vref is _adc_vref_adref
   elsif defined(ADCON1_ADPREF0) then
    alias _adc_vref is _adc_vref_adpref_adnref
   else
      _warn " \n\tUnable to find how Vref is setup with this chip, selection Vref won't work\n\tPlease report !"
      -- just create a dummy procedure, to honor normalization, but Vref setup
      -- won't be available !
      procedure _adc_vref() is
      end procedure
   end if




-- --------------------------------------------
-- THIRD CASE: 
--  - ANS bits exist, 
--  - analog are independent from each other
--  - Vref config is done via VCFG bits
-- --------------------------------------------

else
   _debug "ADC channels config: independent pins, via ANS bits"
   -- Selecting the number of ADC channels is done using ANS bits
   -- There are many different cases where ANS bits can be found
   --   - bit*2 ADCON0_ANS
   --   - bit ANSEL0_ANSx (x in [0,7])
   --   - bit ANSEL1_ANSx (x in [8,11])
   --   - bit*6 ANSELA_ANSA
   --   - bit*6 ANSELB_ANSB
   --   - byte ANSELD_ANSD
   --   - bit*3 ANSELE_ANSE
   --   - bit*4 ANSELH_ANSELH
   --   - bit*4 ANSEL_ANS
   --   - bit ANSEL_ANSx (x in [0,7] or x in [0,4], or x in [0,1]U[4,7], or x in [0,6])
   --   - bit ANSEL_ANSELx (0 <= x <= 7, or 3 <= x <= 7)
   --   - bit ANSELH_ANSx (8 <= x <= 13, or 8 <= x <= 12)
   --
   -- There is a need for normalization...
   -- ANS bits are now normalized in device files :)
   -- I (Seb) keep these grep & sed rules as tools to check future changes

   -- Provide helper func to configure pins either in digital or analog mode
   -- (/!\, true/false logic is inverted compared to PCFGx bits)

   -- Some exceptions have been reported related to 16f72X family. These devises
   -- have gaps within their analog pins, but ANSx bits are contigous. For instance,
   -- for 16f722, JANSEL_ANS5 should refer to analog pin AN5, but it does not exist !
   -- These exceptions are handled in device files.
   -- Guilty PICs: 16F722, 16F723, 16F724, 16F726, 16F727 + LF versions

   -- Contrary to independent ADC pins managed by PCFG bits, choosing the number
   -- of ADC channels can only be done with set_analog_pin()/set_digital_pin().
   -- Let's declare a dummy procedure to honor normalization
   procedure _adc_setup_pins() is
   end procedure

   -- Configure a pin to act as an analog pin.
   -- an_pin_num references the 'x' in ANx notation.
   -- Say you want to activate pin AN7, which is pin #12, also named RA4 in digital mode:
   --     - set_analog_pin(7) will set this pin as analog
   --     - set_analog_pin(12) won't set this pin as analog, but the equivalent
   --       one named AN12, if any
   --     - set_analog_pin(4) will do the same for AN4
   procedure set_analog_pin(byte in an_pin_num) is
      if defined(JANSEL_ANS0) then
         if an_pin_num == 0 then
            JANSEL_ANS0 = true
            pin_AN0_direction = input
         end if
      end if
      if defined(JANSEL_ANS1) then
         if an_pin_num == 1 then
            JANSEL_ANS1 = true
            pin_AN1_direction = input
         end if
      end if
      if defined(JANSEL_ANS2) then
         if an_pin_num == 2 then
            JANSEL_ANS2 = true
            pin_AN2_direction = input
         end if
      end if
      if defined(JANSEL_ANS3) then
         if an_pin_num == 3 then
            JANSEL_ANS3 = true
            pin_AN3_direction = input
         end if
      end if
      if defined(JANSEL_ANS4) then
         if an_pin_num == 4 then
            JANSEL_ANS4 = true
            pin_AN4_direction = input
         end if
      end if
      if defined(JANSEL_ANS5) then
         if an_pin_num == 5 then
            JANSEL_ANS5 = true
            pin_AN5_direction = input
         end if
      end if
      if defined(JANSEL_ANS6) then
         if an_pin_num == 6 then
            JANSEL_ANS6 = true
            pin_AN6_direction = input
         end if
      end if
      if defined(JANSEL_ANS7) then
         if an_pin_num == 7 then
            JANSEL_ANS7 = true
            pin_AN7_direction = input
         end if
      end if
      if defined(JANSEL_ANS8) then
         if an_pin_num == 8 then
            JANSEL_ANS8 = true
            pin_AN8_direction = input
         end if
      end if
      if defined(JANSEL_ANS9) then
         if an_pin_num == 9 then
            JANSEL_ANS9 = true
            pin_AN9_direction = input
         end if
      end if
      if defined(JANSEL_ANS10) then
         if an_pin_num == 10 then
            JANSEL_ANS10 = true
            pin_AN10_direction = input
         end if
      end if
      if defined(JANSEL_ANS11) then
         if an_pin_num == 11 then
            JANSEL_ANS11 = true
            pin_AN11_direction = input
         end if
      end if
      if defined(JANSEL_ANS12) then
         if an_pin_num == 12 then
            JANSEL_ANS12 = true
            pin_AN12_direction = input
         end if
      end if
      if defined(JANSEL_ANS13) then
         if an_pin_num == 13 then
            JANSEL_ANS13 = true
            pin_AN13_direction = input
         end if
      end if
      if defined(JANSEL_ANS14) then
         if an_pin_num == 14 then
            JANSEL_ANS14 = true
            pin_AN14_direction = input
         end if
      end if
      if defined(JANSEL_ANS15) then
         if an_pin_num == 15 then
            JANSEL_ANS15 = true
            pin_AN15_direction = input
         end if
      end if
      if defined(JANSEL_ANS16) then
         if an_pin_num == 16 then
            JANSEL_ANS16 = true
            pin_AN16_direction = input
         end if
      end if
      if defined(JANSEL_ANS17) then
         if an_pin_num == 17 then
            JANSEL_ANS17 = true
            pin_AN17_direction = input
         end if
      end if
      if defined(JANSEL_ANS18) then
         if an_pin_num == 18 then
            JANSEL_ANS18 = true
            pin_AN18_direction = input
         end if
      end if
      if defined(JANSEL_ANS19) then
         if an_pin_num == 19 then
            JANSEL_ANS19 = true
            pin_AN19_direction = input
         end if
      end if
      if defined(JANSEL_ANS20) then
         if an_pin_num == 20 then
            JANSEL_ANS20 = true
            pin_AN20_direction = input
         end if
      end if
      if defined(JANSEL_ANS21) then
         if an_pin_num == 21 then
            JANSEL_ANS21 = true
            pin_AN21_direction = input
         end if
      end if
      if defined(JANSEL_ANS22) then
         if an_pin_num == 22 then
            JANSEL_ANS22 = true
            pin_AN22_direction = input
         end if
      end if
      if defined(JANSEL_ANS23) then
         if an_pin_num == 23 then
            JANSEL_ANS23 = true
            pin_AN23_direction = input
         end if
      end if
      if defined(JANSEL_ANS24) then
         if an_pin_num == 24 then
            JANSEL_ANS24 = true
            pin_AN24_direction = input
         end if
      end if
      if defined(JANSEL_ANS25) then
         if an_pin_num == 25 then
            JANSEL_ANS25 = true
            pin_AN25_direction = input
         end if
      end if
      if defined(JANSEL_ANS26) then
         if an_pin_num == 26 then
            JANSEL_ANS26 = true
            pin_AN26_direction = input
         end if
      end if
      if defined(JANSEL_ANS27) then
         if an_pin_num == 27 then
            JANSEL_ANS27 = true
            pin_AN27_direction = input
         end if
      end if
      if defined(JANSEL_ANS28) then
         if an_pin_num == 28 then
            JANSEL_ANS28 = true
            pin_AN28_direction = input
         end if
      end if
      if defined(JANSEL_ANS29) then
         if an_pin_num == 29 then
            JANSEL_ANS29 = true
            pin_AN29_direction = input
         end if
      end if
      if !defined(JANSEL_ANS0) & !defined(JANSEL_ANS1) & !defined(JANSEL_ANS2) & !defined(JANSEL_ANS3) & !defined(JANSEL_ANS4) & !defined(JANSEL_ANS5) & !defined(JANSEL_ANS6) & !defined(JANSEL_ANS7) & !defined(JANSEL_ANS8) & !defined(JANSEL_ANS9) & !defined(JANSEL_ANS10) & !defined(JANSEL_ANS11) & !defined(JANSEL_ANS12) & !defined(JANSEL_ANS13) & !defined(JANSEL_ANS14) & !defined(JANSEL_ANS15) & !defined(JANSEL_ANS16) & !defined(JANSEL_ANS17) & !defined(JANSEL_ANS18) & !defined(JANSEL_ANS19) & !defined(JANSEL_ANS20) & !defined(JANSEL_ANS21) & !defined(JANSEL_ANS22) & !defined(JANSEL_ANS23) & !defined(JANSEL_ANS24) & !defined(JANSEL_ANS25) & !defined(JANSEL_ANS26) & !defined(JANSEL_ANS27) & !defined(JANSEL_ANS28) & !defined(JANSEL_ANS29) then
         _error "\n\tUnable to configure ADC channels.\n\tConfiguration is supposed to be done using ANS bits\n\tbut it seems there's no ANS bits for this PIC.\n\tMaybe your PIC isn't supported, please report !"
      end if
   end procedure

   -- Configure a pin to act as an digital pin.
   -- Because setting a pin to act as digital makes only sens for
   -- pins which can also be configured as analog,
   -- an_pin_num references the 'x' in ANx notation.
   -- Say you want to deactivate pin AN7, which is pin #12, also named RA4 in digital mode:
   --     - set_digital_pin(7) will set this pin as digital
   --     - set_analog_pin(12) won't set this pin as digital, but the equivalent
   --       one named AN12, if any
   --     - set_analog_pin(4) will do the same for AN4
   -- 
   -- Note: the pin direction is not modified
   procedure set_digital_pin(byte in an_pin_num) is
      if defined(JANSEL_ANS0) then
         if an_pin_num == 0 then
            JANSEL_ANS0 = false
         end if
      end if
      if defined(JANSEL_ANS1) then
         if an_pin_num == 1 then
            JANSEL_ANS1 = false
         end if
      end if
      if defined(JANSEL_ANS2) then
         if an_pin_num == 2 then
            JANSEL_ANS2 = false
         end if
      end if
      if defined(JANSEL_ANS3) then
         if an_pin_num == 3 then
            JANSEL_ANS3 = false
         end if
      end if
      if defined(JANSEL_ANS4) then
         if an_pin_num == 4 then
            JANSEL_ANS4 = false
         end if
      end if
      if defined(JANSEL_ANS5) then
         if an_pin_num == 5 then
            JANSEL_ANS5 = false
         end if
      end if
      if defined(JANSEL_ANS6) then
         if an_pin_num == 6 then
            JANSEL_ANS6 = false
         end if
      end if
      if defined(JANSEL_ANS7) then
         if an_pin_num == 7 then
            JANSEL_ANS7 = false
         end if
      end if
      if defined(JANSEL_ANS8) then
         if an_pin_num == 8 then
            JANSEL_ANS8 = false
         end if
      end if
      if defined(JANSEL_ANS9) then
         if an_pin_num == 9 then
            JANSEL_ANS9 = false
         end if
      end if
      if defined(JANSEL_ANS10) then
         if an_pin_num == 10 then
            JANSEL_ANS10 = false
         end if
      end if
      if defined(JANSEL_ANS11) then
         if an_pin_num == 11 then
            JANSEL_ANS11 = false
         end if
      end if
      if defined(JANSEL_ANS12) then
         if an_pin_num == 12 then
            JANSEL_ANS12 = false
         end if
      end if
      if defined(JANSEL_ANS13) then
         if an_pin_num == 13 then
            JANSEL_ANS13 = false
         end if
      end if
      if defined(JANSEL_ANS14) then
         if an_pin_num == 14 then
            JANSEL_ANS14 = false
         end if
      end if
      if defined(JANSEL_ANS15) then
         if an_pin_num == 15 then
            JANSEL_ANS15 = false
         end if
      end if
      if defined(JANSEL_ANS16) then
         if an_pin_num == 16 then
            JANSEL_ANS16 = false
         end if
      end if
      if defined(JANSEL_ANS17) then
         if an_pin_num == 17 then
            JANSEL_ANS17 = false
         end if
      end if
      if defined(JANSEL_ANS18) then
         if an_pin_num == 18 then
            JANSEL_ANS18 = false
         end if
      end if
      if defined(JANSEL_ANS19) then
         if an_pin_num == 19 then
            JANSEL_ANS19 = false
         end if
      end if
      if defined(JANSEL_ANS20) then
         if an_pin_num == 20 then
            JANSEL_ANS20 = false
         end if
      end if
      if defined(JANSEL_ANS21) then
         if an_pin_num == 21 then
            JANSEL_ANS21 = false
         end if
      end if
      if defined(JANSEL_ANS22) then
         if an_pin_num == 22 then
            JANSEL_ANS22 = false
         end if
      end if
      if defined(JANSEL_ANS23) then
         if an_pin_num == 23 then
            JANSEL_ANS23 = false
         end if
      end if
      if defined(JANSEL_ANS24) then
         if an_pin_num == 24 then
            JANSEL_ANS24 = false
         end if
      end if
      if defined(JANSEL_ANS25) then
         if an_pin_num == 25 then
            JANSEL_ANS25 = false
         end if
      end if
      if defined(JANSEL_ANS26) then
         if an_pin_num == 26 then
            JANSEL_ANS26 = false
         end if
      end if
      if defined(JANSEL_ANS27) then
         if an_pin_num == 27 then
            JANSEL_ANS27 = false
         end if
      end if
      if defined(JANSEL_ANS28) then
         if an_pin_num == 28 then
            JANSEL_ANS28 = false
         end if
      end if
      if defined(JANSEL_ANS29) then
         if an_pin_num == 29 then
            JANSEL_ANS29 = false
         end if
      end if
   end procedure

   -- Because there are many different combinations when specifying the number of
   -- wanted adc channles, because I think it's more user-friendly to use 
   -- set_analog_pin() instead of specifying ADC_NCHANNEL and then always wondering
   -- which ADC pin to use, and finally, because I'm lazy, there won't be automatic
   -- ADC_NCHANNEL settings in this case
   if defined(ADC_NCHANNEL) then
      _error "You can't specify the number of ADC channel with ADC_NCHANNEL, you have to use set_analog_pin(...)"
   end if



   if defined(ADCON0_VCFG) | defined(ADCON1_VCFG) | defined(ADCON1_PVCFG) then
      alias _adc_vref is _adc_vref_vcfg
   elsif defined(ADCON1_ADREF) then
      alias _adc_vref is _adc_vref_adref
   elsif defined(ADCON1_ADPREF0) then
    alias _adc_vref is _adc_vref_adpref_adnref
   else
      _warn " \n\tUnable to find how Vref is setup with this chip, selection Vref won't work\n\tPlease report !"
      -- just create a dummy procedure, to honor normalization, but Vref setup
      -- won't be available !
      procedure _adc_vref() is
      end procedure
   end if



end if



