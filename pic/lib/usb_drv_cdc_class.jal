-- Title: USB Communication Device Class driver
-- Author: Albert Faber, Copyright (c) 2008..2009, all rights reserved.
-- Adapted-by: -
-- Compiler: >=2.4j
-- Revision: $Revision: 1.1 $
-- 
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
-- 
-- Description: USB Communication Device Class (CDC) code
-- This USB library files contains the low level implementation to perform serial
-- communication over a USB interface. The usage of this library requires detailed
-- knowledge of the USB interface and requires that several configuration parameters
-- are defined correctly. In order to make USB serial communication more accessible 
-- for the end user, I would highly recommend to use the usb_serial library
-- --
-- 
-- Sources: http://www.usb.org for USB specifications
-- 
-- Notes: 
--
-- ------------------------------------------------------
-- ------------------------------------------------------
--
--

if defined( USB_CDC_DEBUG ) == false then
	const bit USB_CDC_DEBUG = false
end if

const byte USB_REQ_SEND_ENCAPSULATED_COMMAND	= 0x00
const byte USB_REQ_GET_ENCAPSULATED_RESPONSE = 0x01
const byte USB_REQ_SET_COMM_FEATURE = 0x02
const byte USB_REQ_CLEAR_COMM_FEATURE = 0x04
const byte USB_REQ_SET_LINE_CODING = 0x20
const byte USB_REQ_GET_LINE_CODING = 0x21
const byte USB_REQ_SET_CONTROL_LINE_STATE = 0x22
const byte USB_REQ_SEND_BREAK = 0x23


-- Line coding struction that defines what (should) happen if we were actually
-- USB to RS232 converter


var volatile byte cdc_line_coding[7]
var volatile dword cdc_line_coding_dte_rate at cdc_line_coding[0]
var volatile byte cdc_line_coding_stop_bits at cdc_line_coding[4]    -- 0=1 stop bit, 1=1.5 stop bits, 2=2 stop bits
var volatile byte cdc_line_coding_parity at cdc_line_coding[5]       -- 0=None, 1=Odd, 2=Even, 3=Mark, 4=Space
var volatile byte cdc_line_coding_data_bits at cdc_line_coding[6]    -- 5,6,7,8 or 16 bits

var byte cdc_line_status = 0x00
var bit last_packet_is_full = false

-- Transmit fifo

if defined(USB_CDC_TX_BUFFER_ADDR) == true then
	var byte cdc_tx_buffer[USB_CDC_TX_BUFFER_SIZE] at USB_CDC_TX_BUFFER_ADDR
else
	var byte cdc_tx_buffer[USB_CDC_TX_BUFFER_SIZE]
end if


var volatile byte cdc_tx_wr=0
var volatile byte cdc_tx_rd=0

if defined(USB_CDC_RX_BUFFER_ADDR) == true then
	var byte cdc_rx_buffer[USB_CDC_RX_BUFFER_SIZE] at USB_CDC_RX_BUFFER_ADDR
else
var byte cdc_rx_buffer[USB_CDC_RX_BUFFER_SIZE]
end if

var volatile byte cdc_rx_wr = 0
var volatile byte cdc_rx_rd = 0
var volatile byte cdc_rx_free = USB_CDC_RX_BUFFER_SIZE

alias cdc_out_stat is usb_bd3out_stat
alias cdc_out_cnt is usb_bd3out_cnt
alias cdc_out_addr is usb_bd3out_addr
alias cdc_out_addrl is usb_bd3out_addrl
alias cdc_out_addrh is usb_bd3out_addrh

alias cdc_in_stat is usb_bd3in_stat
alias cdc_in_cnt is usb_bd3in_cnt
alias cdc_in_addr is usb_bd3in_addr
alias cdc_in_addrl is usb_bd3in_addrl
alias cdc_in_addrh is usb_bd3in_addrh

procedure usb_handle_class_request_callback() is
    pragma inline
    
    -- compiler issue, do local assignment to resolve
    var byte req01 = usb_sdp_request
    var word len = usb_sdp_length
    var word val = usb_sdp_value
    var byte valbt[2] at usb_sdp_value
    
    case (req01) of
		USB_REQ_SEND_BREAK:
		block
			if USB_CDC_DEBUG > 0  then
				const byte str[] = " SET_BREAK "
				print_string(serial_hw_data,str)
			end if
			-- no data, so just ack the status
			usb_control_mode = USB_CM_CTRL_WRITE_SENDING_STATUS
			usb_send_status_ack()
		end block
		USB_REQ_SET_LINE_CODING:
		block
			-- we now expect the line coding to arrive in the data stage
			
			if USB_CDC_DEBUG > 0  then
				const byte str[] = " SET_LINE "
				print_string(serial_hw_data,str)
			end if
			
			var byte bd0_out_buffer[8] at USB_EP0_OUT_ADDR			
			usb_control_mode = USB_CM_CTRL_WRITE_DATA_STAGE_CLASS
		end block
		USB_REQ_GET_LINE_CODING:
		block
			if USB_CDC_DEBUG > 0  then
				const byte str[] = " GET_LINE len="
				print_string(serial_hw_data,str)
				print_byte_hex( serial_hw_data, byte( len) )
				serial_hw_write(" ")			
			end if

if false then

			usb_control_mode = USB_CM_CTRL_READ_DATA_STAGE_CLASS

			--  need to prime ep0 IN with some funky data here
			usb_send_data( 0, cdc_line_coding, 7, 1 )

else
				usb_delivery_bytes_max_send = 0xFF
				usb_delivery_bytes_to_send = 7
				_usb_copy_array_to_ram( USB_IN_DELIVERY_BUFFER_LOC, cdc_line_coding, usb_delivery_bytes_to_send )
				usb_delivery_buffer_size = USB_EP0_IN_SIZE
				-- usb_delivery_bytes_to_send
				usb_control_mode = USB_CM_CTRL_READ_DATA_STAGE
				usb_delivery_bytes_sent = 0
				var bit dts_bit at usb_bd0in_stat : USB_BDSTATUS_DTS
				dts_bit = low				
				
				-- AF ISO OF PRIME
				usb_send_data_chunk()
end if

			-- actually we know this will be the last packet, so go straight to waiting for the status ack
			--usb_control_mode = USB_CM_CTRL_READ_AWAITING_STATUS

		end block
		
		USB_REQ_SET_CONTROL_LINE_STATE:
		block
			if USB_CDC_DEBUG > 0  then
				const byte str[] = "scls=" --dtr = bit 0, rts = bit 1
				print_string(serial_hw_data,str)
				print_byte_hex(serial_hw_data,byte(val))
			end if
			-- no data, so just ack the status
			usb_control_mode = USB_CM_CTRL_WRITE_SENDING_STATUS
			usb_send_status_ack()
			cdc_line_status = valbt[0]
			
			-- Could put a callback here for your own code when DTR or RTS change
		end block
		otherwise
		block
			if USB_CDC_DEBUG > 0  then
				const byte str[] = "UNKNOWN REQUEST= "
				print_string(serial_hw_data,str)
				print_byte_hex(serial_hw_data,usb_sdp_request)
			end if
		end block
	end case
end procedure


procedure usb_handle_class_ctrl_write_callback() is   
    pragma inline

    -- compiler issue, do local assignment to resolve
    var byte req01 = usb_sdp_request
     
    case (req01) of
		USB_REQ_SET_LINE_CODING:
		block
			var byte idx
			var byte bd0_out_buffer[8] at USB_EP0_OUT_ADDR
			
			for count( cdc_line_coding ) using idx loop
				cdc_line_coding[ idx ] = bd0_out_buffer[idx]
			end loop

			
			if USB_CDC_DEBUG > 0  then
				const byte str[] = " st="
				const byte str1[] = " p="
				const byte str2[] = " db="
				
				print_byte_hex(serial_hw_data,cdc_line_coding[0])
				print_byte_hex(serial_hw_data,cdc_line_coding[1])
				print_byte_hex(serial_hw_data,cdc_line_coding[2])
				print_byte_hex(serial_hw_data,cdc_line_coding[3])
				print_string(serial_hw_data,str)
				print_byte_hex(serial_hw_data,cdc_line_coding_stop_bits)
				print_string(serial_hw_data,str1)
				print_byte_hex(serial_hw_data,cdc_line_coding_parity)
				print_string(serial_hw_data,str2)
				print_byte_hex(serial_hw_data,cdc_line_coding_data_bits)
			end if
			
			
			if defined( usb_cdc_line_coding_changed_callback ) == true then
				usb_cdc_line_coding_changed_callback()
			end if
			usb_control_mode = USB_CM_CTRL_WRITE_SENDING_STATUS
			usb_send_status_ack()
			
		end block

		otherwise
		block
			if USB_CDC_DEBUG > 0  then
				const byte str[] = " ??ctrl write cb req="
				print_string(serial_hw_data,str)
				print_byte_hex(serial_hw_data,usb_sdp_request)
				serial_hw_write(" ")
			end if
		end block
	end case
end procedure


procedure usb_handle_class_ctrl_read_callback() is

    -- compiler issue, do local assignment to resolve
    var byte req01 = usb_sdp_request

    case (req01) of
		USB_REQ_GET_LINE_CODING:
		block
			-- we know we've already sent everything, so now wait for status
			usb_control_mode = USB_CM_CTRL_READ_AWAITING_STATUS
		end block
		otherwise
		block
			if USB_CDC_DEBUG > 0  then
				const byte str[] = " cl read ?? "
				print_string(serial_hw_data,str)
				print_byte_hex(serial_hw_data,usb_sdp_request)
			end if
		end block
	end case
end procedure

procedure usb_ep_data_out_callback(byte in end_point, word in buffer_addr, byte in byte_count) is
    pragma inline
    var byte cdc_rx_next
    if USB_CDC_DEBUG > 0  then
        const byte str[] = " EP data out: "
        const byte str1[] = " bytes "
        print_string(serial_hw_data,str)
        print_byte_hex(serial_hw_data,byte_count)
        print_string(serial_hw_data,str1)
    end if
    
    -- We have some data!
    if (end_point == USB_CDC_DATA_ENDPOINT) then
        -- it's the data end point
		var byte src_ptr[2] AT buffer_addr

		FSR1L = src_ptr[0]
		FSR1H = src_ptr[1]
			
        for byte_count loop
            
            cdc_rx_next = cdc_rx_wr + 1	-- get next buffer position
            
            if (cdc_rx_next == USB_CDC_RX_BUFFER_SIZE) then
                -- if we're at the end
                cdc_rx_next = 0	-- then wrap to the beginning
            end if
            
            if (cdc_rx_next != cdc_rx_rd) then
                -- if space in the fifo
				var byte ch = POSTINC1

				if USB_CDC_DEBUG > 0  then
					serial_hw_write("$")
					print_byte_hex(serial_hw_data,cdc_rx_wr)
					serial_hw_write("$")
					print_byte_hex(serial_hw_data,ch)
					serial_newline()
				end if
				
                cdc_rx_buffer[cdc_rx_wr] = ch 
                cdc_rx_wr = cdc_rx_next  -- and move pointer along
                cdc_rx_free = cdc_rx_free - 1
            else
                -- else... just ignore it, we've lost a byte, no room in the fifo
            end if 
        end loop
    else
        if USB_CDC_DEBUG > 0  then
            const byte str[] = "data for ep "
            print_string(serial_hw_data,str)
            print_byte_hex(serial_hw_data,end_point)
        end if
    end if
end procedure

-- --------------------------------------------------------------------------------------
-- This function returns the status of the SIE tx buffer. Either the SIE can own the
-- transmit buffer (tranmit is pending) or it can be owned by the CPU. This function 
-- return true if the SIE owns the buffer, otherwise false is returned
-- --------------------------------------------------------------------------------------
function does_sie_owns_tx_buffer() return bit is 
	pragma inline
	var bit uown_bit shared at cdc_in_stat:USB_BDSTATUS_UOWN
	return uown_bit
end function


-- --------------------------------------------------------------------------------------
-- This procedure will handle the transmission of the (bulk) data. The procedure check
-- if there are pending characters in the tranmit FIFO. These character(s) are send in
-- chunk(s), the chunk size is dependent on the conifguration of the bulk interface
-- endpoint
-- --------------------------------------------------------------------------------------
procedure usb_cdc_handle_tx() is

	var byte bytes_to_send 

	-- var word cdc_tx_addr
	if ( does_sie_owns_tx_buffer() ) then
		-- if there's already something in play
		return
	end if
		
	-- anything in the fifo?
    if ( cdc_tx_wr == cdc_tx_rd ) then
		-- and we don't have to send an empty packet
		if ( !last_packet_is_full ) then
			-- nothing to do, so return
			return
		end if
		bytes_to_send = 0
	else	

		if ( cdc_tx_wr > cdc_tx_rd ) then
			bytes_to_send = cdc_tx_wr - cdc_tx_rd
		else
			-- to keep it simple, don't support splitted buffers
			-- so we don't have to copy the bytes into another array
			bytes_to_send = USB_CDC_TX_BUFFER_SIZE - cdc_tx_rd
		end if

    end if

	-- clip to maximum EP transfer size
	if ( bytes_to_send  > USB_CDC_BULK_IN_EP_SIZE ) then
		bytes_to_send  = USB_CDC_BULK_IN_EP_SIZE
	end if

    
	if USB_CDC_DEBUG > 0  then
		const byte str[] = "send="
		serial_hw_write(">")
		print_string(serial_hw_data,str)
		print_byte_hex(serial_hw_data,bytes_to_send)
		serial_hw_write(" ")
		print_byte_hex(serial_hw_data,cdc_tx_rd)
		serial_hw_write(">")
		print_byte_hex(serial_hw_data,cdc_tx_wr)
		serial_hw_write("#")
	end if
	
	

		var byte idx	
	-- copy bytes
	for bytes_to_send using idx loop
		usb_cdc_eptx_buffer[ idx ] = cdc_tx_buffer[ cdc_tx_rd + idx ]
	end loop
	
	
	
	cdc_in_addr = USB_CDC_BULK_IN_EP_ADDR

	if USB_CDC_DEBUG > 0  then
		print_byte_hex(serial_hw_data, cdc_in_addrh )
		print_byte_hex(serial_hw_data, cdc_in_addrl )
		serial_hw_write("#")
		print_byte_hex(serial_hw_data, cdc_in_stat )
		serial_hw_write("#")
	end if
	
	cdc_in_cnt = bytes_to_send

	
	var volatile bit dts_bit at cdc_in_stat : USB_BDSTATUS_DTS
	if ( dts_bit  ) then
		if USB_CDC_DEBUG > 0  then
			print_byte_hex(serial_hw_data, 0b_1000_1000 )
		end if	
		cdc_in_stat = 0b_1000_1000
	else
		if USB_CDC_DEBUG > 0  then
			print_byte_hex(serial_hw_data, 0b_1100_1000 )
		end if	
		cdc_in_stat = 0b_1100_1000
	end if

	-- advance read pointer
	var byte next_tx_rd = cdc_tx_rd + bytes_to_send

	if (next_tx_rd > ( USB_CDC_TX_BUFFER_SIZE - 1 ))  then
		next_tx_rd = 0
 	end if
 	cdc_tx_rd = next_tx_rd

	-- Mark if we got a full packet (8 bytes),
	last_packet_is_full = ( bytes_to_send == 8 )
	
end procedure

-- --------------------------------------------------------------------------------------
-- This function is called when data can be transmitted via the bulk interface
-- --------------------------------------------------------------------------------------
procedure usb_ep_data_in_callback(byte in end_point, word in buffer_addr, byte in byte_count) is
    pragma inline
    if USB_CDC_DEBUG > 0  then
        const byte str[] = " EP data in: "
        const byte str1[] = " bytes "
        print_string(serial_hw_data,str)
        print_byte_hex(serial_hw_data,byte_count & 0xFF)
        print_string(serial_hw_data,str1)
    end if
    
    -- data has been sent, so do we need to send more?
    if (end_point == USB_CDC_DATA_ENDPOINT) then
        -- it's the data end point
        usb_cdc_handle_tx()
    end if
end procedure

-- --------------------------------------------------------------------------------------
-- This usb_cdc_putc will transmit the specified character. Under normal conditions
-- the character to be transmitted is placed into the fifo, so the call will be non
-- blocking. This implies that buffer overruns can occur when the transmit FIFO is full. 
-- Therefore it is adviced to check the transmit FIFO state before calling this procedure
-- to avoid buffer overruns. These buffer overrun issues have been addressed in the 
-- usb_serial library, therefore it is highly recommended to use this library instead 
-- of calling this low level procedure
-- --------------------------------------------------------------------------------------
procedure usb_cdc_putc(byte in c) is

    var byte cdc_tx_next

    cdc_tx_next = cdc_tx_wr + 1	-- get next buffer position
    
    if (cdc_tx_next == USB_CDC_TX_BUFFER_SIZE) then
		-- if we're at the end
		cdc_tx_next = 0	-- wrap to the beginning
    end if
    
    -- put it in
	cdc_tx_buffer[ cdc_tx_wr] = c 
	
	-- move pointer along
    cdc_tx_wr = cdc_tx_next  
end procedure
    
-- --------------------------------------------------------------------------------------
-- This usb_cdc_getc function wait (blocking) until a character has been received.
-- The byte value of the received character is returned by this function
-- --------------------------------------------------------------------------------------
function usb_cdc_getc() return byte is
    var byte cdc_rx_char, cdc_rx_next
        
    -- get character from the front of the buffer   
    cdc_rx_char = cdc_rx_buffer[ cdc_rx_rd ]	

	-- update fifo free size
	cdc_rx_free = cdc_rx_free + 1

	if USB_CDC_DEBUG > 0  then
		serial_hw_write("<")
		print_byte_hex(serial_hw_data,cdc_rx_rd)
		serial_hw_write("<")
		print_byte_hex(serial_hw_data,cdc_rx_char)
		serial_newline()
	end if
    
    -- move read pointer to next position in fifo
    var byte cdc_rx_rd_next = cdc_rx_rd + 1
    
    if (cdc_rx_rd_next == USB_CDC_RX_BUFFER_SIZE) then
        -- if we're at the end
        cdc_rx_rd_next = 0	-- then wrap to the beginning
    end if
    
    cdc_rx_rd = cdc_rx_rd_next
       
    -- AF TEMP   
 	if USB_CDC_DEBUG > 0  then
		serial_hw_write("<")
	end if
	
    -- return the result we first thought of   
    return cdc_rx_char	
end function

-- --------------------------------------------------------------------------------------
-- This function returns there has been a character received, function will return true 
-- if there is at least one pending receive character, false otherwise
-- --------------------------------------------------------------------------------------
function usb_cdc_rx_avail() return bit is
    return cdc_rx_rd != cdc_rx_wr
end function

-- --------------------------------------------------------------------------------------
-- This function returns the empty status of the transmit FIFO, it will return true if
-- transmit FIFO is empty, false otherwise
-- --------------------------------------------------------------------------------------
function usb_cdc_tx_empty() return byte is
    return cdc_tx_rd == cdc_tx_wr
end function


procedure usb_sof_callback() is
    -- we don't care about the frame number, we only care if there's something to send...
    usb_cdc_handle_tx()	-- start transmission
    
    if ( cdc_rx_free >= 8 ) then
		var bit uown_bit shared at cdc_out_stat:USB_BDSTATUS_UOWN
		if ( uown_bit == false ) then
			usb_prime_epx_out( 3, USB_EP3_OUT_SIZE )
		end if
    end if
    
end procedure


-- --------------------------------------------------------------------------------------
-- This procedure will intialize the line status of the communicatin device class
-- --------------------------------------------------------------------------------------
procedure usb_cdc_setup() is
    cdc_line_coding_dte_rate = 0x0001C200  -- data rate in bits per second , set to 115200
    cdc_line_coding_stop_bits = 0	-- = 1 stop bit
    cdc_line_coding_data_bits = 8	-- = 8 data bits
    cdc_line_coding_parity = 0		-- = No parity
end procedure

-- --------------------------------------------------------------------------------------
-- This function returns the line status. If on the host side the COM port has not been
-- opened, the return status will be 0x00, otherwise it will be != 0
-- --------------------------------------------------------------------------------------
function usb_cdc_line_status() return byte is 
	pragma inline
	return cdc_line_status
end function



