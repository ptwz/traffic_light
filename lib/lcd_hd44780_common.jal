-- -------------------------------------------------------------------------
-- Title: common library for HD44780 based LCD
--
-- Author: Richard Zengerink, Copyright (c) 2008..2011, all rights reserved.
--
-- Adapted-by: Joep Suijs, Rob Hamerling
--
-- Compiler: 2.4n
-- Revision: $Revision: 1.1 $
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: Common API for HD44780 based LCD
--
-- Sources:
--
-- Notes:
--

-- ----------------------------------------------------------------------------
-- constants to control the lcd
-- ----------------------------------------------------------------------------
const LCD_CLEAR_DISPLAY       = 0b_0000_0001
const LCD_RETURN_HOME         = 0b_0000_0010
const LCD_DISPLAY_ONOFF       = 0b_0000_1000
const LCD_CURSOR_SHIFT_R_VAL  = 0b_0001_0100
const LCD_CURSOR_SHIFT_L_VAL  = 0b_0001_0000
const LCD_DISPLAY_SHIFT_RIGHT = 0b_0001_1100
const LCD_DISPLAY_SHIFT_LEFT  = 0b_0001_1000
const LCD_SET_DDRAM_ADDRESS   = 0b_1000_0000
const LCD_SET_CGRAM_ADDRESS   = 0b_0100_0000

-- ----------------------------------------------------------------------------

var volatile byte lcd_pos     = 0

-- ----------------------------------------------------------------------------
-- _lcd_line2index - internal function - calculate index from line number
-- ----------------------------------------------------------------------------
function _lcd_line2index(byte in line) return byte is

   -- force valid line number
   if (line >= LCD_ROWS) then
      line = 0
   end if

   case line of
      0: return 0x00
      1: return 0x40
      2: return 0x00 + LCD_CHARS
      3: return 0x40 + LCD_CHARS
   end case

end function


-- ----------------------------------------------------------------------------
-- _lcd_restore_cursor - sets the cursor to the position in the shadow register
-- (this routine is only used inside this file)
-- ----------------------------------------------------------------------------
procedure _lcd_restore_cursor() is

   pragma inline

   -- set LCD back to normal operation
   _lcd_write_command( lcd_set_ddram_address | lcd_pos )

end procedure


-- ----------------------------------------------------------------------------
-- lcd_write_char - write one char to LCD
-- ----------------------------------------------------------------------------
procedure lcd_write_char(byte in data) is

   pragma inline
   _lcd_write_data(data)

end procedure


-- ----------------------------------------------------------------------------
-- lcd'put - write one char to screen (pseudo var, enables streams)
-- ----------------------------------------------------------------------------
procedure lcd'put(byte in data) is

   _lcd_write_data(data)

end procedure


-- ----------------------------------------------------------------------------
-- lcd_cursor_position - Specify row and column (0-based)
-- .
-- About cursor positions: the LCDs are internally 2x40 char devices.
-- The first line starts at offset 0, the second line at offset 64 (0x40).
-- With 4 line devices the third and fourth line are addressed as extensions
-- of the first and second line by adding an offset. For a 4x20 line device
-- the offset is 20, for a 4x16 line display the offset is 16 or 20.
-- Declare the constant LCD_CHARS as appropriate for your screen
-- (you may have to specify 20 even if your display has only 16 chars!).
-- .
-- Note: Some 1x16 LCDs are implemented as 2x8 line LCDs, which means that
--       the second half of the line has to be handled as a second line.
-- ----------------------------------------------------------------------------
procedure lcd_cursor_position(byte in line, byte in pos) is

   lcd_pos = pos + _lcd_line2index(line)
   _lcd_restore_cursor()

end procedure


-- ----------------------------------------------------------------------------
-- lcd_shift_left - shifts the complete display one position to the left
-- ----------------------------------------------------------------------------
procedure lcd_shift_left(byte in nr) is

   if nr != 0 then
      for nr loop
         _lcd_write_command(LCD_DISPLAY_SHIFT_LEFT)
      end loop
   end if

end procedure


-- ----------------------------------------------------------------------------
-- lcd_shift_right - shifts the complete display one position to the right
-- ----------------------------------------------------------------------------
procedure lcd_shift_right(byte in nr) is

   if nr != 0 then
      for nr loop
         _lcd_write_command(LCD_DISPLAY_SHIFT_RIGHT)
      end loop
   end if

end procedure


-- ----------------------------------------------------------------------------
-- lcd_cursor_shift_left - shifts cursor one position to the left
-- ----------------------------------------------------------------------------
procedure lcd_cursor_shift_left(byte in nr) is

   if nr != 0 then
      for nr loop
         _lcd_write_command(LCD_CURSOR_SHIFT_L_VAL)
      end loop
   end if

end procedure


-- ----------------------------------------------------------------------------
-- lcd_cursor_shift_right - shifts cursor one position to the right
-- ----------------------------------------------------------------------------
procedure lcd_cursor_shift_right(byte in nr) is

   if nr != 0 then
      for nr loop
         _lcd_write_command(LCD_CURSOR_SHIFT_R_VAL)
      end loop
   end if

end procedure


-- ----------------------------------------------------------------------------
-- lcd_clear_screen - clears the LCD
-- ----------------------------------------------------------------------------
procedure lcd_clear_screen()  is

   _lcd_write_command(LCD_CLEAR_DISPLAY)
   delay_10us(180)

end procedure


-- ----------------------------------------------------------------------------
-- lcd_cursor_blink_display - (re)sets cursor blink and puts display on/off
-- .
-- params:
--    cursor:  enable or disable the fixed underline cursor
--    blink:   enable or disable blinking of the block-cursor (so block blinking or off)
--    display: enable or disable the whole display
-- ----------------------------------------------------------------------------
procedure lcd_cursor_blink_display(bit in cursor, bit in blink, bit in display) is

  var byte reg

  reg = LCD_DISPLAY_ONOFF
  if display then
     reg = reg + 4
  end if
  if cursor then
     reg = reg + 2
  end if
  if blink then
     reg = reg + 1
  end if
  _lcd_write_command(reg)

end procedure


-- ----------------------------------------------------------------------------
-- lcd_home - cursor returns home(line 0, position 0)
-- ----------------------------------------------------------------------------
procedure lcd_home()  is

   _lcd_write_command(LCD_RETURN_HOME)
   delay_10us(180)

end procedure


-- ----------------------------------------------------------------------------
-- lcd_clear_line - clears the line "line" of the LCD
-- ----------------------------------------------------------------------------
procedure lcd_clear_line(byte in line) is

   -- set LCD-cursor at start of line
   lcd_pos = _lcd_line2index(line)

   _lcd_restore_cursor()

   -- now fill line with spaces
   for LCD_CHARS loop
      lcd = " "
   end loop

   -- set LCD back to normal operation
   _lcd_restore_cursor()

end procedure


-- ----------------------------------------------------------------------------
-- lcd_progress- Displays a progress bar
-- ----------------------------------------------------------------------------
-- The progress bar starts at position 0 of a line.
--
-- line: line on which progress bar is displayed
-- amount: number of bar chars that are displayed
--
-- (0xFF is a common pattern)
-- ----------------------------------------------------------------------------
procedure lcd_progress(byte in line, byte in amount, byte in pattern) is

   lcd_pos = _lcd_line2index(line)
   _lcd_restore_cursor()

   for amount loop
      lcd = pattern
   end loop

   for (LCD_CHARS - amount) loop
      lcd = " "
   end loop

end procedure

-- ----------------------------------------------------------------------------
-- lcd_define - Create a custom character
-- ----------------------------------------------------------------------------
-- The characters can be placed on position 0-7 of the character ram
-- .
-- pos: position of the character
-- str[]: array containing the custom character
-- .
-- (0xFF is a common pattern)
-- ----------------------------------------------------------------------------
procedure lcd_define(byte in pos, byte in str[]) is

   _lcd_write_command(LCD_SET_CGRAM_ADDRESS | ((pos & 0x07) << 3 ))
   var byte len = byte(count(str))
   if len > 8 then
      len = 8
   end if
   var byte i
   for len using i loop
      _lcd_write_data(str[i])
   end loop

   _lcd_restore_cursor()
end procedure

-- ----------------------------------------------------------------------------
-- Deprecated
procedure lcd_clearscreen()  is
   _warn "lcd_clearscreen() is deprecated - please use lcd_clear_screen()"
   _lcd_write_command(lcd_clear_display)
   delay_10us( 180 )
end procedure

-- Deprecated
procedure lcd_writechar(byte in data) is
   _warn "lcd_writechar() is deprecated - please use lcd_write_char()"
   _lcd_write_data(data)
end procedure

