-- Title: vs1053b mp3 decoder sample
-- Author: Matthew Schinkel, copyright (c) 2009, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4m
-- Revision: $Revision: 1.1 $
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: example usage of the vs1053 mp3 decoder. plays .mp3 files from
--              a fat32 formatted sd card. Full control of play speed, volume,
--              right/left speaker, bass, treble, mute. Also plays
--              Ogg Vorbis/AAC/WMA/MIDI
--
-- Notes:
-- vs1053 uses SPI mode 0,0
-- must use 12.288mhz crystal for vs1053b
--
-- Sources:
-- VLSI Solutions Datasheet - www.vlsi.fi/fileadmin/datasheets/vlsi/vs1053.pdf
--

-- if initialization was ok, this will change to TRUE
var bit vs_init_ok = FALSE

-- you can read these variables after calling vs_file_info()
var dword vs_bitrate              -- bitrate specified in the file's data
var dword vs_average_bitrate      -- actual average speed of incomming data
var word vs_samplerate            -- sample rate (for .mp3 only)
var byte vs_current_file_type[4]  -- holds current file type after vs_file_info()

-- vs1053b registers for use with vs_register_read / vs_register_write procedures
const byte VS_REG_MODE         = 0x00
const byte VS_REG_STATUS       = 0x01
const byte VS_REG_BASS         = 0x02
const byte VS_REG_CLOCKF       = 0x03
const byte VS_REG_DECODE_TIME  = 0x04
const byte VS_REG_AUDATA       = 0x05
const byte VS_REG_WRAM         = 0x06
const byte VS_REG_WRAMADDR     = 0x07
const byte VS_REG_HDAT0        = 0x08
const byte VS_REG_HDAT1        = 0x09
const byte VS_REG_AIADDR       = 0x0A
const byte VS_REG_VOL          = 0x0B
const byte VS_REG_AICTRL0      = 0x0C
const byte VS_REG_AICTRL1      = 0x0D
const byte VS_REG_AICTRL2      = 0x0E
const byte VS_REG_AICTRL3      = 0x0F

-- data variables for internal use only
var byte _vs_play_speed_data = 1
var bit  _vs_mute_data = FALSE

-- bitrate table for .mp3 at 8.7.9 in vs1053b datasheet
const byte _vs_table_layer1_id3[15] = {0,32,64,96,128,160,192,224,256,288,320,352,384,416,448}
const byte _vs_table_layer1_id[15]  = {0,32,48,56,64,80,96,112,128,144,160,176,192,224,256}
const byte _vs_table_layer2_id3[15] = {0,32,48,56,64,80,96,112,128,160,192,224,256,320,384}
const byte _vs_table_layer2_id[15]  = {0,8,16,24,32,40,48,56,64,80,96,112,128,144,160}
const byte _vs_table_layer3_id3[15] = {0,32,40,48,56,64,80,96,112,128,160,192,224,256,320}
const byte _vs_table_layer3_id[15]  = {0,8,16,24,32,40,48,56,64,80,96,112,128,144,160}

-- sample rate table for .mp3 at 8.7.9 in vs1053b datasheet
const word _vs_samplerate_id3[3] = {32000,48000,44100}
const word _vs_samplerate_id2[3] = {16000,24000,22050}
const word _vs_samplerate_id1[3] = {8000,12000,11025}

--------------------------------------------------------------------------------
-- Read from a register
--------------------------------------------------------------------------------
procedure vs_register_read(byte in address,word out data) is
   var dword spi_speed = SSPCON1_SSPM
   -- set spi command speed
   SSPCON1_SSPM = VS_SPI_COMMAND_SPEED -- use slower SPI speed for commands

   -- set spi mode
   if defined(vs_force_spi_mode) == true then
      vs_force_spi_mode()
   end if

   -- wait till device is ready for a command
   while vs_dreq == low loop
   end loop

   -- get current state of data chip select
   var bit vs_data_chip_select_level = vs_data_chip_select

   vs_data_chip_select = high    -- disable data chip select
   vs_command_chip_select = LOW  -- activate command chip select

   var byte data_val[2] at data

   spi_master_hw = 3             -- send read command
   _usec_delay(12);
   spi_master_hw = address;      -- send address
   _usec_delay(12);
   data_val[1] = spi_master_hw   -- get first data byte
   _usec_delay(12);
   data_val[0] = spi_master_hw   -- get 2nd data byte

   -- wait till device is ready to continue
   while vs_dreq == low loop
   end loop

   vs_command_chip_select = HIGH -- disable command chip select

   -- put data chip select back to it's original state
   vs_data_chip_select = vs_data_chip_select_level

   SSPCON1_SSPM = spi_speed --put spi_speed back to original
end procedure

--------------------------------------------------------------------------------
-- Write to a register
--------------------------------------------------------------------------------
procedure vs_register_write(byte in address, word in data) is
   var dword spi_speed = SSPCON1_SSPM
   -- set spi command speed
   SSPCON1_SSPM = VS_SPI_COMMAND_SPEED -- use slower SPI speed for commands

   var byte data_val[2] at data

   -- set spi mode
   if defined(vs_force_spi_mode) == true then
      vs_force_spi_mode()
   end if

   -- wait till device is ready for a command
   while vs_dreq == low loop
   end loop

   -- get current state of data chip select
   var bit vs_data_chip_select_level = vs_data_chip_select

   vs_data_chip_select = high    -- disable data chip select
   vs_command_chip_select = LOW  -- enable command chip select

   spi_master_hw = 0x02          -- send write instruction
   _usec_delay(12);
   spi_master_hw = address;      -- send address
   _usec_delay(12);
   spi_master_hw = data_val[1]   -- send first data byte
   _usec_delay(12);
   spi_master_hw = data_val[0]   -- send second data byte
   _usec_delay(24);

   -- wait till device is ready to continue
   while vs_dreq == low loop
   end loop

   vs_command_chip_select = HIGH -- disable command chip select

   -- put dcs back to it's original state
   vs_data_chip_select = vs_data_chip_select_level

   SSPCON1_SSPM = spi_speed --put spi_speed back to original
end procedure

--------------------------------------------------------------------------------
-- print the contents of a register to the serial port in decimal
--------------------------------------------------------------------------------
procedure vs_reg_read_to_serial(byte in register) is
   var word x
   vs_register_read(register,x)

   const byte str1[] = "\r\n--\r\n"
   print_string(serial_hw_data, str1)
   print_word_dec(serial_hw_data,x)
   print_string(serial_hw_data, str1)
end procedure

--------------------------------------------------------------------------------
-- print the contents of a register to the serial port in decimal
--------------------------------------------------------------------------------
procedure vs_read_ram(word in address) is
   var word x

   vs_register_write(VS_REG_WRAMADDR,address)
   vs_register_read(VS_REG_WRAM, x)

   const byte str1[] = "\r\n--\r\n"
   print_string(serial_hw_data, str1)
   print_word_dec(serial_hw_data,x)
   print_string(serial_hw_data, str1)
end procedure

--------------------------------------------------------------------------------
-- Clear vs1053 registers before playing a file
--------------------------------------------------------------------------------
procedure vs_play() is
   -- clear decode time (also resets average bitrate)
   vs_register_write(VS_REG_DECODE_TIME,0)
end procedure

--------------------------------------------------------------------------------
-- clears vs_1053b data input buffer. This should be done after
-- sending mp3 data, otherwise you will get some unwanted sound from the
-- previous file played.
--------------------------------------------------------------------------------
procedure vs_stop() is
   -- set spi mode
   if defined(vs_force_spi_mode) == true then
      vs_force_spi_mode()
   end if

   for 2048 loop           -- vs1053 buffer is 2048 bytes
      spi_master_hw = 0    -- send "0" via spi port
   end loop
end procedure

--------------------------------------------------------------------------------
-- Perform soft reset.
--------------------------------------------------------------------------------
procedure vs_soft_reset() is
   var byte mode
   var byte reset at mode : 2

   -- get the current mode
   vs_register_read(VS_REG_MODE,mode)

   reset = 1 -- set the mode reset bit
   vs_register_write(VS_REG_MODE,0x4804) -- write new the mode data

   _usec_delay(2) -- wait 2us

   -- data request pin should go high after reset (hardware reset takes 1.8 ms)
   while vs_dreq == low loop
   end loop
end procedure

--------------------------------------------------------------------------------
-- fast forward a playing audio file (pseudo variable). (0 or 1) = normal
-- play speed. 2 = 2x play speed, 3 = 3x play speed, etc.
--------------------------------------------------------------------------------
procedure vs_play_speed'put(byte in data) is
   _vs_play_speed_data = data
   vs_register_write(VS_REG_WRAMADDR,0x1e04)           -- write the wram address
   vs_register_write(VS_REG_WRAM, _vs_play_speed_data) -- write speed data to wram
end procedure

function vs_play_speed'get() return byte is
   return _vs_play_speed_data       -- return play speed to user
end function

--------------------------------------------------------------------------------
-- Send mp3 data to vs1053b. This is only an example and should not be used
-- to test. You should send 32 bytes at a time after when vs_drq goes high.
-- vs_data_chip_select must be low for the entire transfer, but you can put it high
-- once in a while for bit sync.
--------------------------------------------------------------------------------
procedure _vs_send_mp3(byte in data) is
   -- set spi mode
   if defined(vs_force_spi_mode) == true then
      vs_force_spi_mode()
   end if

   -- wait for data request line to go high
   while vs_dreq == low loop
   end loop


   vs_data_chip_select = low -- activate vs1053
   spi_master_hw = data -- send data
   vs_data_chip_select = high -- disable vs1053
end procedure

--------------------------------------------------------------------------------
-- Get info about music that is currently playing. So far only gets file type
-- (MP3, WAV, AAC, WMA, MIDI, OGG)
--------------------------------------------------------------------------------
procedure vs_file_info() is
   var word data_array[2]
   var word data_array_check[2]

   var byte vs_current_file_type_array[4] at vs_current_file_type = "    "
   ;vs_current_bit_rate = 0

   var bit check = 0
   while check == 0 loop
      -- get file info words (bitrate and type)
      vs_register_read(VS_REG_HDAT0, data_array[0])
      vs_register_read(VS_REG_HDAT1, data_array[1])

      -- get it again for verification
      vs_register_read(VS_REG_HDAT0, data_array_check[0])
      vs_register_read(VS_REG_HDAT1, data_array_check[1])

      -- check that thy are the same
      if (data_array[0] == data_array_check[0]) & (data_array[1] == data_array_check[1]) then
         check = 1
      end if
   end loop

   -- decode file info words
   if data_array[1] == 0x7665 then                -- ve
      vs_current_file_type[0] = " "
      vs_current_file_type[1] = "W"
      vs_current_file_type[2] = "A"
      vs_current_file_type[3] = "V"
      vs_bitrate = data_array[0] * word(8)
   elsif data_array[1] == 0x4154 | data_array[1] == 0x4144 | data_array[1] == 0x4d34 then     -- AT AD M4
      vs_current_file_type[0] = " "
      vs_current_file_type[1] = "A"
      vs_current_file_type[2] = "A"
      vs_current_file_type[3] = "C"
      vs_bitrate = data_array[0] * word(8)
   elsif data_array[1] == 0x574D then             -- WM
      vs_current_file_type[0] = " "
      vs_current_file_type[1] = "W"
      vs_current_file_type[2] = "M"
      vs_current_file_type[3] = "A"
      vs_bitrate = data_array[0] * word(8)
   elsif data_array[1] == 0x4D54 then             -- MT
      vs_current_file_type[0] = "M"
      vs_current_file_type[1] = "I"
      vs_current_file_type[2] = "D"
      vs_current_file_type[3] = "I"
      vs_bitrate = data_array[0] * word(8)
   elsif data_array[1] == 0x4F67 then             -- Og
      vs_current_file_type[0] = " "
      vs_current_file_type[1] = "O"
      vs_current_file_type[2] = "g"
      vs_current_file_type[3] = "g"
      vs_bitrate = data_array[0] * word(8)
   else ; mp3
      var word valid = data_array[1] >> 5
      if valid == 2047 then
         vs_current_file_type[0] = " "
         vs_current_file_type[1] = "M"
         vs_current_file_type[2] = "P"
         vs_current_file_type[3] = "3"

         -- Get bitrate specified in file data
         var byte layer = (0b00000110 & byte(data_array[1])) >> 1   -- get bits 2 & 1 of VS_REG_HDAT1
         var byte id = (0b11000 & byte(data_array[1])) >> 3 -- get bits 3 & 4 VS_REG_HDAT0
         var word bitrate = (0b11110000_00000000 & data_array[0]) >> 12 -- get bits 12 -> 15 of VS_REG_HDAT0

         if layer == 1 then  -- file is layer III
            if ID == 3 then  -- id=3
               vs_bitrate = _vs_table_layer3_id3[bitrate]
            else             -- id=0,1,2
               vs_bitrate = _vs_table_layer3_id[bitrate]
            end if
         elsif layer == 2 then     -- file is layer II
            if ID == 3 then  -- id=3
               vs_bitrate = _vs_table_layer2_id3[bitrate]
            else             -- id=0,1,2
               vs_bitrate = _vs_table_layer2_id[bitrate]
            end if
         elsif layer == 3 then     -- file is layer I
            if ID == 3 then  -- id=3
               vs_bitrate = _vs_table_layer1_id3[bitrate]
            else             -- id=0,1,2
               vs_bitrate = _vs_table_layer1_id[bitrate]
            end if
         else      -- not valid
            vs_bitrate = 0
         end if
         vs_bitrate = vs_bitrate * 1000

         -- get average bitrate from extra parameters
         var dword byterate
         vs_register_write(VS_REG_WRAMADDR,0x1e05)
         vs_register_read(VS_REG_WRAM,byterate)
         vs_average_bitrate = byterate * 8 -- multiply byterate by 8 to get avg bitrate


          -- get sample rate
          var byte vs_sample = byte((0b1100_00000000 & data_array[0]) >> 10) -- get bits 10 & 11 of VS_REG_HDAT0
          if id == 3 then
             vs_samplerate = _vs_samplerate_id3[vs_sample]
          elsif id == 2 then
             vs_samplerate = _vs_samplerate_id2[vs_sample]
          else -- id = 1 or 0
             vs_samplerate = _vs_samplerate_id1[vs_sample]
          end if

      else
         vs_current_file_type[3] = "-"
         vs_current_file_type[2] = "-"
         vs_current_file_type[1] = "-"
         vs_current_file_type[0] = "-"
      end if

   end if

end procedure

--------------------------------------------------------------------------------
-- Writes calculated volume data to volume register (internal use only)
--------------------------------------------------------------------------------
var byte _vs_current_volume = 0
var sbyte _vs_current_volume_right = 0
var sbyte _vs_current_volume_left = 0
var byte*2 _vs_volume_data= 0
var byte _vs_volume_data_both[2] at _vs_volume_data
var byte _vs_left_data at  _vs_volume_data_both[0]
var byte _vs_right_data at _vs_volume_data_both[1]

procedure _vs_volume_set() is
   var word volume_check_right = word (_vs_current_volume_right) + word(_vs_current_volume)
   var word volume_check_left =  word (_vs_current_volume_left)  + word(_vs_current_volume)

   -- make sure volume right is in range
   if volume_check_right == 0xFFFF then
      volume_check_right = 0
      _vs_right_data = 0
   elsif volume_check_right > 255 then
      volume_check_right = 255
      _vs_right_data = 255
   end if

   -- make sure volume left is in range
   if volume_check_left == 0xFFFF then
      volume_check_left = 0
      _vs_left_data = 0
   elsif volume_check_left > 255 then
      volume_check_left = 255
      _vs_left_data = 255
   end if

   -- invert the values for vol register
   _vs_right_data = 0xFF - byte(volume_check_right)
   _vs_left_data  = 0xFF - byte(volume_check_left)

   -- mute if 0 volume
   if _vs_current_volume == 0 then
      _vs_volume_data= 0xFFFF
   end if

   -- write the data to the vol register
   vs_register_write(VS_REG_VOL,_vs_volume_data)
end procedure

--------------------------------------------------------------------------------
-- Volume control (pseudo variable). Sets volume by -0.5db per step down from 255.
-- "vs_volume = 253" will give 20 * -0.5 = -10db
-- "vs_volume = 255" will be 0db (max volume)
-- "vs_volume = 0" will be (min volume/no sound)
--------------------------------------------------------------------------------
procedure vs_volume'put(byte in data) is
   _vs_current_volume = data -- save volume from user
   _vs_volume_set()
end procedure

function vs_volume'get() return byte is
   return _vs_current_volume -- return volume to user
end function

--------------------------------------------------------------------------------
-- Right speaker volume control (pseudo variable) (-127 to 127) in steps of 0.5db.
-- Max volume is 255, so if vs_volume = 250, you may only add 5 more to the
-- right speaker (vs_volume_right = 5). Higher values are allowed but will be
-- limited by the max volume.
--------------------------------------------------------------------------------
procedure vs_volume_right'put(sbyte in data) is
   _vs_current_volume_right = data -- save volume from user
   _vs_volume_set()
end procedure

function vs_volume_right'get() return sbyte is
   return _vs_current_volume_right -- return volume to user
end function

--------------------------------------------------------------------------------
-- Left speaker volume control (pseudo variable) (-127 to 127) in steps of 0.5db.
-- Max volume is 255, so if vs_volume = 250, you may only add 5 more to the
-- left speaker (vs_volume_left = 5). Higher values are allowed but will be
-- limited by the max volume.
--------------------------------------------------------------------------------
procedure vs_volume_left'put(sbyte in data) is
   _vs_current_volume_left = data -- save volume from user
   _vs_volume_set()
end procedure

function vs_volume_left'get() return sbyte is
   return _vs_current_volume_left -- return volume to user
end function

--------------------------------------------------------------------------------
-- Mute volume (pseudo variable) vs_mute = TRUE or FALSE
--------------------------------------------------------------------------------
procedure vs_mute'put(bit in data) is
   _vs_mute_data = data
   if data == TRUE then
      vs_register_write(VS_REG_VOL,0xFFFF) -- turn volume off
   else
      _vs_volume_set()                     -- turn volume on (back to original)
   end if
end procedure

function vs_mute'get() return bit is
   return _vs_mute_data                    -- return if muted
end function


--------------------------------------------------------------------------------
-- Writes calculated bass and treble data to base/treble register (internal use only)
--------------------------------------------------------------------------------
var byte vs_current_bass     = 0
var sbyte vs_current_treble  = 0
procedure _vs_set_bass_treble_set() is
   var word _vs_bass_treble_data = 0
   var byte _vs_treble_data
   var byte _vs_bass_data

   -- get the base into 4 bits
   _vs_bass_data = vs_current_bass & 0b1111

   -- get the treble into 4 bits (signed)
   _vs_treble_data = byte(vs_current_treble + 8) & 0b1111
   var bit vs_treble_sign at _vs_treble_data : 3
   vs_treble_sign = !vs_treble_sign

   -- create the data word that will be put into VS_REG_BASS register
   -- treble at bits 12-15, bass at bits 4-7
   _vs_bass_treble_data = _vs_treble_data
   _vs_bass_treble_data = _vs_bass_treble_data << 8
   _vs_bass_treble_data = _vs_bass_treble_data + _vs_bass_data
   _vs_bass_treble_data = _vs_bass_treble_data << 4

    -- write to VS_REG_BASS register
   vs_register_write(VS_REG_BASS,_vs_bass_treble_data)
end procedure

--------------------------------------------------------------------------------
-- Bass enhance/boost (pseudo variable). vs_bass = 0 to 15, 1db per step
-- Normal level is vs_bass = 0
--------------------------------------------------------------------------------
procedure vs_bass'put(byte in data) is
   vs_current_bass = data    -- save base from user
   _vs_set_bass_treble_set() -- set base/treble
end procedure

function vs_bass'get() return byte is
   return vs_current_bass    -- return base to user
end function

--------------------------------------------------------------------------------
-- Treble control (pseudo variable). vs_treble = -8 to +7, 1.5db per step.
-- Normal level is vs_treble = 0. Don't ask me why this is does not work the
-- same as bass control, see datasheet and ask the manufacturer!
--------------------------------------------------------------------------------
procedure vs_treble'put(sbyte in data) is
   vs_current_treble = data -- save base from user
   _vs_set_bass_treble_set() -- set base/treble
end procedure

function vs_treble'get() return sbyte is
   return vs_current_treble -- return base to user
end function

--------------------------------------------------------------------------------
-- patch for vs1053b only (don't know what it fixes)
--------------------------------------------------------------------------------
procedure vs_patch_vs1053b() is
   vs_register_write(VS_REG_WRAMADDR,0x8010)
   vs_register_write(VS_REG_WRAM,0x3e12)
   vs_register_write(VS_REG_WRAM,0xb817)
   vs_register_write(VS_REG_WRAM,0x3e14)
   vs_register_write(VS_REG_WRAM,0xf812)
   vs_register_write(VS_REG_WRAM,0x3e01)
   vs_register_write(VS_REG_WRAM,0xb811)
   vs_register_write(VS_REG_WRAM,0x0007)
   vs_register_write(VS_REG_WRAM,0x9717)
   vs_register_write(VS_REG_WRAM,0x0020)
   vs_register_write(VS_REG_WRAM,0xffd2)
   vs_register_write(VS_REG_WRAM,0x0030)
   vs_register_write(VS_REG_WRAM,0x11d1)
   vs_register_write(VS_REG_WRAM,0x3111)
   vs_register_write(VS_REG_WRAM,0x8024)
   vs_register_write(VS_REG_WRAM,0x3704)
   vs_register_write(VS_REG_WRAM,0xc024)
   vs_register_write(VS_REG_WRAM,0x3b81)
   vs_register_write(VS_REG_WRAM,0x8024)
   vs_register_write(VS_REG_WRAM,0x3101)
   vs_register_write(VS_REG_WRAM,0x8024)
   vs_register_write(VS_REG_WRAM,0x3b81)
   vs_register_write(VS_REG_WRAM,0x8024)
   vs_register_write(VS_REG_WRAM,0x3f04)
   vs_register_write(VS_REG_WRAM,0xc024)
   vs_register_write(VS_REG_WRAM,0x2808)
   vs_register_write(VS_REG_WRAM,0x4800)
   vs_register_write(VS_REG_WRAM,0x36f1)
   vs_register_write(VS_REG_WRAM,0x9811)
   vs_register_write(VS_REG_WRAMADDR,0x8028)
   vs_register_write(VS_REG_WRAM,0x2a00)
   vs_register_write(VS_REG_WRAM,0x040e)
end procedure

--------------------------------------------------------------------------------
-- Initialize vs1053b and set volume to max. User should lower volume after
-- init(). After init() vs_reg_mode_data should be equal to 0x4800 or 0x800
--------------------------------------------------------------------------------
procedure vs_init() is
   var dword spi_speed = SSPCON1_SSPM

   -- set spi mode
   if defined(vs_force_spi_mode) == true then
      vs_force_spi_mode()
   end if

   var word vs_reg_mode_data = 0

   -- data request pin should go high after reset (hardware reset takes 1.8 ms)
   _usec_delay(100)          -- allow time for vs_dreq to go low at startup
   while vs_dreq == low loop -- now wait for it to go high again
   end loop

   -- check if communication is ok
   for 10 loop -- try communication 10 times
      vs_register_read(VS_REG_MODE,vs_reg_mode_data) -- get mode data

      -- mode data should = 0x4800 or 0x0800
      if (vs_reg_mode_data == 0x4800) | (vs_reg_mode_data == 0x0800) then
         vs_init_ok = TRUE         -- set init is ok
      end if

      -- exit loop if ok
      if vs_init_ok == TRUE then
         exit loop
      end if
   end loop

   -- if communication is ok, init some settings.
   if vs_init_ok == TRUE then

      -- enable PLL for high internal clock
      if VS_PLL == 3_5 then
         vs_register_write(VS_REG_CLOCKF,0x9800) -- 43.008mhz
      elsif VS_PLL == 5 then
         vs_register_write(VS_REG_CLOCKF,0xE000) -- 61.44mhz
      end if

      -- reset volume and bass registers
      vs_register_write(VS_REG_VOL,0)
      vs_register_write(VS_REG_BASS,0)

      -- do not fast-forward
      vs_play_speed = 1
   end if

   SSPCON1_SSPM = spi_speed --put spi_speed back to original
end procedure

--------------------------------------------------------------------------------
-- Turn on Microphone.
--------------------------------------------------------------------------------
procedure vs_microphone_mode() is
   var word mode_data

   -- set mode to microphone
   vs_register_read(VS_REG_MODE,mode_data)
   var bit sm_line1 at mode_data : 14
   var bit sm_adpcm at mode_data : 12
   var bit sm_reset at mode_data : 2
   sm_reset = 1   -- soft reset
   sm_adpcm = 1   -- record mode
   sm_line1 = 0   -- microphone
   vs_register_write(VS_REG_MODE,mode_data) -- write mode
end procedure

--------------------------------------------------------------------------------
-- Turn on line in.
--------------------------------------------------------------------------------
procedure vs_line_in_mode() is
   var word mode_data

   -- set mode to line in
   vs_register_read(VS_REG_MODE,mode_data)
   var bit sm_line1 at mode_data : 14
   var bit sm_adpcm at mode_data : 12
   var bit sm_reset at mode_data : 2
   sm_reset = 1   -- soft reset
   sm_adpcm = 1   -- record mode
   sm_line1 = 1   -- line in
   vs_register_write(VS_REG_MODE,mode_data) -- write mode
end procedure

--------------------------------------------------------------------------------
-- Set vs back to normal for playing media files
--------------------------------------------------------------------------------
procedure vs_play_mode() is
    -- write mode and reset
   vs_register_write(VS_REG_MODE,0x4804)
end procedure


--------------------------------------------------------------------------------
-- Use vs1053b 8 bit GPIO port & pins like a regular port (3.3v tollerent I/O pins).
-- port name is "vs_port_gpio", pin names are "vs_pin_gpio0" to "vs_pin_gpio7"
-- add "_direction" to the pin name to set it's direction. (pseudo variables).
-- gpio0 & gpio1 must have pull down resistors for active low at startup.
--------------------------------------------------------------------------------
var byte vs_port_gpio_data = 0
var bit vs_pin_gpio0_data at vs_port_gpio_data : 0
var bit vs_pin_gpio1_data at vs_port_gpio_data : 1
var bit vs_pin_gpio2_data at vs_port_gpio_data : 2
var bit vs_pin_gpio3_data at vs_port_gpio_data : 3
var bit vs_pin_gpio4_data at vs_port_gpio_data : 4
var bit vs_pin_gpio5_data at vs_port_gpio_data : 5
var bit vs_pin_gpio6_data at vs_port_gpio_data : 6
var bit vs_pin_gpio7_data at vs_port_gpio_data : 7

var byte vs_port_gpio_direction_data = 0
var bit vs_pin_gpio0_direction_data at vs_port_gpio_direction_data : 0
var bit vs_pin_gpio1_direction_data at vs_port_gpio_direction_data : 1
var bit vs_pin_gpio2_direction_data at vs_port_gpio_direction_data : 2
var bit vs_pin_gpio3_direction_data at vs_port_gpio_direction_data : 3
var bit vs_pin_gpio4_direction_data at vs_port_gpio_direction_data : 4
var bit vs_pin_gpio5_direction_data at vs_port_gpio_direction_data : 5
var bit vs_pin_gpio6_direction_data at vs_port_gpio_direction_data : 6
var bit vs_pin_gpio7_direction_data at vs_port_gpio_direction_data : 7

-- port vs_port_gpio
procedure vs_port_gpio'put(byte in data) is
   vs_port_gpio_data = data                          -- get port data/level from user
   vs_register_write(VS_REG_WRAMADDR,0xc019)         -- set vs ram address
   vs_register_write(VS_REG_WRAM, vs_port_gpio_data) -- set the register data
end procedure

function vs_port_gpio'get() return byte is
   return vs_port_gpio_data                          -- return data/level to user
end function

procedure vs_port_gpio_direction'put(byte in data) is
   vs_port_gpio_direction_data = data
   vs_register_write(VS_REG_WRAMADDR,0xc017)
   vs_register_write(VS_REG_WRAM, vs_port_gpio_direction_data)
end procedure

function vs_port_gpio_direction'get() return byte is
   return vs_port_gpio_direction_data
end function

-- pin vs_pin_gpio0
procedure vs_pin_gpio0'put(bit in data) is
   vs_pin_gpio0_data = data                           -- get pin level from user
   vs_register_write(VS_REG_WRAMADDR,0xc019)          -- set vs ram address
   vs_register_write(VS_REG_WRAM, vs_port_gpio_data)  -- set the register data
end procedure

function vs_pin_gpio0'get() return bit is
   return vs_pin_gpio0_data                           -- return level to user
end function

procedure vs_pin_gpio0_direction'put(bit in data) is
   vs_pin_gpio0_direction_data = data
   vs_register_write(VS_REG_WRAMADDR,0xc017)
   vs_register_write(VS_REG_WRAM, vs_port_gpio_direction_data)
end procedure

function vs_pin_gpio0_direction'get() return bit is
   return vs_pin_gpio0_direction_data
end function

-- pin vs_pin_gpio1
procedure vs_pin_gpio1'put(bit in data) is
   vs_pin_gpio1_data = data                           -- get pin level from user
   vs_register_write(VS_REG_WRAMADDR,0xc019)          -- set vs ram address
   vs_register_write(VS_REG_WRAM, vs_port_gpio_data)  -- set the register data
end procedure

function vs_pin_gpio1'get() return bit is
   return vs_pin_gpio1_data                           -- return level to user
end function

procedure vs_pin_gpio1_direction'put(bit in data) is
   vs_pin_gpio1_direction_data = data
   vs_register_write(VS_REG_WRAMADDR,0xc017)
   vs_register_write(VS_REG_WRAM, vs_port_gpio_direction_data)
end procedure

function vs_pin_gpio1_direction'get() return bit is
   return vs_pin_gpio1_direction_data
end function

-- pin vs_pin_gpio2
procedure vs_pin_gpio2'put(bit in data) is
   vs_pin_gpio2_data = data                           -- get pin level from user
   vs_register_write(VS_REG_WRAMADDR,0xc019)          -- set vs ram address
   vs_register_write(VS_REG_WRAM, vs_port_gpio_data)  -- set the register data
end procedure

function vs_pin_gpio2'get() return bit is
   return vs_pin_gpio2_data                           -- return level to user
end function

procedure vs_pin_gpio2_direction'put(bit in data) is
   vs_pin_gpio2_direction_data = data
   vs_register_write(VS_REG_WRAMADDR,0xc017)
   vs_register_write(VS_REG_WRAM, vs_port_gpio_direction_data)
end procedure

function vs_pin_gpio2_direction'get() return bit is
   return vs_pin_gpio2_direction_data
end function

-- pin vs_pin_gpio3
procedure vs_pin_gpio3'put(bit in data) is
   vs_pin_gpio3_data = data                           -- get pin level from user
   vs_register_write(VS_REG_WRAMADDR,0xc019)          -- set vs ram address
   vs_register_write(VS_REG_WRAM, vs_port_gpio_data)  -- set the register data
end procedure

function vs_pin_gpio3'get() return bit is
   return vs_pin_gpio3_data                           -- return level to user
end function

procedure vs_pin_gpio3_direction'put(bit in data) is
   vs_pin_gpio3_direction_data = data
   vs_register_write(VS_REG_WRAMADDR,0xc017)
   vs_register_write(VS_REG_WRAM, vs_port_gpio_direction_data)
end procedure

function vs_pin_gpio3_direction'get() return bit is
   return vs_pin_gpio3_direction_data
end function

-- pin vs_pin_gpio4
procedure vs_pin_gpio4'put(bit in data) is
   vs_pin_gpio4_data = data                           -- get pin level from user
   vs_register_write(VS_REG_WRAMADDR,0xc019)          -- set vs ram address
   vs_register_write(VS_REG_WRAM, vs_port_gpio_data)  -- set the register data
end procedure

function vs_pin_gpio4'get() return bit is
   return vs_pin_gpio4_data                           -- return level to user
end function

procedure vs_pin_gpio4_direction'put(bit in data) is
   vs_pin_gpio4_direction_data = data
   vs_register_write(VS_REG_WRAMADDR,0xc017)
   vs_register_write(VS_REG_WRAM, vs_port_gpio_direction_data)
end procedure

function vs_pin_gpio4_direction'get() return bit is
   return vs_pin_gpio4_direction_data
end function

-- pin vs_pin_gpio5
procedure vs_pin_gpio5'put(bit in data) is
   vs_pin_gpio5_data = data                           -- get pin level from user
   vs_register_write(VS_REG_WRAMADDR,0xc019)          -- set vs ram address
   vs_register_write(VS_REG_WRAM, vs_port_gpio_data)  -- set the register data
end procedure

function vs_pin_gpio5'get() return bit is
   return vs_pin_gpio5_data                           -- return level to user
end function

procedure vs_pin_gpio5_direction'put(bit in data) is
   vs_pin_gpio5_direction_data = data
   vs_register_write(VS_REG_WRAMADDR,0xc017)
   vs_register_write(VS_REG_WRAM, vs_port_gpio_direction_data)
end procedure

function vs_pin_gpio5_direction'get() return bit is
   return vs_pin_gpio5_direction_data
end function

-- pin vs_pin_gpio6
procedure vs_pin_gpio6'put(bit in data) is
   vs_pin_gpio6_data = data                           -- get pin level from user
   vs_register_write(VS_REG_WRAMADDR,0xc019)          -- set vs ram address
   vs_register_write(VS_REG_WRAM, vs_port_gpio_data)  -- set the register data
end procedure

function vs_pin_gpio6'get() return bit is
   return vs_pin_gpio6_data                           -- return level to user
end function

procedure vs_pin_gpio6_direction'put(bit in data) is
   vs_pin_gpio6_direction_data = data
   vs_register_write(VS_REG_WRAMADDR,0xc017)
   vs_register_write(VS_REG_WRAM, vs_port_gpio_direction_data)
end procedure

function vs_pin_gpio6_direction'get() return bit is
   return vs_pin_gpio6_direction_data
end function

-- pin vs_pin_gpio7
procedure vs_pin_gpio7'put(bit in data) is
   vs_pin_gpio7_data = data                           -- get pin level from user
   vs_register_write(VS_REG_WRAMADDR,0xc019)          -- set vs ram address
   vs_register_write(VS_REG_WRAM, vs_port_gpio_data)  -- set the register data
end procedure

function vs_pin_gpio7'get() return bit is
   return vs_pin_gpio7_data                           -- return level to user
end function

procedure vs_pin_gpio7_direction'put(bit in data) is
   vs_pin_gpio7_direction_data = data
   vs_register_write(VS_REG_WRAMADDR,0xc017)
   vs_register_write(VS_REG_WRAM, vs_port_gpio_direction_data)
end procedure

function vs_pin_gpio7_direction'get() return bit is
   return vs_pin_gpio7_direction_data
end function
