-- Title: RC Servo Slave
-- Author: Matthew Schinkel - borntechi.com, copyright (c) 2009, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4m
-- Revision: $Revision: 1.1 $
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: This library allows your PIC to read pulses given by a RC
--              receiver. Connect your PIC to a rc receiver the same way you
--              would connect a RC servo. This library will output a value
--              dependant on where your fingers are moving the controls
--              on your remote transmitter. PIC will read the pulse width
--              at the receiver.
--
-- Sources:
-- http://www.horrorseek.com/home/halloween/wolfstone/Motors/svoint_RCServos.html
--
-- notes:
-- TIMER0 only works as a 8 bit timer.
--

const _SERVO_SLAVE_NUM_OF_INPUTS = SERVO_SLAVE_USE_INT_ON_CHANGE_PIN_0 + SERVO_SLAVE_USE_INT_ON_CHANGE_PIN_1 + SERVO_SLAVE_USE_INT_ON_CHANGE_PIN_2 + SERVO_SLAVE_USE_INT_ON_CHANGE_PIN_3

-- some vars
var byte servo_slave_is_valid[_SERVO_SLAVE_NUM_OF_INPUTS]; = TRUE
var byte _servo_slave_off_count[_SERVO_SLAVE_NUM_OF_INPUTS]; = 0

-- check if current pic has selected timers
if SERVO_SLAVE_USE_TIMER == 0 then
   if !(defined(tmr0) == TRUE) then
      _error "target pic does not have a timer0 module"
   end if
elsif SERVO_SLAVE_USE_TIMER == 1 then
   if !(defined(tmr1) == TRUE) then
      _error "target pic does not have a timer1 module"
   end if
elsif SERVO_SLAVE_USE_TIMER == 3 then
   if !(defined(tmr3) == TRUE) then
       _error "target pic does not have a timer3 module"
   end if
end if

-- setup servo timer aliase for the timer the user selected
if SERVO_SLAVE_USE_TIMER == 0 then
      _error "Timer0 is not supported by servo slave"
      
   -- set special timer0 settings
   t0con_psa  = 0  -- assign prescaler to timer0
   -- set timer registers to timer0
   alias servo_slave_tmr      is TMR0L           -- timer interval (note: 16 bit timer0 doesn't work)
   alias servo_slave_cs       is T0CON_T0CS      -- timer clock source bit
   alias servo_slave_ie       is INTCON_TMR0IE   -- interrupt enable
   alias servo_slave_if       is INTCON_TMR0IF   -- interrupt overflow bit
   alias servo_slave_ps       is T0CON_T0PS      -- timer prescaler select bits
   alias servo_slave_on       is T0CON_TMR0ON    -- timer on

   -- detect if 8 or 16 bit timer (note: 16 bit timer0 doesn't work)
   if defined(TMR0H) then
      const SERVO_SLAVE_TIMER_SIZE = 8
      T0CON_T08BIT = 0 -- choose 16 bit mode
   else
      const SERVO_SLAVE_TIMER_SIZE = 8
      T0CON_T08BIT = 1 -- choose 8 bit mode
   end if
   
elsif SERVO_SLAVE_USE_TIMER == 1 then
   -- set timer registers to timer1
   alias servo_slave_tmr      is TMR1             -- timer interval
   alias servo_slave_cs       is T1CON_TMR1CS     -- timer clock source bit
   alias servo_slave_ie       is PIE1_TMR1IE      -- interrupt enable
   alias servo_slave_if       is PIR1_TMR1IF      -- interrupt overflow bit
   alias servo_slave_ps       is T1CON_T1CKPS     -- timer prescaler select bits
   alias servo_slave_on       is T1CON_TMR1ON     -- timer on

   if defined(TMR1H) then
      const SERVO_SLAVE_TIMER_SIZE = 16
   else
      const SERVO_SLAVE_TIMER_SIZE = 8
   end if
elsif SERVO_SLAVE_USE_TIMER == 3 then
   -- set timer registers to timer3
   alias servo_slave_tmr      is TMR3             -- timer interval
   alias servo_slave_cs       is T3CON_TMR3CS     -- timer clock source bit
   alias servo_slave_ie       is PIE2_TMR3IE      -- interrupt enable
   alias servo_slave_if       is PIR2_TMR3IF      -- interrupt overflow bit
   alias servo_slave_ps       is T3CON_T3CKPS     -- timer prescaler select bits
   alias servo_slave_on       is T3CON_TMR3ON    -- timer on

   if defined(TMR3H) then
      const SERVO_SLAVE_TIMER_SIZE = 16
   else
      const SERVO_SLAVE_TIMER_SIZE = 8
   end if
end if

-- devine variables depending on timer size
if SERVO_SLAVE_TIMER_SIZE == 8 then
   var byte _servo_slave[_SERVO_SLAVE_NUM_OF_INPUTS]
   var byte _servo_last_timer_value[_SERVO_SLAVE_NUM_OF_INPUTS]
   var byte servo_slave_steps_per_2_5_msec -- holds number of steps within 2.5ms
   var byte servo_high_value
   var byte servo_low_value
   var word servo_slave_multiple
else
   var word _servo_slave[_SERVO_SLAVE_NUM_OF_INPUTS]
   var word _servo_last_timer_value[_SERVO_SLAVE_NUM_OF_INPUTS]
   var word servo_slave_steps_per_2_5_msec -- holds number of steps within 2.5ms
   var word servo_high_value
   var word servo_low_value
   var dword servo_slave_multiple
end if

--------------------------------------------------------------------------------
-- interrupt on change pin callback, reset or read the timer.
--------------------------------------------------------------------------------

if _SERVO_SLAVE_NUM_OF_INPUTS == 1 then
   if SERVO_SLAVE_USE_INT_ON_CHANGE_PIN_0 == 1 then
      -- interrupt for interrupt on change pin0
      procedure int_on_change_callback_0() is
         if int_on_change_pin_state_0 == LOW then
            _servo_slave[0] = servo_slave_tmr
         else
            servo_slave_tmr = 0
            _servo_slave_off_count[0] = 0
            servo_slave_is_valid[0] = TRUE
         end if
      end procedure
   end if

   if SERVO_SLAVE_USE_INT_ON_CHANGE_PIN_1 == 1 then
      -- interrupt for interrupt on change pin1
      procedure int_on_change_callback_1() is
         if int_on_change_pin_state_1 == LOW then
            _servo_slave[1] = servo_slave_tmr
         else
            servo_slave_tmr = 0
            _servo_slave_off_count[1] = 0
            servo_slave_is_valid[1] = TRUE
         end if
      end procedure
   end if

   if SERVO_SLAVE_USE_INT_ON_CHANGE_PIN_2 == 1 then
      -- interrupt for interrupt on change pin2
      procedure int_on_change_callback_2() is
         if int_on_change_pin_state_2 == LOW then
            _servo_slave[2] = servo_slave_tmr
         else
            servo_slave_tmr = 0
            _servo_slave_off_count[2] = 0
            servo_slave_is_valid[2] = TRUE
         end if
      end procedure
   end if

   if SERVO_SLAVE_USE_INT_ON_CHANGE_PIN_3 == 1 then
      -- interrupt for interrupt on change pin3
      procedure int_on_change_callback_3() is
         if int_on_change_pin_state_3 == LOW then
            _servo_slave[3] = servo_slave_tmr
         else
            servo_slave_tmr = 0
            _servo_slave_off_count[3] = 0
         end if
      end procedure
   end if
elsif _SERVO_SLAVE_NUM_OF_INPUTS > 1 then
   if SERVO_SLAVE_USE_INT_ON_CHANGE_PIN_0 == 1 then
      -- interrupt for interrupt on change pin 0
      procedure int_on_change_callback_0() is
         if int_on_change_pin_state_0 == LOW then
            ;_servo_slave = servo_slave_tmr
            _servo_slave[0] = servo_slave_tmr - _servo_last_timer_value[0]
         else
            ;servo_slave_tmr = 0
            _servo_last_timer_value[0] = servo_slave_tmr

            _servo_slave_off_count[0] = 0
            servo_slave_is_valid[0] = TRUE
         end if
      end procedure
   end if

   if SERVO_SLAVE_USE_INT_ON_CHANGE_PIN_1 == 1 then
      -- interrupt for interrupt on change pin 1
      procedure int_on_change_callback_1() is
         if int_on_change_pin_state_1 == LOW then
            ;_servo_slave = servo_slave_tmr
            _servo_slave[1] = servo_slave_tmr - _servo_last_timer_value[1]
         else
            ;servo_slave_tmr = 1
            _servo_last_timer_value[1] = servo_slave_tmr

            _servo_slave_off_count[1] = 1
            servo_slave_is_valid[1] = TRUE
         end if
      end procedure
   end if

   if SERVO_SLAVE_USE_INT_ON_CHANGE_PIN_2 == 1 then
      -- interrupt for interrupt on change pin 2
      procedure int_on_change_callback_2() is
         if int_on_change_pin_state_2 == LOW then
            ;_servo_slave = servo_slave_tmr
            _servo_slave[2] = servo_slave_tmr - _servo_last_timer_value[2]
         else
            ;servo_slave_tmr = 2
            _servo_last_timer_value[2] = servo_slave_tmr

            _servo_slave_off_count[2] = 2
            servo_slave_is_valid[2] = TRUE
         end if
      end procedure
   end if

   if SERVO_SLAVE_USE_INT_ON_CHANGE_PIN_3 == 1 then
      -- interrupt for interrupt on change pin 3
      procedure int_on_change_callback_3() is
         if int_on_change_pin_state_3 == LOW then
            ;_servo_slave = servo_slave_tmr
            _servo_slave[3] = servo_slave_tmr - _servo_last_timer_value[3]
         else
            ;servo_slave_tmr = 3
            _servo_last_timer_value[3] = servo_slave_tmr

            _servo_slave_off_count[3] = 3
            servo_slave_is_valid[3] = TRUE
         end if
      end procedure
   end if
end if

--------------------------------------------------------------------------------
-- Initialize the servo
--------------------------------------------------------------------------------
procedure servo_slave_init() is
   -- enable global interupts
   INTCON_GIE  = on        -- Enables all unmasked interrupts
   INTCON_PEIE = on        -- Enables all unmasked peripheral interrupts

   servo_slave_if = off   -- clear interrupt overflow bit
   servo_slave_ie = on    -- timer overflow interrupt enable
   servo_slave_cs = 0     -- use internal clock for timer
   servo_slave_on = on    -- enable the timer
   
   if SERVO_SLAVE_TIMER_SIZE == 8 then
      -- timer0 min step time of (1/osc)*4*2. (0.4us at 20mhz)

      -- calculate number of steps available within 2.5ms ;example on 20mhz
      const dword SERVO_SLAVE_CALC_1 = target_clock / 10_000           ;= 2000
      const dword SERVO_SLAVE_CALC_2 = SERVO_SLAVE_CALC_1 / 4         ;= 500
      const dword SERVO_SLAVE_CALC_3 = 10_000 / SERVO_SLAVE_CALC_2    ;= 20
      const dword SERVO_SLAVE_CALC_4 = SERVO_SLAVE_CALC_3 * 2         ;= 40
      var dword servo_slave_steps = 250_000 / SERVO_SLAVE_CALC_4      ;= 6250

      -- increase prescaler if 256 clock pulses is not enough time
      var byte servo_slave_prescaler = 0
      forever loop
         if servo_slave_steps > 255 then
            servo_slave_prescaler = servo_slave_prescaler + 1 -- increase prescaler
            servo_slave_steps = servo_slave_steps / 2         -- decrease timer steps needed
         else
            exit loop
         end if
      end loop

      -- do some calculations to fix min/max values
      servo_low_value = byte(servo_slave_steps) / 6 -- 0.41ms
      servo_high_value = byte(servo_slave_steps) - servo_low_value -- 2.5ms

      var byte calc
      calc = byte((word(SERVO_SLAVE_MIN) * 255)/100)
      servo_low_value = servo_low_value + calc
      calc = byte((word(SERVO_SLAVE_MAX) * 255)/100)
      servo_high_value = servo_high_value - calc

      servo_slave_multiple = word(255*100) / servo_high_value ;283
      
      -- servo_slave_steps is now calculated, set the prescaler
      servo_slave_ps = servo_slave_prescaler

      -- put it into a byte for the 8 bit timer
      var byte value[1] at servo_slave_steps
      servo_slave_steps_per_2_5_msec = value[0]
   else
      -- timer1 & timer3 min step time is (1/osc)*4*1. (0.2us at 20mhz)

      -- calculate number of steps available within 2.5ms ;example on 20mhz
      const dword SERVO_SLAVE_CALC_1 = target_clock / 40_000          ;500
      const dword SERVO_SLAVE_CALC_2 = 10_000 / SERVO_SLAVE_CALC_1    ;20
      var dword servo_slave_steps = 250_000 / SERVO_SLAVE_CALC_2      ;12500

      -- increase prescaler if 65535 clock pulses is not enouf time
      var byte servo_slave_prescaler = 0
      forever loop
         if servo_slave_steps > 65535 then
            servo_slave_prescaler = servo_slave_prescaler + 1 -- increase prescaler
            servo_slave_steps = servo_slave_steps / 2         -- decrease timer steps needed
         else
            exit loop
         end if
      end loop

      -- do some calculations to fix min/max values
      servo_low_value = word(servo_slave_steps) / 6 -- 0.41ms
      servo_high_value = word(servo_slave_steps) - servo_low_value -- 2.5ms

      var word calc
      calc = word((dword(SERVO_SLAVE_MIN) * 65535)/100)
      servo_low_value = servo_low_value + calc
      calc = word((dword(SERVO_SLAVE_MAX) * 65535)/100)
      servo_high_value = servo_high_value - calc

      servo_slave_multiple = dword(65535*100) / servo_high_value

      -- servo_slave_steps is now calculated, set the prescaler
      servo_slave_ps = servo_slave_prescaler

      -- put it into a word for the 16 bit timer
      var word value[2] at servo_slave_steps
      servo_slave_steps_per_2_5_msec = (value[1] << 8) + value[0]

   end if
end procedure

--------------------------------------------------------------------------------
-- interrupt to detect if no pulse is available.
--------------------------------------------------------------------------------
procedure servo_slave_timer_isr() is
   pragma interrupt


   if servo_slave_if then -- check if it is a timer interrupt

   
      var byte step
      for _SERVO_SLAVE_NUM_OF_INPUTS using step loop
         if _servo_slave_off_count[step] > 16 then
            servo_slave_is_valid[step] = FALSE
         else
            _servo_slave_off_count[step] = _servo_slave_off_count[step] + 1
         end if
      end loop

      servo_slave_if = off
   end if
end procedure


--------------------------------------------------------------------------------
-- Outputs the value of the rc pulse input
--------------------------------------------------------------------------------
function servo_slave'get(byte in input_num) return byte is
   if SERVO_SLAVE_TIMER_SIZE == 8 then
      var byte servo_slave
      -- adjustments
      if _servo_slave[input_num] < servo_low_value then
         servo_slave = 0
      else
         servo_slave = _servo_slave[input_num] - servo_low_value
         var word calc = (word(servo_slave)*servo_slave_multiple) / 100
         if calc > 0xFF then
            servo_slave = 0xFF
         else
            servo_slave = byte(calc)
         end if
      end if

      return servo_slave
   else
      var word servo_slave
      -- adjustments
      if _servo_slave[input_num] < servo_low_value then
         servo_slave = 0
      else
         servo_slave = _servo_slave[input_num] - servo_low_value
         var dword calc = (dword(servo_slave)*servo_slave_multiple) / 100
         if calc > 0xFFFF then
            servo_slave = 0xFFFF
         else
            servo_slave = word(calc)
         end if
      end if

      return byte(servo_slave / 257)
   end if
end function







